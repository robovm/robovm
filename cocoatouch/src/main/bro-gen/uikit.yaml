package: org.robovm.apple.uikit
include: [foundation.yaml, coreanimation.yaml, coregraphics.yaml, coredata.yaml, coreimage.yaml, coretext.yaml, corelocation.yaml]
library: UIKit
framework: UIKit
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/UIKit.framework/Headers/UIKit.h
typedefs:
    NSCopying: NSObject
    'void (^)(UIBackgroundFetchResult)': '@Block VoidBlock1<UIBackgroundFetchResult>'
    'void (^)(id<UIViewControllerTransitionCoordinatorContext>)': '@Block VoidBlock1<UIViewControllerTransitionCoordinatorContext>'
    'void (^)(CGRect, CGRect, NSTextContainer *, NSRange, BOOL *)': '@Block("(@ByVal, @ByVal, , @ByVal, )") VoidBlock5<CGRect, CGRect, NSTextContainer, NSRange, BytePtr>'
    'void (^)(CGRect, BOOL *)': '@Block("(@ByVal, )") VoidBlock2<CGRect, BytePtr>'
    'void (^)(void (^)(void))': '@Block("(@Block)") VoidBlock1<Runnable>'
    'void (^)(NSError *)': '@Block VoidBlock1<NSError>'
    'void (^)(UILexicon *)': '@Block VoidBlock1<UILexicon>'
    'void (^)(UIAlertAction *)': '@Block VoidBlock1<UIAlertAction>'
    'void (^)(UITextField *)': '@Block VoidBlock1<UITextField>'
    'void (^)(UITableViewRowAction *, NSIndexPath *)': '@Block VoidBlock2<UITableViewRowAction, NSIndexPath>'

enums:
    NSControlCharacterAction: {}
    NSGlyphProperty: {}
    NSLayoutAttribute: {}
    NSLayoutFormatOptions: {}
    NSLayoutRelation: {}
    NSLineBreakMode: {}
    NSStringDrawingOptions: { bits: true, marshaler: Bits.AsMachineSizedIntMarshaler }
    NSTextAlignment: {}
    NSTextLayoutOrientation: {}
    NSTextStorageEditActions: {}
    NSTextWritingDirection: {}
    NSUnderlineStyle: {}
    NSWritingDirection: {}
    UIAccessibilityNavigationStyle: {}
    UIAccessibilityScrollDirection: {}
    UIAccessibilityZoomType: {prefix: UIAccessibilityZoomType}
    UIActionSheetStyle: {}
    UIActivityCategory: {}
    UIActivityIndicatorViewStyle: {}
    UIAlertActionStyle: {}
    UIAlertControllerStyle: {prefix: UIAlertControllerStyle}
    UIAlertViewStyle: {}
    UIApplicationState: {}
    UIAttachmentBehaviorType: {}
    UIBackgroundFetchResult: {}
    UIBackgroundRefreshStatus: {}
    UIBarButtonItemStyle: {}
    UIBarButtonSystemItem: {}
    UIBarMetrics: {ignore: Landscape}
    UIBarPosition: {}
    UIBarStyle: {}
    UIBaselineAdjustment: {}
    UIBlurEffectStyle: {}
    UIButtonType: {}
    UICollectionElementCategory: {}
    UICollectionUpdateAction: {}
    UICollectionViewScrollDirection: {}
    UICollectionViewScrollPosition: {}
    UICollisionBehaviorMode: {}
    UIControlContentHorizontalAlignment: {}
    UIControlContentVerticalAlignment: {}
    UIControlEvents: {} # TODO: Extra values?
    UIControlState: {skip_none: true} # TODO: Extra values?
    UIDataDetectorTypes: {}
    UIDatePickerMode: {}
    UIDeviceBatteryState: {}
    UIDeviceOrientation: {}
    UIDocumentChangeKind: {}
    UIDocumentMenuOrder: {}
    UIDocumentPickerMode: {}
    UIDocumentSaveOperation: {}
    UIDocumentState: {skip_none: true}
    UIEventSubtype: {}
    UIEventType: {}
    UIFontDescriptorSymbolicTraits: {}
    UIGestureRecognizerState: {}
    UIGuidedAccessRestrictionState: {}
    UIImageOrientation: {}
    UIImagePickerControllerCameraCaptureMode: {}
    UIImagePickerControllerCameraDevice: {}
    UIImagePickerControllerCameraFlashMode: {}
    UIImagePickerControllerQualityType: {}
    UIImagePickerControllerSourceType: {}
    UIImageRenderingMode: { prefix: UIImageRenderingMode }
    UIImageResizingMode: {}
    UIInputViewStyle: {}
    UIInterfaceOrientation: {}
    UIInterfaceOrientationMask: {}
    UIInterpolatingMotionEffectType: {prefix: UIInterpolatingMotionEffectType}
    UIKeyboardAppearance: {}
    UIKeyboardType: {}
    UIKeyModifierFlags: {}
    UILayoutConstraintAxis: {}
    UILineBreakMode: {}
    UIMenuControllerArrowDirection: {}
    UIModalPresentationStyle: {}
    UIModalTransitionStyle: {}
    UINavigationControllerOperation: {}
    UIPageViewControllerNavigationDirection: {}
    UIPageViewControllerNavigationOrientation: {}
    UIPageViewControllerSpineLocation: {}
    UIPageViewControllerTransitionStyle: {}
    UIPopoverArrowDirection: {}
    UIPrintErrorCode: {first: UIPrintingNotAvailableError, suffix: Error, UIPrintingNotAvailableError: PrintingNotAvailableError}
    UIPrinterJobTypes: {skip_none: true}
    UIPrintInfoDuplex: {}
    UIPrintInfoOrientation: {}
    UIPrintInfoOutputType: {}
    UIProgressViewStyle: {}
    UIPushBehaviorMode: {}
    UIRectCorner: {}
    UIRectEdge: {}
    UIRemoteNotificationType: {}
    UIReturnKeyType: {}
    UIScreenOverscanCompensation: {}
    UIScrollViewIndicatorStyle: {}
    UIScrollViewKeyboardDismissMode: {}
    UISearchBarIcon: {}
    UISearchBarStyle: {}
    UISegmentedControlSegment: {}
    UISegmentedControlStyle: {}
    UISplitViewControllerDisplayMode: {}
    UIStatusBarAnimation: {}
    UIStatusBarStyle: {}
    UISwipeGestureRecognizerDirection: {}
    UISystemAnimation: {prefix: UISystemAnimation}
    UITabBarItemPositioning: {}
    UITabBarSystemItem: {}
    UITableViewCellAccessoryType: {}
    UITableViewCellEditingStyle: {}
    UITableViewCellSelectionStyle: {}
    UITableViewCellSeparatorStyle: {}
    UITableViewCellStateMask: {suffix: mask}
    UITableViewCellStyle: {}
    UITableViewRowActionStyle: {}
    UITableViewRowAnimation: {}
    UITableViewScrollPosition: {}
    UITableViewStyle: {}
    UITextAlignment: {}
    UITextAutocapitalizationType: {}
    UITextAutocorrectionType: {}
    UITextBorderStyle: {}
    UITextFieldViewMode: {}
    UITextGranularity: {}
    UITextLayoutDirection: {}
    UITextSpellCheckingType: {}
    UITextStorageDirection: {}
    UITextWritingDirection: {}
    UIToolbarPosition: {}
    UITouchPhase: {}
    UIUserInterfaceIdiom: {prefix: UIUserInterfaceIdiom}
    UIUserInterfaceLayoutDirection: {}
    UIUserInterfaceSizeClass: {}
    UIUserNotificationActionContext: {}
    UIUserNotificationActivationMode: {}
    UIUserNotificationType: {}
    UIViewAnimationCurve: {}
    UIViewAnimationOptions: {} #marshaler: Bits.AsMachineSizedIntMarshaler}
    UIViewAnimationTransition: {}
    UIViewAutoresizing: {} #marshaler: Bits.AsMachineSizedIntMarshaler}
    UIViewContentMode: {}
    UIViewKeyframeAnimationOptions: {}
    UIViewTintAdjustmentMode: {}
    UIWebPaginationBreakingMode: {}
    UIWebPaginationMode: {}
    UIWebViewNavigationType: {}

categories:
    CIColor: # DONE
        methods:
            '-init.*':
                name: init
                visibility: protected
                return_type: '@Pointer long'
    CIImage: # DONE
        methods:
            '-init.*':
                name: init
                visibility: protected
                return_type: '@Pointer long'
                parameters:
                    options:
                        type: CIImageOptions
    NSAttributedString: # DONE
        methods:
            '-init.*':
                name: init
                throws: NSErrorException
                visibility: protected
                return_type: '@Pointer long'
                parameters:
                    options:
                        type: NSAttributedStringDocumentAttributes
            '+attributedStringWithAttachment:':
                name: create
            '-boundingRectWithSize:options:context:':
                name: getBoundingRect
            '-dataFromRange:documentAttributes:error:':
                name: getData
                throws: NSErrorException
                parameters:
                    dict:
                        type: NSAttributedStringDocumentAttributes
            '-drawAtPoint:':
                name: draw
            '-drawInRect:':
                name: draw
            '-drawWithRect:options:context:':
                name: draw
            '-fileWrapperFromRange:documentAttributes:error:':
                name: getFileWrapper
                throws: NSErrorException
                parameters:
                    dict:
                        type: NSAttributedStringDocumentAttributes
            '-size':
                name: getSize
    NSBundle: # DONE
        methods:
            '-loadNibNamed:owner:options:':
                name: loadNib
                parameters:
                    options:
                        type: UINibLoadingOptions
    NSCoder: # DONE
        methods:
            '-(decode.*)ForKey:':
                name: '#{g[0]}'
            '-(encode.*):forKey:':
                name: '#{g[0]}'
    NSIndexPath: # DONE
        methods:
            '+indexPathForRow:inSection:':
                name: createIndexPathForRowInSection
            '+indexPathForItem:inSection:':
                name: createIndexPathForItemInSection
    NSMutableAttributedString: # DONE
        methods:
            '-fixAttributesInRange:':
                name: fixAttributesInRange
            '-readFromData:options:documentAttributes:error:':
                name: readFromData
                throws: NSErrorException
                visibility: protected
                parameters:
                    opts:
                        type: NSAttributedStringDocumentAttributes
            '-readFromFileURL:options:documentAttributes:error:':
                name: readFromFileURL
                throws: NSErrorException
                visibility: protected
                parameters:
                    opts:
                        type: NSAttributedStringDocumentAttributes
    NSString: # DONE
        owner_type: '@Pointer long'
        methods:
            '-boundingRectWithSize:options:attributes:context:':
                name: getBoundingRect
                parameters:
                    attributes:
                        type: 'NSDictionary<NSString, NSObject>'
            '-drawAtPoint:forWidth.*':
                name: draw
            '-drawAtPoint:withAttributes:':
                name: draw
                parameters:
                    attrs:
                        type: 'NSDictionary<NSString, NSObject>'
            '-drawAtPoint:withFont:':
                name: draw
            '-drawInRect:withAttributes:':
                name: draw
                parameters:
                    attrs:
                        type: 'NSDictionary<NSString, NSObject>'
            '-drawInRect:withFont:.*':
                name: draw
            '-drawWithRect:options:attributes:context:':
                name: draw
                parameters:
                    attributes:
                        type: 'NSDictionary<NSString, NSObject>'
            '-sizeWithAttributes:':
                name: getSize
                parameters:
                    attrs:
                        type: 'NSDictionary<NSString, NSObject>'
            '-sizeWithFont.*':
                name: getSize
    NSValue: # DONE
        methods:
            '-CG(.*Value)':
                name: 'get#{g[0]}'
            '-UI(.*Value)':
                name: 'get#{g[0]}'
            '+valueWith.*':
                name: create
    UIAccessibility@NSObject: {protocol: true}
    UIAccessibilityAction@NSObject: {protocol: true}
    UIAccessibilityContainer@NSObject: {protocol: true}
    UIAccessibilityFocus@NSObject: {protocol: true}
    UINibLoadingAdditions@NSObject: {protocol: true}
    UIResponderStandardEditActions@NSObject: {protocol: true}

classes:
    UIKit:
        annotations: ['@Marshaler(NSString.AsStringMarshaler.class)']

    # Custom bits
    UIAccessibilityTraits:
        visibility: 'public final'
        extends: Bits<UIAccessibilityTraits>
        annotations: ['@Marshaler(Bits.AsMachineSizedIntMarshaler.class)']

    # Structs
    UIEdgeInsets: {}
    UIOffset: {}
    
    
    UIPrintError:
        extends: NSError
        
    UIRunLoopMode:
        extends: NSRunLoopMode

    NSFileProviderExtension: # DONE
        methods:
            '-(providerIdentifier|documentStorageURL)':
                property: true
            '-URLForItemWithPersistentIdentifier:':
                name: getURLForItem
            '-persistentIdentifierForItemAtURL:':
                name: getPersistentIdentifierForItem
            '-providePlaceholderAtURL:completionHandler:':
                name: providePlaceholder
            '-startProvidingItemAtURL:completionHandler:':
                name: startProvidingItem
            '-itemChangedAtURL:':
                name: itemChanged
            '-stopProvidingItemAtURL:':
                name: stopProvidingItem
            '+writePlaceholderAtURL:withMetadata:error:':
                name: writePlaceholder
                throws: NSErrorException
                parameters:
                    metadata:
                        type: NSURLProperties
            '+placeholderURLForURL:':
                name: getPlaceholderURL
    NSLayoutConstraint: # DONE
        methods:
            '+constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:':
                name: create
                return_type: NSLayoutConstraint
            '+constraintsWithVisualFormat:options:metrics:views:':
                name: create
                return_type: NSArray<NSLayoutConstraint>
                parameters:
                    metrics:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSDictionary.AsStringNumberMapMarshaler.class) Map<String, Number>'
                    views:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSDictionary.AsStringMapMarshaler.class) Map<String, NSObjectProtocol>'
            '+activateConstraints:':
                trim_after_first_colon: true
                parameters:
                    constraints:
                        type: NSArray<NSLayoutConstraint>
            '+deactivateConstraints:':
                trim_after_first_colon: true
                parameters:
                    constraints:
                        type: NSArray<NSLayoutConstraint>
    NSLayoutManager: # DONE
        properties:
            'textContainers':
                type: NSArray<NSTextContainer>
        methods:
            '-addTextContainer:':
                trim_after_first_colon: true
            '-insertTextContainer:atIndex:':
                trim_after_first_colon: true
            '-removeTextContainerAtIndex:':
                name: removeTextContainer
            '-textContainerChangedGeometry:':
                trim_after_first_colon: true
            '-invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:':
                name: invalidateGlyphs
            '-invalidateLayoutForCharacterRange:actualCharacterRange:':
                name: invalidateLayout
            '-invalidateDisplayForCharacterRange:':
                trim_after_first_colon: true
            '-invalidateDisplayForGlyphRange:':
                trim_after_first_colon: true
            '-processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:':
                name: processEditing
            '-ensureGlyphsForCharacterRange:':
                trim_after_first_colon: true
            '-ensureGlyphsForGlyphRange:':
                trim_after_first_colon: true 
            '-ensureLayoutForCharacterRange:':
                trim_after_first_colon: true 
            '-ensureLayoutForGlyphRange:':
                trim_after_first_colon: true 
            '-ensureLayoutForTextContainer:':
                trim_after_first_colon: true 
            '-ensureLayoutForBoundingRect:inTextContainer:':
                trim_after_first_colon: true 
            '-setGlyphs:properties:characterIndexes:font:forGlyphRange:':
                trim_after_first_colon: true 
            '-glyphAtIndex:isValidIndex:':
                name: getGlyph
            '-glyphAtIndex:':
                name: getGlyph
            '-isValidGlyphIndex:':
                trim_after_first_colon: true
            '-propertyForGlyphAtIndex:':
                name: getPropertyForGlyph
            '-characterIndexForGlyphAtIndex:':
                name: getCharacterIndexForGlyph
            '-glyphIndexForCharacterAtIndex:':
                name: getGlyphIndexForCharacter
            '-getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:':
                name: getGlyphs
            '-setTextContainer:forGlyphRange:':
                trim_after_first_colon: true
            '-setLineFragmentRect:forGlyphRange:usedRect:':
                trim_after_first_colon: true
            '-setExtraLineFragmentRect:usedRect:textContainer:':
                trim_after_first_colon: true
            '-setLocation:forStartOfGlyphRange:':
                trim_after_first_colon: true
            '-setNotShownAttribute:forGlyphAtIndex:':
                trim_after_first_colon: true
            '-setDrawsOutsideLineFragment:forGlyphAtIndex:':
                trim_after_first_colon: true
            '-setAttachmentSize:forGlyphRange:':
                trim_after_first_colon: true
            '-getFirstUnlaidCharacterIndex:glyphIndex:':
                trim_after_first_colon: true
            '-firstUnlaidCharacterIndex':
                name: getFirstUnlaidCharacterIndex
            '-firstUnlaidGlyphIndex':
                name: getFirstUnlaidGlyphIndex
            '-textContainerForGlyphAtIndex:effectiveRange:':
                name: getTextContainer
            '-usedRectForTextContainer:':
                name: getUsedRectForTextContainer
            '-lineFragmentRectForGlyphAtIndex:effectiveRange:':
                name: getLineFragmentRect
            '-lineFragmentUsedRectForGlyphAtIndex:effectiveRange:':
                name: getLineFragmentUsedRect
            '-locationForGlyphAtIndex:':
                name: getLocation
            '-notShownAttributeForGlyphAtIndex:':
                name: getNotShownAttribute
            '-drawsOutsideLineFragmentForGlyphAtIndex:':
                name: getDrawsOutsideLineFragment
            '-attachmentSizeForGlyphAtIndex:':
                name: getAttachmentSize
            '-truncatedGlyphRangeInLineFragmentForGlyphAtIndex:':
                name: getTruncatedGlyphRangeInLineFragment
            '-glyphRangeForCharacterRange:actualCharacterRange:':
                name: getGlyphRangeForCharacterRange
            '-characterRangeForGlyphRange:actualGlyphRange:':
                name: getCharacterRangeForGlyphRange
            '-glyphRangeForTextContainer:':
                trim_after_first_colon: true
            '-rangeOfNominallySpacedGlyphsContainingIndex:':
                name: getRangeOfNominallySpacedGlyphsContainingIndex
            '-boundingRectForGlyphRange:inTextContainer:':
                name: getBoundingRectForGlyphRange
            '-glyphRangeForBoundingRect:inTextContainer:':
                name: getGlyphRangeForBoundingRect
            '-glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:':
                name: getGlyphRangeForBoundingRectWithoutAdditionalLayout
            '-glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:':
                name: getSlyphIndexForPoint
            '-glyphIndexForPoint:inTextContainer:':
                name: getSlyphIndexForPoint
            '-fractionOfDistanceThroughGlyphForPoint:inTextContainer:':
                name: getFractionOfDistanceThroughGlyphForPoint
            '-characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:':
                name: getCharacterIndexForPoint
            '-getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:':
                name: getLineFragmentInsertionPoints
            '-enumerateLineFragmentsForGlyphRange:usingBlock:':
                name: enumerateLineFragments
            '-enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:':
                name: enumerateEnclosingRects 
            '-drawBackgroundForGlyphRange:atPoint:':
                name: drawBackground
            '-drawGlyphsForGlyphRange:atPoint:':
                name: drawGlyphs
            '-showCGGlyphs:positions:count:font:matrix:attributes:inContext:':
                trim_after_first_colon: true
                visibility: protected
                parameters:
                    glyphs:
                        type: '@Pointer long'
            '-fillBackgroundRectArray:count:forCharacterRange:color:':
                name: fillBackground
                visibility: protected
            '-drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:':
                name: drawUnderline
            '-underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:':
                name: underline
            '-drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:':
                name: drawStrikethrough
            '-strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:':
                name: strikethrough
    NSMutableParagraphStyle: # DONE
        properties:
            'tabStops':
                type: NSArray<NSTextTab>
    NSParagraphStyle: # DONE
        properties:
            'tabStops':
                type: NSArray<NSTextTab>
        methods:
            '+defaultParagraphStyle':
                property: true
            '+defaultWritingDirectionForLanguage:':
                name: getDefaultWritingDirection

    NSShadow: # DONE
        properties:
            'shadowColor':
                type: UIColor
    NSStringDrawingContext: {} # DONE
    NSTextAttachment: # DONE
        methods:
            '-init.*':
                name: init
    NSTextContainer: # DONE
        properties:
            'exclusionPaths':
                type: NSArray<UIBezierPath>
            'widthTracksTextView':
                getter: widthTracksTextView
            'heightTracksTextView':
                getter: heightTracksTextView
        methods:
            '-init.*':
                name: init
            '-lineFragmentRectForProposedRect:atIndex:writingDirection:remainingRect:':
                name: getLineFragmentRect
    NSTextStorage: # DONE
        properties:
            'layoutManagers':
                type: NSArray<NSLayoutManager>
        methods:
            '-addLayoutManager:':
                name: addLayoutManager
            '-removeLayoutManager:':
                name: removeLayoutManager
            '-edited:range:changeInLength:':
                name: edited
            '-invalidateAttributesInRange:':
                name: invalidateAttributes
            '-ensureAttributesAreFixedInRange:':
                name: ensureAttributesAreFixed
    NSTextTab: # DONE
        properties:
            'options':
                type: NSTextTabOptions
        methods:
            '+columnTerminatorsForLocale:':
                name: getColumnTerminators
            '-initWithTextAlignment:location:options:':
                name: init
                parameters:
                    options:
                        type: NSTextTabOptions
    UIAccessibilityCustomAction: # DONE
        methods:
            '-init.*':
                name: init
    UIAccessibilityElement: # DONE
        properties:
            'isAccessibilityElement':
                name: accessibilityElement
            'accessibilityContainer':
                type: UIAccessibilityContainer
        methods:
            '-initWithAccessibilityContainer:':
                name: init
                parameters:
                    container:
                        type: UIAccessibilityContainer
    UIActionSheet: # DONE
        methods:
            '-initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:':
                exclude: true
            '-addButtonWithTitle:':
                name: addButton
            '-buttonTitleAtIndex:':
                name: getButtonTitle
            '-dismissWithClickedButtonIndex:animated:':
                name: dismiss
            '-showFromBarButtonItem:animated:':
                name: showFrom
            '-showFromRect:inView:animated:':
                name: showFrom
            '-showFromTabBar:':
                name: showFrom
            '-showFromToolbar:':
                name: showFrom
            '-showInView:':
                name: showIn
    UIActivity: # DONE
        methods:
            '+activityCategory':
                name: getActivityCategory
            '-activityDidFinish:':
                name: didFinish
            '-activityImage':
                name: getImage
            '-activityTitle':
                name: getTitle
            '-activityType':
                name: getType
            '-activityViewController':
                name: getViewController
            '-performActivity':
                name: perform
            '-canPerformWithActivityItems:':
                name: canPerform
            '-prepareWithActivityItems:':
                name: prepare
    UIActivityIndicatorView: # DONE
        methods:
            '-init.*':
                name: init
    UIActivityItemProvider: # DONE
        methods:
            '-init.*':
                name: init
            '-item':
                name: getItem
    UIActivityViewController: # DONE
        properties:
            'completionHandler':
                type: '@Block VoidBlock2<String, Boolean>'
            'excludedActivityTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            'completionWithItemsHandler':
                type: '@Block VoidBlock4<String, Boolean, NSArray<NSObject>, NSError>'
        methods:
            '-initWithActivityItems:applicationActivities:':
                name: init
                parameters:
                    applicationActivities:
                        type: NSArray<UIActivity>
    UIAlertAction: # DONE
        methods:
            '+actionWithTitle:style:handler:':
                name: create
    UIAlertController: # DONE
        properties:
            'actions':
                type: NSArray<UIAlertAction>
            'textFields':
                type: NSArray<UITextField>
        methods:
            '-addAction:':
                trim_after_first_colon: true
            '-addTextFieldWithConfigurationHandler:':
                name: addTextField
            '+alertControllerWithTitle:message:preferredStyle:':
                name: create
    UIAlertView: # DONE
        methods:
            '-addButtonWithTitle:':
                name: addButton
            '-buttonTitleAtIndex:':
                name: getButtonTitle
            '-dismissWithClickedButtonIndex:animated:':
                name: dismiss
            '-textFieldAtIndex:':
                name: getTextField
        properties:
            'delegate':
                type: UIAlertViewDelegate
    UIApplication: # DONE
        properties:
            'windows':
                type: NSArray<UIWindow>
            'scheduledLocalNotifications':
                type: NSArray<UILocalNotification>
            'applicationSupportsShakeToEdit':
                name: supportsShakeToEdit
        methods:
            '+sharedApplication':
                name: getSharedApplication
            '+registerObjectForStateRestoration:restorationIdentifier:':
                trim_after_first_colon: true
            '-beginBackgroundTaskWith.*':
                name: beginBackgroundTask
            '-enabledRemoteNotificationTypes':
                name: getEnabledRemoteNotificationTypes
            '-sendAction:to:from:forEvent:':
                trim_after_first_colon: true
            '-supportedInterfaceOrientationsForWindow:':
                name: getSupportedInterfaceOrientations
            '-setKeepAliveTimeout:handler:':
                trim_after_first_colon: true
            '-(openURL|canOpenURL|sendEvent|cancelLocalNotification|endBackgroundTask):':
                trim_after_first_colon: true
            '-(presentLocalNotificationNow|registerForRemoteNotificationTypes|scheduleLocalNotification):':
                trim_after_first_colon: true
            '-(setStatusBar(Hidden|Style|Orientation)).*':
                trim_after_first_colon: true
            '-registerUserNotificationSettings:':
                trim_after_first_colon: true
            '-currentUserNotificationSettings':
                property: true
    UIAttachmentBehavior: # DONE
        properties:
            'items':
                type: List<UIDynamicItem>
        methods:
            '-init.*':
                name: init
    UIBarButtonItem: # DONE
        properties:
            'possibleTitles':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSSet.AsStringListMarshaler.class) List<String>'
        methods:
            '-initWithImage:style:target:action:':
                name: init
            '-initWithImage:landscapeImagePhone:style:target:action:':
                name: init
            '-initWithTitle:style:target:action:':
                name: init
            '-initWithBarButtonSystemItem:target:action:':
                name: init
            '-init.*':
                name: init
            '-backButtonBackgroundImageForState:barMetrics:':
                name: getBackButtonBackgroundImage
            '-backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:':
                name: getBackButtonBackgroundVerticalPositionAdjustment
            '-backButtonTitlePositionAdjustmentForBarMetrics:':
                name: getBackButtonTitlePositionAdjustment
            '-backgroundImageForState:barMetrics:':
                name: getBackgroundImage
            '-backgroundVerticalPositionAdjustmentForBarMetrics:':
                name: getBackgroundVerticalPositionAdjustment
            '-titlePositionAdjustmentForBarMetrics:':
                name: getTitlePositionAdjustment
            '-backgroundImageForState:style:barMetrics:':
                name: getBackgroundImage
            '-setBackgroundImage:forState:barMetrics:':
                trim_after_first_colon: true
            '-setBackgroundImage:forState:style:barMetrics:':
                trim_after_first_colon: true
            '-setBackgroundVerticalPositionAdjustment:forBarMetrics:':
                trim_after_first_colon: true
            '-setTitlePositionAdjustment:forBarMetrics:':
                trim_after_first_colon: true
            '-setBackButtonBackgroundImage:forState:barMetrics:':
                trim_after_first_colon: true
            '-setBackButtonTitlePositionAdjustment:forBarMetrics:':
                trim_after_first_colon: true
            '-setBackButtonBackgroundVerticalPositionAdjustment:forBarMetrics:':
                trim_after_first_colon: true
    UIBarItem: # DONE
        protocols: [UIAppearanceContainer]
        methods:
            '-setTitleTextAttributes:forState:':
                name: setTitleTextAttributesDictionary
                parameters:
                    attributes:
                        type: 'NSDictionary<NSString, NSObject>'
            '-titleTextAttributesForState:':
                name: getTitleTextAttributesDictionary
                return_type: 'NSDictionary<NSString, NSObject>'
    UIBezierPath: # DONE
        methods:
            '+bezierPath':
                exclude: true
            '+bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:':
                name: createFromArc
            '+bezierPathWithCGPath:':
                name: createFromPath
            '+bezierPathWithOvalInRect:':
                name: createFromOval
            '+bezierPathWithRect:':
                name: createFromRect
            '+bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:':
                name: createFromRoundedRect
            '+bezierPathWithRoundedRect:cornerRadius:':
                name: createFromRoundedRect
            '-addArcWithCenter:radius:startAngle:endAngle:clockwise:':
                name: addArc
            '-addCurveToPoint:controlPoint1:controlPoint2:':
                name: addCurve
            '-addLineToPoint:':
                name: addLine
            '-addQuadCurveToPoint:controlPoint:':
                name: addQuadCurve
            '-fillWithBlendMode:alpha:':
                name: fill
            '-moveToPoint:':
                name: move
            '-strokeWithBlendMode:alpha:':
                name: stroke
            '-bezierPathByReversingPath':
                name: reverse
            '-appendPath:':
                trim_after_first_colon: true
            '-applyTransform:':
                trim_after_first_colon: true
            '-containsPoint:':
                trim_after_first_colon: true
            '-setLineDash:count:phase:':
                trim_after_first_colon: true
                visibility: protected
            '-getLineDash:count:phase:':
                trim_after_first_colon: true
                visibility: protected
    UIBlurEffect: # DONE
        methods:
            '+effectWithStyle:':
                name: create
    UIButton: # DONE
        methods:
            '+buttonWithType:':
                return_type: UIButton
                name: create
            '-backgroundImageForState:':
                name: getBackgroundImage
            '-backgroundRectForBounds:':
                name: getBackgroundRect
            '-contentRectForBounds:':
                name: getContentRect
            '-imageForState:':
                name: getImage
            '-imageRectForContentRect:':
                name: getImageRect
            '-titleColorForState:':
                name: getTitleColor
            '-titleForState:':
                name: getTitle
            '-titleShadowColorForState:':
                name: getTitleShadowColor
            '-titleRectForContentRect:':
                name: getTitleRect
            '-attributedTitleForState:':
                name: getAttributedTitle
            '-(set.*):forState:.*':
                name: '#{g[0]}'
    UICollectionReusableView: # DONE
        methods:
            '-didTransitionFromLayout:toLayout:':
                name: didTransition
            '-willTransitionFromLayout:toLayout:':
                name: willTransition
            '-applyLayoutAttributes:':
                trim_after_first_colon: true
            '-preferredLayoutAttributesFittingAttributes:':
                name: getPreferredLayoutAttributesFittingAttributes
    UICollectionView: # DONE
        methods:
            '-init.*':
                name: init
            '-cellForItemAtIndexPath:':
                name: getCellForItem
            '-deleteItemsAtIndexPaths:':
                name: deleteItems
                parameters:
                    indexPaths:
                        type: NSArray<NSIndexPath>
            '-dequeueReusableCellWithReuseIdentifier:forIndexPath:':
                name: dequeueReusableCell
                return_type: UICollectionReusableView
            '-dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:':
                name: dequeueReusableSupplementaryView
                return_type: UICollectionReusableView
                parameters:
                    elementKind:
                        type: UICollectionElementKind
            '-deselectItemAtIndexPath:animated:':
                name: deselectItem
            '-indexPathForCell:':
                name: getIndexPathForCell
            '-indexPathForItemAtPoint:':
                name: getIndexPathForItem
            '-indexPathsForSelectedItems':
                name: getIndexPathsForSelectedItems
                return_type: NSArray<NSIndexPath>
            '-indexPathsForVisibleItems':
                name: getIndexPathsForVisibleItems
                return_type: NSArray<NSIndexPath>
            '-insertItemsAtIndexPaths:':
                name: insertItems
                parameters:
                    indexPaths:
                        type: NSArray<NSIndexPath>
            '-layoutAttributesForItemAtIndexPath:':
                name: getLayoutAttributesForItem
            '-layoutAttributesForSupplementaryElementOfKind:atIndexPath:':
                name: getLayoutAttributesForSupplementaryElement
                parameters:
                    kind:
                        type: UICollectionElementKind
            '-moveItemAtIndexPath:toIndexPath:':
                name: moveItem
            '-numberOfItemsInSection:':
                name: getNumberOfItemsInSection
            '-numberOfSections':
                name: getNumberOfSections
            '-registerClass:forCellWithReuseIdentifier:':
                name: registerReusableCellClass
                parameters:
                    cellClass:
                        type: 'Class<? extends UICollectionViewCell>'
            '-registerClass:forSupplementaryViewOfKind:withReuseIdentifier:':
                name: registerReusableSupplementaryViewClass
                parameters:
                    viewClass:
                        type: 'Class<? extends UICollectionReusableView>'
                    elementKind:
                        type: UICollectionElementKind
            '-registerNib:forCellWithReuseIdentifier:':
                name: registerReusableCellNib
            '-registerNib:forSupplementaryViewOfKind:withReuseIdentifier:':
                name: registerReusableSupplementaryViewNib
                parameters:
                    kind:
                        type: UICollectionElementKind
            '-reloadItemsAtIndexPaths:':
                name: reloadItems
                parameters:
                    indexPaths:
                        type: NSArray<NSIndexPath>
            '-scrollToItemAtIndexPath:atScrollPosition:animated:':
                name: scrollToItem
            '-selectItemAtIndexPath:animated:scrollPosition:':
                name: selectItem
            '-visibleCells':
                name: getVisibleCells
                return_type: NSArray<UICollectionViewCell>
            '-setCollectionViewLayout:animated:':
                trim_after_first_colon: true
            '-setCollectionViewLayout:animated:completion:':
                trim_after_first_colon: true
            '-startInteractiveTransitionToCollectionViewLayout:completion:':
                name: startInteractiveTransition
                parameters:
                    completion:
                        type: '@Block VoidBlock2<Boolean, Boolean>'
            '-(insert|delete|reload)Sections:':
                trim_after_first_colon: true
            '-moveSection:toSection:':
                trim_after_first_colon: true
            '-performBatchUpdates:completion:':
                trim_after_first_colon: true
    UICollectionViewCell: # DONE
        methods:
            '-init.*':
                name: init
    UICollectionViewController: # DONE
        properties:
            'useLayoutToLayoutNavigationTransitions':
                name: usesLayoutToLayoutNavigationTransitions
        methods:
            '-init.*':
                name: init
    UICollectionViewFlowLayout: {} # DONE
    UICollectionViewFlowLayoutInvalidationContext: # DONE
        properties:
            'invalidateFlowLayoutDelegateMetrics':
                name: invalidatesFlowLayoutDelegateMetrics
            'invalidateFlowLayoutAttributes':
                name: invalidatesFlowLayoutAttributes
    UICollectionViewLayout: # DONE
        methods:
            '+layoutAttributesClass':
                property: true
                return_type: 'Class<? extends UICollectionViewLayoutAttributes>'
            '+invalidationContextClass':
                property: true
                return_type: 'Class<? extends UICollectionViewLayoutInvalidationContext>'
            '-collectionViewContentSize':
                name: getCollectionViewContentSize
            '-finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:':
                name: getFinalLayoutAttributesForDisappearingDecorationElement
            '-finalLayoutAttributesForDisappearingItemAtIndexPath:':
                name: getFinalLayoutAttributesForDisappearingItem
            '-finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:':
                name: getFinalLayoutAttributesForDisappearingSupplementaryElement
            '-initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:':
                name: getInitialLayoutAttributesForAppearingDecorationElement
            '-initialLayoutAttributesForAppearingItemAtIndexPath:':
                name: getInitialLayoutAttributesForAppearingItem
            '-initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:':
                name: getInitialLayoutAttributesForAppearingSupplementaryElement
            '-layoutAttributesForDecorationViewOfKind:atIndexPath:':
                name: getLayoutAttributesForDecorationView
            '-layoutAttributesForElementsInRect:':
                name: getLayoutAttributesForElements
                return_type: NSArray<UICollectionViewLayoutAttributes>
            '-layoutAttributesForItemAtIndexPath:':
                name: getLayoutAttributesForItem
            '-layoutAttributesForSupplementaryViewOfKind:atIndexPath:':
                name: getLayoutAttributesForSupplementaryView
            '-registerClass:forDecorationViewOfKind:':
                name: registerDecorationViewClass
                parameters:
                    viewClass:
                        type: 'Class<? extends UICollectionReusableView>'
            '-registerNib:forDecorationViewOfKind:':
                name: registerDecorationViewNib
            '-targetContentOffsetForProposedContentOffset:withScrollingVelocity:':
                name: getTargetContentOffset
            '-invalidateLayoutWithContext:':
                name: invalidateLayout
            '-invalidationContextForBoundsChange:':
                name: getInvalidationContextForBoundsChange
            '-shouldInvalidateLayoutForBoundsChange:':
                trim_after_first_colon: true
            '-targetContentOffsetForProposedContentOffset:':
                name: getTargetContentOffset
            '-prepareForCollectionViewUpdates:':
                trim_after_first_colon: true
                parameters:
                    updateItems:
                        type: NSArray<UICollectionViewUpdateItem>
            '-prepareForAnimatedBoundsChange:':
                trim_after_first_colon: true
            '-prepareForTransitionToLayout:':
                trim_after_first_colon: true
            '-prepareForTransitionFromLayout:':
                trim_after_first_colon: true
            '-indexPaths(To.*For.*)OfKind:':
                name: 'getIndexPaths#{g[0]}'
                return_type: NSArray<NSIndexPath>
            '-shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:':
                trim_after_first_colon: true
            '-invalidationContextForPreferredLayoutAttributes:withOriginalAttributes:':
                name: getInvalidationContextForPreferredLayoutAttributes
    UICollectionViewLayoutAttributes: # DONE
        methods:
            '+layoutAttributesForCellWithIndexPath:':
                name: createForCell
            '+layoutAttributesForDecorationViewOfKind:withIndexPath:':
                name: createForDecorationView
            '+layoutAttributesForSupplementaryViewOfKind:withIndexPath:':
                name: createForSupplementaryView
    UICollectionViewLayoutInvalidationContext: # DONE
        properties:
            'invalidated.*IndexPaths':
                type: NSArray<NSIndexPath>
            'invalidateEverything':
                name: invalidatesEverything
            'invalidateDataSourceCounts':
                name: invalidatesDataSourceCounts
        methods:
            '-invalidateItemsAtIndexPaths:':
                name: invalidateItems
                parameters:
                    indexPaths:
                        type: NSArray<NSIndexPath>
            '-invalidateSupplementaryElementsOfKind:atIndexPaths:':
                trim_after_first_colon: true
                parameters:
                    indexPaths:
                        type: NSArray<NSIndexPath>
            '-invalidateDecorationElementsOfKind:atIndexPaths:':
                trim_after_first_colon: true
                parameters:
                    indexPaths:
                        type: NSArray<NSIndexPath>
    UICollectionViewTransitionLayout: # DONE
        methods:
            '-init.*':
                name: init
            '-updateValue:forAnimatedKey:':
                trim_after_first_colon: true
            '-valueForAnimatedKey:':
                name: getValue
    UICollectionViewUpdateItem: {} # DONE
    UICollisionBehavior: # DONE
        properties:
            'items':
                type: List<UIDynamicItem>
        methods:
            '-initWithItems:':
                name: init
                parameters:
                    items:
                        type: List<UIDynamicItem>
            '-addItem:':
                trim_after_first_colon: true
            '-removeItem:':
                trim_after_first_colon: true
            '-setTranslatesReferenceBoundsIntoBoundaryWithInsets:':
                trim_after_first_colon: true
            '-addBoundaryWithIdentifier:forPath:':
                name: addBoundary
            '-addBoundaryWithIdentifier:fromPoint:toPoint:':
                name: addBoundary
            '-removeBoundaryWithIdentifier:':
                name: removeBoundary
            '-boundaryWithIdentifier:':
                name: getBoundary
    UIColor: # DONE
        methods:
            '-init.*':
                name: init
            '+(black|darkGray|lightGray|white|gray|red|green|blue|cyan|yellow|magenta|orange)Color':
                name: '#{g[0][0].downcase}#{g[0][1..-1]}'
            '+(purple|brown|clear|lightText|darkText)Color':
                name: '#{g[0][0].downcase}#{g[0][1..-1]}'
            '+(groupTableViewBackground|viewFlipsideBackground|scrollViewTexturedBackground|underPageBackground)Color':
                name: '#{g[0][0].downcase}#{g[0][1..-1]}'
            '-initWithHue:saturation:brightness:alpha:':
                exclude: true
            '-initWithPatternImage:':
                exclude: true
            '-initWithWhite:alpha:':
                exclude: true
            '+colorWithCGColor:':
                name: fromCGColor
            '+colorWithCIColor:':
                name: fromCIColor
            '+colorWithHue:saturation:brightness:alpha:':
                name: fromHSBA
            '+colorWithRed:green:blue:alpha:':
                name: fromRGBA
            '+colorWithPatternImage:':
                name: fromPatternImage
            '+colorWithWhite:alpha:':
                name: fromWhiteAlpha
            '-colorWithAlphaComponent:':
                name: addAlpha
            '-getHue:saturation:brightness:alpha:':
                name: getHSBA
                visibility: protected
            '-getRed:green:blue:alpha:':
                name: getRGBA
                visibility: protected
            '-getWhite:alpha:':
                name: getWhiteAlpha
                visibility: protected
            '-set':
                name: setFillAndStroke
    UIControl: # DONE
        methods:
            '-actionsForTarget:forControlEvent:':
                name: getActions
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-allControlEvents':
                property: true
            '-allTargets':
                property: true
            '-beginTrackingWithTouch:withEvent:':
                name: beginTracking
            '-cancelTrackingWithEvent:':
                name: cancelTracking
            '-continueTrackingWithTouch:withEvent:':
                name: continueTracking
            '-endTrackingWithTouch:withEvent:':
                name: endTracking
            '-sendActionsForControlEvents:':
                name: sendControlEventsActions
            '-addTarget:action:forControlEvents:':
                name: addTarget
            '-removeTarget:action:forControlEvents:':
                name: removeTarget
            '-sendAction:to:forEvent:':
                name: sendAction
    UIDatePicker: # DONE
        methods:
            '-setDate:animated:':
                name: setDate
    UIDevice: # DONE
        methods:
            '+currentDevice':
                property: true
    UIDictationPhrase: # DONE
        properties:
            'alternativeInterpretations':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
    UIDocument: # DONE
        methods:
            '-init.*':
                name: init
            '-savingFileType':
                name: getSavingFileType
            '-autosaveWithCompletionHandler:':
                name: autoSave
            '-closeWithCompletionHandler:':
                name: close
            '-fileAttributesToWriteToURL:forSaveOperation:error:':
                name: getFileAttributesToWrite
                return_type: NSFileAttributes
                throws: NSErrorException
            '-fileNameExtensionForType:saveOperation:':
                name: getFileNameExtension
            '-openWithCompletionHandler:':
                name: open
            '-performAsynchronousFileAccessUsingBlock:':
                name: performAsynchronousFileAccess
            '-readFromURL:error:':
                name: read
                throws: NSErrorException
            '-revertToContentsOfURL:completionHandler:':
                name: revert
            '-saveToURL:forSaveOperation:completionHandler:':
                name: save
            '-updateChangeCountWithToken:forSaveOperation:':
                name: updateChangeCount
            '-loadFromContents:ofType:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-contentsForType:error:':
                name: getContentsForType
                throws: NSErrorException
            '-updateChangeCount:':
                trim_after_first_colon: true
            '-changeCountTokenForSaveOperation:':
                name: getChangeCountToken
            '-writeContents:andAttributes:safelyToURL:forSaveOperation:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                parameters:
                    additionalFileAttributes:
                        type: NSFileAttributes
            '-writeContents:toURL:forSaveOperation:originalContentsURL:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-handleError:userInteractionPermitted:':
                trim_after_first_colon: true
            '-finishedHandlingError:recovered:':
                trim_after_first_colon: true
            '-userInteractionNoLongerPermittedForError:':
                name: userInteractionNoLongerPermitted
            '-updateUserActivityState:':
                trim_after_first_colon: true
            '-restoreUserActivityState:':
                trim_after_first_colon: true
    UIDocumentMenuViewController: # DONE
        methods:
            '-initWithDocumentTypes:inMode:':
                name: init
                parameters:
                    allowedUTIs:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-init.*':
                name: init
            '-addOptionWithTitle:image:order:handler:':
                name: addOption
    UIDocumentInteractionController: # DONE
        properties:
            'icons':
                type: NSArray<UIImage>
            'gestureRecognizers':
                type: NSArray<UIGestureRecognizer>
        methods:
            '+interactionControllerWithURL:':
                name: create
            '-dismissMenuAnimated:':
                name: dismissMenu
            '-dismissPreviewAnimated:':
                name: dismissPreview
            '-presentOpenInMenuFromBarButtonItem:animated:':
                name: presentOpenInMenu
            '-presentOpenInMenuFromRect:inView:animated:':
                name: presentOpenInMenu
            '-presentOptionsMenuFromBarButtonItem:animated:':
                name: presentOptionsMenu
            '-presentOptionsMenuFromRect:inView:animated:':
                name: presentOptionsMenu
            '-presentPreviewAnimated:':
                name: presentPreview
    UIDocumentPickerExtensionViewController: # DONE
        properties:
            'validTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
        methods:
            '-dismissGrantingAccessToURL:':
                trim_after_first_colon: true
            '-prepareForPresentationInMode:':
                name: prepareForPresentation
    UIDocumentPickerViewController: # DONE
        methods:
            '-initWithDocumentTypes:inMode:':
                name: init
                parameters:
                    allowedUTIs:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-init.*':
                name: init
    UIDynamicAnimator: # DONE
        properties:
            'behaviors':
                type: NSArray<UIDynamicBehavior>
        methods:
            '-init.*':
                name: init
            '-addBehavior:':
                trim_after_first_colon: true
            '-removeBehavior:':
                trim_after_first_colon: true
            '-updateItemUsingCurrentState:':
                trim_after_first_colon: true
            '-elapsedTime':
                property: true
            '-layoutAttributesForCellAtIndexPath:':
                name: getLayoutAttributesForCell
            '-layoutAttributesForSupplementaryViewOfKind:atIndexPath:':
                name: getLayoutAttributesForSupplementaryView
            '-layoutAttributesForDecorationViewOfKind:atIndexPath:':
                name: getLayoutAttributesForDecorationView
            '-itemsInRect:':
                name: getItemsInRect
                return_type: List<UIDynamicItem>
    UIDynamicBehavior: # DONE
        properties:
            'childBehaviors':
                type: NSArray<UIDynamicBehavior>
        methods:
            '-addChildBehavior:':
                trim_after_first_colon: true
            '-removeChildBehavior:':
                trim_after_first_colon: true
            '-willMoveToAnimator:':
                trim_after_first_colon: true
    UIDynamicItemBehavior: # DONE
        properties:
            'items':
                type: List<UIDynamicItem>
        methods:
            '-initWithItems:':
                name: init
                parameters:
                    items:
                        type: List<UIDynamicItem>
            '-addItem:':
                trim_after_first_colon: true
            '-removeItem:':
                trim_after_first_colon: true
            '-addLinearVelocity:forItem:':
                name: addLinearVelocityForItem
            '-linearVelocityForItem:':
                name: getLinearVelocityForItem
            '-addAngularVelocity:forItem:':
                name: addAngularVelocityForItem
            '-angularVelocityForItem:':
                name: getAngularVelocityForItem

    UIEvent: # DONE
        methods:
            '-allTouches':
                name: getAllTouches
                return_type: NSSet<UITouch>
            '-touchesForGestureRecognizer:':
                name: getTouches
                return_type: NSSet<UITouch>
            '-touchesForView:':
                name: getTouches
                return_type: NSSet<UITouch>
            '-touchesForWindow:':
                name: getTouches
                return_type: NSSet<UITouch>
    UIFont: # DONE
        methods:
            '+boldSystemFontOfSize:':
                name: getBoldSystemFont
            '+fontNamesForFamilyName:':
                name: getFontNamesForFamilyName
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+buttonFontSize':
                name: getButtonFontSize
            '+familyNames':
                name: getFamilyNames
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+italicSystemFontOfSize:':
                name: getItalicSystemFont
            '+labelFontSize':
                name: getLabelFontSize
            '+smallSystemFontSize':
                name: getSmallSystemFontSize
            '+systemFontOfSize:':
                name: getSystemFont
            '+systemFontOfSize:weight:':
                name: getSystemFont
            '+systemFontSize':
                name: getSystemFontSize
            '+fontWithName:size:':
                name: getFont
            '+fontWithDescriptor:size:':
                name: getFont
            '+preferredFontForTextStyle:':
                name: getPreferredFont
                visibility: protected
                parameters:
                    style:
                        type: NSString
            '-fontWithSize:':
                name: getFontWithSize
            '-fontDescriptor':
                property: true

    UIFontDescriptor: # DONE
        methods:
            '+fontDescriptorWithFontAttributes:':
                name: create
                parameters:
                    attributes:
                        type: UIFontDescriptorAttributes
            '+fontDescriptorWithName:size:':
                name: create
            '+fontDescriptorWithName:matrix:':
                name: create
            '+preferredFontDescriptorWithTextStyle:':
                name: getPreferredFontDescriptor
                visibility: protected
                parameters:
                    style:
                        type: NSString
            '-objectForKey:':
                name: getValue
                visibility: protected
                parameters:
                    anAttribute:
                        type: NSString
            '-fontAttributes':
                property: true
                return_type: UIFontDescriptorAttributes
            '-matchingFontDescriptorsWithMandatoryKeys:':
                name: getMatchingFontDescriptors
                return_type: NSArray<UIFontDescriptor>
                visibility: protected
                parameters:
                    mandatoryKeys:
                        type: NSSet<NSString>
            '-initWithFontAttributes:':
                name: init
                parameters:
                    attributes:
                        type: UIFontDescriptorAttributes
            '-fontDescriptorByAddingAttributes:':
                name: newWithAttributes
                parameters:
                    attributes:
                        type: UIFontDescriptorAttributes
            '-fontDescriptorWithSymbolicTraits:':
                name: newWithSymbolicTraits
            '-fontDescriptorWithSize:':
                name: newWithSize
            '-fontDescriptorWithMatrix:':
                name: newWithMatrix
            '-fontDescriptorWithFace:':
                name: newWithFace
            '-fontDescriptorWithFamily:':
                name: newWithFamily
    UIGestureRecognizer: # DONE
        methods:
            '-initWithTarget:action:':
                name: init
                parameters:
                    target:
                        type: NSObject
            '-locationInView:':
                name: getLocationInView
            '-locationOfTouch:inView:':
                name: getLocationOfTouch
            '-numberOfTouches':
                name: getNumberOfTouches
            '-addTarget:action:':
                trim_after_first_colon: true
            '-removeTarget:action:':
                trim_after_first_colon: true
            '-requireGestureRecognizerToFail:':
                trim_after_first_colon: true
    UIGravityBehavior: # DONE
        properties:
            'items':
                type: List<UIDynamicItem>
        methods:
            '-initWithItems:':
                name: init
                parameters:
                    items:
                        type: List<UIDynamicItem>
            '-addItem:':
                trim_after_first_colon: true
            '-removeItem:':
                trim_after_first_colon: true
            '-setAngle:magnitude:':
                trim_after_first_colon: true
    UIImage: # DONE
        protocols: [UIAccessibility, UIAccessibilityIdentification]
        properties:
            'images':
                type: NSArray<UIImage>
            'imageOrientation':
                name: orientation
        methods:
            '+animatedImageNamed:duration:':
                name: createAnimated
            '+animatedImageWithImages:duration:':
                name: createAnimated
                parameters:
                    images:
                        type: NSArray<UIImage>
            '+animatedResizableImageNamed:capInsets:duration:':
                name: createAnimatedResizable
            '+animatedResizableImageNamed:capInsets:resizingMode:duration:':
                name: createAnimatedResizable
            '+imageNamed:':
                name: create
            '+imageNamed:inBundle:compatibleWithTraitCollection:':
                name: create
            '+imageWithContentsOfFile:':
                name: createFromFile
                visibility: protected
            '+imageWithCGImage:':
                name: create
            '+imageWithCGImage:scale:orientation:':
                name: create
            '+imageWithCIImage:':
                name: create
            '+imageWithData:':
                name: create
            '+imageWithCIImage:scale:orientation:':
                name: create
            '+imageWithData:scale:':
                name: create
            '-initWithContentsOfFile:':
                name: initWithFile
                constructor: false
            '-resizableImageWithCapInsets:':
                name: createResizable
            '-resizableImageWithCapInsets:resizingMode:':
                name: createResizable
            '-imageWithAlignmentRectInsets:':
                name: create
            '-imageWithRenderingMode:':
                name: create
            '-stretchableImageWithLeftCapWidth:topCapHeight:':
                name: createStretchable
            '-drawAtPoint:':
                name: draw
            '-drawAtPoint:blendMode:alpha:':
                name: draw
            '-drawInRect:':
                name: draw
            '-drawInRect:blendMode:alpha:':
                name: draw
            '-drawAsPatternInRect:':
                name: drawAsPattern
            '-init.*':
                name: init
    UIImageAsset: # DONE
        methods:
            '-imageWithTraitCollection:':
                name: getImage
            '-registerImage:withTraitCollection:':
                trim_after_first_colon: true
            '-unregisterImageWithTraitCollection:':
                name: unregisterImage
    UIImagePickerController: # DONE
        properties:
            'delegate':
                type: UIImagePickerControllerDelegate
            'mediaTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
        methods:
            '+availableCaptureModesForCameraDevice:':
                name: getAvailableCaptureModes
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(UIImagePickerControllerCameraCaptureMode.AsListMarshaler.class) List<UIImagePickerControllerCameraCaptureMode>'
            '+availableMediaTypesForSourceType:':
                name: getAvailableMediaTypes
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+isSourceTypeAvailable:':
                trim_after_first_colon: true
            '+isCameraDeviceAvailable:':
                trim_after_first_colon: true
            '+isFlashAvailableForCameraDevice:':
                trim_after_first_colon: true
    UIImageView: # DONE
        properties:
            'animationImages':
                type: NSArray<UIImage>
            'highlightedAnimationImages':
                type: NSArray<UIImage>
        methods:
            '-init.*':
                name: init
    UIInputView: # DONE
        methods:
            '-init.*':
                name: init
    UIInputViewController: # DONE
        methods:
            '-requestSupplementaryLexiconWithCompletion:':
                name: requestSupplementaryLexicon
    UIInterpolatingMotionEffect: # DONE
        properties:
            'minimumRelativeValue':
                type: NSValue
            'maximumRelativeValue':
                type: NSValue
        methods:
            '-init.*':
                name: init
    UIKeyCommand: # DONE
        methods:
            '+keyCommandWithInput:modifierFlags:action:':
                name: create
    UILabel: # DONE
        methods:
            '-drawTextInRect:':
                name: drawText
            '-textRectForBounds:limitedToNumberOfLines:':
                name: getTextRect
    UILexicon: # DONE
        properties:
            'entries':
                type: NSArray<UILexiconEntry>
    UILexiconEntry: {} # DONE
    UILocalizedIndexedCollation: # DONE
        properties:
            'sectionTitles':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            'sectionIndexTitles':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
        methods:
            '+currentCollation':
                name: getCurrentCollation
                return_type: UILocalizedIndexedCollation
            '-sectionForObject:collationStringSelector:':
                name: getSection
            '-sectionForSectionIndexTitleAtIndex:':
                name: getSection
            '-sortedArrayFromArray:collationStringSelector:':
                name: sortArray
    UILocalNotification: # DONE
        properties:
            'regionTriggersOnce':
                getter: regionTriggersOnce
    UILongPressGestureRecognizer: {} # DONE
    UIManagedDocument: # DONE
        properties: 
            'persistentStoreOptions':
                type: NSPersistentStoreOptions
        methods:
            '+persistentStoreName':
                name: getPersistentStoreName
            '-additionalContentForURL:error:':
                name: getAdditionalContent
                throws: NSErrorException
            '-configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:':
                name: configurePersistentStoreCoordinator
                throws: NSErrorException
                parameters:
                    storeOptions:
                        type: NSPersistentStoreOptions
            '-persistentStoreTypeForFileType:':
                name: getPersistentStoreType
            '-readAdditionalContentFromURL:error:':
                name: readAdditionalContent
                throws: NSErrorException
            '-writeAdditionalContent:toURL:originalContentsURL:error:':
                name: writeAdditionalContent
                throws: NSErrorException
    UIMarkupTextPrintFormatter: # DONE
        methods:
            '-init.*':
                name: init
    UIMenuController: # DONE
        properties:
            'menuItems':
                name: menuItems0
                type: NSArray<UIMenuItem>
                visibility: private
        methods:
            '+sharedMenuController':
                name: getSharedMenuController
            '-setMenuVisible:animated:':
                trim_after_first_colon: true
            '-setTargetRect:inView:':
                trim_after_first_colon: true
    UIMenuItem: # DONE
        methods:
            '-initWithTitle:action:':
                name: init
    UIMotionEffect: # DONE
        methods:
            '-keyPathsAndRelativeValuesForViewerOffset:':
                name: getKeyPathsAndRelativeValues
                return_type: UIMotionEffectViewerOffsetValues
    UIMotionEffectGroup: # DONE
        properties:
            'motionEffects':
                type: NSArray<UIMotionEffect>
    UINavigationBar: # DONE
        properties:
            'delegate':
                type: UINavigationBarDelegate
            'items':
                type: NSArray<UINavigationItem>
            'titleTextAttributes':
                name: titleTextAttributesDictionary
                type: 'NSDictionary<NSString, NSObject>'
        methods:
            '-backgroundImageForBarMetrics:':
                name: getBackgroundImage
            '-popNavigationItemAnimated:':
                name: popNavigationItem
            '-titleVerticalPositionAdjustmentForBarMetrics:':
                name: getTitleVerticalPositionAdjustment
            '-pushNavigationItem:animated:':
                trim_after_first_colon: true
            '-setItems:animated:':
                trim_after_first_colon: true
                parameters:
                    items:
                        type: NSArray<UINavigationItem>
            '-setBackgroundImage:forBarPosition:barMetrics:':
                trim_after_first_colon: true
            '-setBackgroundImage:forBarMetrics:':
                trim_after_first_colon: true
            '-backgroundImageForBarPosition:barMetrics:':
                name: getBackgroundImage
            '-setTitleVerticalPositionAdjustment:forBarMetrics:':
                trim_after_first_colon: true
    UINavigationController: # DONE
        properties:
            'viewControllers':
                type: NSArray<UIViewController>
        methods:
            '-initWithNavigationBarClass:toolbarClass:':
                name: init
                parameters:
                    navigationBarClass:
                        type: 'Class<? extends UINavigationBar>'
                    toolbarClass:
                        type: 'Class<? extends UIToolbar>'
            '-init.*':
                name: init
            '-pushViewController:animated:':
                trim_after_first_colon: true
            '-popViewControllerAnimated:':
                name: popViewController
            '-popToViewController:animated:':
                trim_after_first_colon: true
                return_type: NSArray<UIViewController>
            '-popToRootViewControllerAnimated:':
                name: popToRootViewController
                return_type: NSArray<UIViewController>
            '-setViewControllers:animated:':
                trim_after_first_colon: true
                parameters:
                    viewControllers:
                        type: NSArray<UIViewController>
            '-setNavigationBarHidden:animated:':
                trim_after_first_colon: true
            '-setToolbarHidden:animated:':
                trim_after_first_colon: true
            '-showViewController:sender:':
                trim_after_first_colon: true
    UINavigationItem: # DONE
        properties:
            'leftBarButtonItems':
                type: NSArray<UIBarButtonItem>
            'rightBarButtonItems':
                type: NSArray<UIBarButtonItem>
            'leftItemsSupplementBackButton':
                getter: leftItemsSupplementBackButton
        methods:
            '-init.*':
                name: init
            '-setHidesBackButton:animated:':
                trim_after_first_colon: true
            '-setLeftBarButtonItems:animated:':
                trim_after_first_colon: true
                parameters:
                    items:
                        type: NSArray<UIBarButtonItem>
            '-setRightBarButtonItems:animated:':
                trim_after_first_colon: true
                parameters:
                    items:
                        type: NSArray<UIBarButtonItem>
            '-setLeftBarButtonItem:animated:':
                trim_after_first_colon: true
            '-setRightBarButtonItem:animated:':
                trim_after_first_colon: true
    UINib: # DONE
        methods:
            '+nibWithData:bundle:':
                name: create
            '+nibWithNibName:bundle:':
                name: create
            '-instantiateWithOwner:options:':
                name: instantiate
                return_type: NSArray<NSObject>
                parameters:
                    optionsOrNil:
                        type: UINibLoadingOptions
    UIPageControl: # DONE
        methods:
            '-sizeForNumberOfPages:':
                name: getSizeForNumberOfPages
    UIPageViewController: # DONE
        properties:
            'gestureRecognizers':
                type: NSArray<UIGestureRecognizer>
            'viewControllers':
                type: NSArray<UIViewController>
        methods:
            '-initWithTransitionStyle:navigationOrientation:options:':
                name: init
                parameters:
                    options:
                        type: UIPageViewControllerOptions
            '-setViewControllers:direction:animated:completion:':
                trim_after_first_colon: true
                parameters:
                    viewControllers:
                        type: NSArray<UIViewController>
    UIPanGestureRecognizer:
        methods: 
            '-translationInView:':
                name: getTranslation
            '-setTranslation:inView:':
                trim_after_first_colon: true
            '-velocityInView:':
                name: getVelocity
    UIPasteboard: # DONE
        properties:
            'items':
                name: items0
                type: 'NSArray<NSDictionary<NSString, NSObject>>'
                visibility: private
            'images':
                type: NSArray<UIImage>
            'URLs':
                type: NSArray<NSURL>
            'colors':
                type: NSArray<UIColor>
            'strings':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
        methods:
            '+generalPasteboard':
                name: getGeneralPasteboard
            '+pasteboardWithUniqueName':
                name: getUniquePasteboard
            '+pasteboardWithName:create:':
                name: getPasteboard
            '+removePasteboardWithName:':
                name: removePasteboard
            '-pasteboardTypes':
                name: getTypes
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-containsPasteboardTypes:':
                name: contains
                parameters:
                    pasteboardTypes:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-containsPasteboardTypes:inItemSet:':
                name: contains
                parameters:
                    pasteboardTypes:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-dataForPasteboardType:':
                name: getData
            '-dataForPasteboardType:inItemSet:':
                name: getData
                return_type: NSArray<NSData>
            '-itemSetWithPasteboardTypes:':
                name: getItemsWithTypes
                parameters:
                    pasteboardTypes:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-pasteboardTypesForItemSet:':
                name: getTypes0
                visibility: private
                return_type: NSArray<NSArray<NSString>>
            '-valueForPasteboardType:':
                name: getValue
            '-valuesForPasteboardType:inItemSet:':
                name: getValues
            '-setValue:forPasteboardType:':
                trim_after_first_colon: true
            '-setData:forPasteboardType:':
                trim_after_first_colon: true
            '-addItems:':
                trim_after_first_colon: true
                visibility: private
                parameters:
                    items:
                        type: 'NSArray<NSDictionary<NSString, NSObject>>'
    UIPercentDrivenInteractiveTransition: # DONE
        methods:
            '-updateInteractiveTransition:':
                trim_after_first_colon: true
    UIPickerView: # DONE
        methods:
            '-numberOfRowsInComponent:':
                name: getNumberOfRows
            '-reloadAllComponents':
                name: reloadAllComponents
            '-reloadComponent:':
                name: reloadComponent
            '-rowSizeForComponent:':
                name: getRowSize
            '-selectedRowInComponent:':
                name: getSelectedRow
            '-selectRow:inComponent:animated:':
                name: selectRow
            '-viewForRow:forComponent:':
                name: getViewForRow
    UIPinchGestureRecognizer: {} # DONE
    UIPopoverBackgroundView: # DONE
        methods:
            '+arrowBase':
                name: getArrowBase
            '+arrowHeight':
                name: getArrowHeight
            '+contentViewInsets':
                name: getContentViewInsets
    UIPopoverController: # DONE
        properties:
            'passthroughViews':
                type: NSArray<UIView>
            'popoverBackgroundViewClass':
                type: 'Class<? extends UIPopoverBackgroundView>'
        methods:
            '-init.*':
                name: init
            '-dismissPopoverAnimated:':
                name: dismiss
            '-presentPopoverFromBarButtonItem:permittedArrowDirections:animated:':
                name: presentFromBarButtonItem
            '-presentPopoverFromRect:inView:permittedArrowDirections:animated:':
                name: presentFromRectInView
            '-setContentViewController:animated:':
                trim_after_first_colon: true
            '-setPopoverContentSize:animated:':
                trim_after_first_colon: true
    UIPopoverPresentationController: # DONE
        properties:
            'delegate':
                name: popoverPresentationDelegate
            'passthroughViews':
                type: NSArray<UIView>
            'popoverBackgroundViewClass':
                type: 'Class<? extends UIPopoverBackgroundView>'
    UIPresentationController: # DONE
        methods:
            '-init.*':
                name: init
            '-(adaptivePresentationStyle|presentedView)':
                property: true
            '-adaptivePresentationStyleForTraitCollection:':
                name: getAdaptivePresentationStyleForTraitCollection
            '-frameOfPresentedViewInContainerView':
                property: true
            '-presentationTransitionDidEnd:':
                trim_after_first_colon: true
            '-dismissalTransitionDidEnd:':
                trim_after_first_colon: true
    UIPrinter: # DONE
        methods:
            '-contactPrinter:':
                trim_after_first_colon: true
            '+printerWithURL:':
                name: create
    UIPrintFormatter: # DONE
        methods:
            '-drawInRect:forPageAtIndex:':
                name: draw
            '-rectForPageAtIndex:':
                name: getRectForPage
    UIPrintInfo: # DONE
        methods:
            '+printInfo':
                name: getPrintInfo
            '+printInfoWithDictionary:':
                name: create
            '-dictionaryRepresentation':
                name: toDictionary
    UIPrintInteractionController: # DONE
        methods:
            '+canPrintData:':
                name: canPrint
            '+canPrintURL:':
                name: canPrint
            '+printableUTIs':
                name: getPrintableUTIs
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+sharedPrintController':
                name: getSharedPrintController
            '-dismissAnimated:':
                name: dismiss
            '-presentAnimated:completionHandler:':
                name: present
                parameters:
                    completion:
                        type: '@Block VoidBlock3<UIPrintInteractionController, Boolean, NSError>'
            '-presentFromRect:inView:animated:completionHandler:':
                name: presentFromRectInView
                parameters:
                    completion:
                        type: '@Block VoidBlock3<UIPrintInteractionController, Boolean, NSError>'
            '-presentFromBarButtonItem:animated:completionHandler:':
                name: presentFromBarButtonItem
                parameters:
                    completion:
                        type: '@Block VoidBlock3<UIPrintInteractionController, Boolean, NSError>'
            '-printToPrinter:completionHandler:':
                name: print
                parameters:
                    completion:
                        type: '@Block VoidBlock3<UIPrintInteractionController, Boolean, NSError>'
    UIPrintPageRenderer: # DONE
        properties:
            'printFormatters':
                type: NSArray<UIPrintFormatter>
        methods:
            '-numberOfPages':
                name: getNumberOfPages
            '-drawContentForPageAtIndex:inRect:':
                name: drawContent
            '-drawFooterForPageAtIndex:inRect:':
                name: drawFooter
            '-drawHeaderForPageAtIndex:inRect:':
                name: drawHeader
            '-drawPageAtIndex:inRect:':
                name: drawPage
            '-drawPrintFormatter:forPageAtIndex:':
                name: drawPrintFormatter
            '-printFormattersForPageAtIndex:':
                name: getPrintFormatters
                return_type: NSArray<UIPrintFormatter>
            '-addPrintFormatter:startingAtPageAtIndex:':
                trim_after_first_colon: true
            '-prepareForDrawingPages:':
                trim_after_first_colon: true
    UIPrintPaper: # DONE
        methods:
            '+bestPaperForPageSize:withPapersFromArray:':
                name: createBestForPageSize
                parameters:
                    paperList:
                        type: NSArray<UIPrintPaper>
            '-printRect':
                property: true
    UIPrinterPickerController: # DONE
        methods:
            '-presentAnimated:completionHandler:':
                trim_after_first_colon: true
                parameters:
                    completion:
                        type: '@Block VoidBlock3<UIPrinterPickerController, Boolean, NSError>'
            '-presentFromRect:inView:animated:completionHandler:':
                name: presentFromRectInView
                parameters:
                    completion:
                        type: '@Block VoidBlock3<UIPrinterPickerController, Boolean, NSError>'
            '-presentFromBarButtonItem:animated:completionHandler:':
                trim_after_first_colon: true
                parameters:
                    completion:
                        type: '@Block VoidBlock3<UIPrinterPickerController, Boolean, NSError>'
            '-dismissAnimated:':
                trim_after_first_colon: true
            '+printerPickerControllerWithInitiallySelectedPrinter:':
                name: create
    UIProgressView: # DONE
        methods:
            '-init.*':
                name: init
            '-setProgress:animated:':
                trim_after_first_colon: true
    UIPushBehavior: # DONE
        properties:
            'items':
                type: List<UIDynamicItem>
        methods:
            '-initWithItems:mode:':
                name: init
                parameters:
                    items:
                        type: List<UIDynamicItem>
            '-addItem:':
                trim_after_first_colon: true
            '-removeItem:':
                trim_after_first_colon: true
            '-targetOffsetFromCenterForItem:':
                name: getTargetOffset
            '-setTargetOffsetFromCenter:forItem:':
                name: setTargetOffset
            '-setAngle:magnitude:':
                name: setAngleAndMagnitude
    UIReferenceLibraryViewController: # DONE
        methods:
            '-init.*':
                name: init
            '+dictionaryHasDefinitionForTerm:':
                trim_after_first_colon: true
    UIRefreshControl: # DONE
        # protocols: []
        methods:
            '-init':
                exclude: true
    UIResponder: # DONE
        protocols: [UIAccessibility]
        properties:
            'keyCommands':
                type: NSArray<UIKeyCommand>
        methods:
            '-nextResponder':
                name: getNextResponder
            '-remoteControlReceivedWithEvent:':
                name: remoteControlReceived
            '-(touches.*):withEvent:':
                name: '#{g[0]}'
                parameters:
                    touches:
                        type: NSSet<UITouch>
            '-(motion.*):withEvent:':
                name: '#{g[0]}'
                parameters:
                    touches:
                        type: NSSet<UITouch>
            '+clearTextInputContextIdentifier:':
                trim_after_first_colon: true
            '-canPerformAction:withSender:':
                trim_after_first_colon: true
            '-targetForAction:withSender:':
                name: getActionTarget
            '-updateUserActivityState:':
                trim_after_first_colon: true
            '-restoreUserActivityState:':
                trim_after_first_colon: true
    UIRotationGestureRecognizer: {} # DONE
    UIScreen: # DONE
        properties:
            'availableModes':
                type: NSArray<UIScreenMode>
        methods:
            '+mainScreen':
                name: getMainScreen
            '+screens':
                name: getScreens
                return_type: NSArray<UIScreen>
            '-displayLinkWithTarget:selector:':
                name: createDisplayLink
            '-snapshotViewAfterScreenUpdates:':
                name: snapshotView
    UIScreenEdgePanGestureRecognizer: {} # DONE
    UIScreenMode: {} # DONE
    UIScrollView: # DONE
        methods:
            '-setContentOffset:animated:':
                trim_after_first_colon: true
            '-scrollRectToVisible:animated:':
                trim_after_first_colon: true
            '-touchesShouldBegin:withEvent:inContentView:':
                trim_after_first_colon: true
                parameters:
                    touches:
                        type: NSSet<UITouch>
            '-touchesShouldCancelInContentView:':
                trim_after_first_colon: true
            '-setZoomScale:animated:':
                trim_after_first_colon: true
            '-zoomToRect:animated:':
                trim_after_first_colon: true
    UISearchBar: # DONE
        properties:
            'scopeButtonTitles':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
        methods:
            '-imageForSearchBarIcon:state:':
                name: getImageForSearchBarIcon
            '-positionAdjustmentForSearchBarIcon:':
                name: getPositionAdjustmentForSearchBarIcon
            '-scopeBarButtonBackgroundImageForState:':
                name: getScopeBarButtonBackgroundImage
            '-scopeBarButtonDividerImageForLeftSegmentState:rightSegmentState:':
                name: getScopeBarButtonDividerImage
            '-scopeBarButtonTitleTextAttributesForState:':
                name: getScopeBarButtonTitleTextAttributesDictionary
                return_type: 'NSDictionary<NSString, NSObject>'
            '-searchFieldBackgroundImageForState:':
                name: getSearchFieldBackgroundImage
            '-setImage:forSearchBarIcon:state:':
                name: setImageForSearchBarIcon
            '-setPositionAdjustment:forSearchBarIcon:':
                name: setPositionAdjustmentForSearchBarIcon
            '-setShowsCancelButton:animated:':
                trim_after_first_colon: true 
            '-setBackgroundImage:forBarPosition:barMetrics:':
                trim_after_first_colon: true 
            '-backgroundImageForBarPosition:barMetrics:':
                name: getBackgroundImage
            '-setSearchFieldBackgroundImage:forState:':
                trim_after_first_colon: true 
            '-setScopeBarButtonBackgroundImage:forState:':
                trim_after_first_colon: true 
            '-setScopeBarButtonDividerImage:forLeftSegmentState:rightSegmentState:':
                trim_after_first_colon: true 
            '-setScopeBarButtonTitleTextAttributes:forState:':
                name: setScopeBarButtonTitleTextAttributesDictionary
                parameters:
                    attributes:
                        type: 'NSDictionary<NSString, NSObject>'
    UISearchController: # DONE
        methods:
            '-init.*':
                name: init
    UISearchDisplayController: # DONE
        methods:
            '-init.*':
                name: init
            '-setActive:animated:':
                name: setActive
    UISegmentedControl: # DONE
        properties:
            'segmentedControlStyle':
                name: controlStyle
            'selectedSegmentIndex':
                name: selectedSegment
        methods:
            '-init.*':
                name: init
            '-backgroundImageForState:barMetrics:':
                name: getBackgroundImage
            '-contentOffsetForSegmentAtIndex:':
                name: getContentOffset
            '-contentPositionAdjustmentForSegmentType:barMetrics:':
                name: getContentPositionAdjustment
            '-dividerImageForLeftSegmentState:rightSegmentState:barMetrics:':
                name: getDividerImage
            '-imageForSegmentAtIndex:':
                name: getImage
            '-insertSegmentWithImage:atIndex:animated:':
                name: insertSegment
            '-insertSegmentWithTitle:atIndex:animated:':
                name: insertSegment
            '-isEnabledForSegmentAtIndex:':
                name: isEnabled
            '-widthForSegmentAtIndex:':
                name: getWidth
            '-titleForSegmentAtIndex:':
                name: getTitle
            '-titleTextAttributesForState:':
                name: getTitleTextAttributesDictionary
                return_type: 'NSDictionary<NSString, NSObject>'
            '-removeSegmentAtIndex:animated:':
                name: removeSegment
            '-setTitle:forSegmentAtIndex:':
                name: setTitle
            '-setImage:forSegmentAtIndex:':
                name: setImage
            '-setWidth:forSegmentAtIndex:':
                name: setWidth
            '-setContentOffset:forSegmentAtIndex:':
                name: setContentOffset
            '-setEnabled:forSegmentAtIndex:':
                name: setEnabled
            '-setBackgroundImage:forState:barMetrics:':
                name: setBackgroundImage
            '-setDividerImage:forLeftSegmentState:rightSegmentState:barMetrics:':
                name: setDividerImage
            '-setTitleTextAttributes:forState:':
                name: setTitleTextAttributesDictionary
                parameters:
                    attributes:
                        type: 'NSDictionary<NSString, NSObject>'
            '-setContentPositionAdjustment:forSegmentType:barMetrics:':
                name: setContentPositionAdjustment
    UISimpleTextPrintFormatter: # DONE
        methods:
            '-init.*':
                name: init
    UISlider: # DONE
        methods:
            '-maximumTrackImageForState:':
                name: getMaximumTrackImage
            '-maximumValueImageRectForBounds:':
                name: getMaximumValueImageRect
            '-minimumTrackImageForState:':
                name: getMinimumTrackImage
            '-minimumValueImageRectForBounds:':
                name: getMinimumValueImageRect
            '-thumbImageForState:':
                name: getThumbImage
            '-thumbRectForBounds:trackRect:value:':
                name: getThumbRect
            '-trackRectForBounds:':
                name: getTrackRect
            '-setValue:animated:':
                trim_after_first_colon: true
            '-setThumbImage:forState:':
                trim_after_first_colon: true
            '-setMinimumTrackImage:forState:':
                trim_after_first_colon: true
            '-setMaximumTrackImage:forState:':
                trim_after_first_colon: true
    UISnapBehavior: # DONE
        methods:
            '-init.*':
                name: init
    UISplitViewController: # DONE
        properties:
            'viewControllers':
                type: NSArray<UIViewController>
        methods:
            '-displayModeButtonItem':
                property: true
            '-showViewController:sender:':
                trim_after_first_colon: true
            '-showDetailViewController:sender:':
                trim_after_first_colon: true
    UIStepper: # DONE
        methods:
            '-backgroundImageForState:':
                name: getBackgroundImage
            '-decrementImageForState:':
                name: getDecrementImage
            '-dividerImageForLeftSegmentState:rightSegmentState:':
                name: getDividerImage
                parameters:
                    0: {name: leftState}
                    1: {name: rightState}
            '-incrementImageForState:':
                name: getIncrementImage
            '-setBackgroundImage:forState:':
                name: setBackgroundImage
            '-setDividerImage:forLeftSegmentState:rightSegmentState:':
                name: setDividerImage
            '-setIncrementImage:forState:':
                name: setIncrementImage
            '-setDecrementImage:forState:':
                name: setDecrementImage
    UIStoryboard: # DONE
        methods:
            '+storyboardWithName:bundle:':
                name: create
            '-instantiateInitialViewController':
                return_type: UIViewController
            '-instantiateViewControllerWithIdentifier:':
                name: instantiateViewController
                return_type: UIViewController
    UIStoryboardPopoverSegue: {} # DONE
    UIStoryboardSegue: # DONE
        properties:
            'sourceViewController':
                type: UIViewController
            'destinationViewController':
                type: UIViewController
        methods:
            '-init.*':
                name: init
            '+segueWithIdentifier:source:destination:performHandler:':
                name: create
                return_type: UIStoryboardSegue
    UISwipeGestureRecognizer: {} # DONE
    UISwitch: # DONE
        methods:
            '-init.*':
                name: init
            '-setOn:animated:':
                trim_after_first_colon: true
    UITabBar: # DONE
        properties:
            'items':
                type: NSArray<UITabBarItem>
        methods:
            '-beginCustomizingItems:':
                name: beginCustomizing
                parameters:
                    items:
                        type: NSArray<UITabBarItem>
            '-endCustomizingAnimated:':
                name: endCustomizing
            '-setItems:animated:':
                trim_after_first_colon: true
                parameters:
                    items:
                        type: NSArray<UITabBarItem>
    UITabBarController: # DONE
        properties:
            'viewControllers':
                type: NSArray<UIViewController>
            'customizableViewControllers':
                type: NSArray<UIViewController>
        methods:
            '-setViewControllers:animated:':
                trim_after_first_colon: true
                parameters:
                    viewControllers:
                        type: NSArray<UIViewController>
    UITabBarItem: # DONE
        methods:
            '-init.*':
                name: init
            '-finishedSelectedImage':
                name: getFinishedSelectedImage
            '-finishedUnselectedImage':
                name: getFinishedUnselectedImage
            '-setFinishedSelectedImage:withFinishedUnselectedImage:':
                name: setFinishedImages
            '-titlePositionAdjustment':
                name: getTitlePositionAdjustment
    UITableView: # DONE
        methods:
            '-init.*':
                name: init
            '-cellForRowAtIndexPath:':
                name: getCellForRow
            '-deleteRowsAtIndexPaths:withRowAnimation:':
                name: deleteRows
                parameters:
                    indexPaths:
                        type: NSArray<NSIndexPath>
            '-dequeueReusableCellWithIdentifier:':
                name: dequeueReusableCell
                return_type: UITableViewCell
            '-dequeueReusableCellWithIdentifier:forIndexPath:':
                name: dequeueReusableCell
                return_type: UITableViewCell
            '-dequeueReusableHeaderFooterViewWithIdentifier:':
                name: dequeueReusableHeaderFooterView   
                return_type: UITableViewHeaderFooterView
            '-deselectRowAtIndexPath:animated:':
                name: deselectRow
            '-indexPathForCell:':
                name: getIndexPathForCell
            '-indexPathForRowAtPoint:':
                name: getIndexPathForRow
            '-indexPathForSelectedRow':
                name: getIndexPathForSelectedRow
            '-indexPathsForRowsInRect:':
                name: getIndexPathsForRowsInRect
                return_type: NSArray<NSIndexPath>
            '-indexPathsForSelectedRows':
                name: getIndexPathsForSelectedRows
                return_type: NSArray<NSIndexPath>
            '-indexPathsForVisibleRows':
                name: getIndexPathsForVisibleRows
                return_type: NSArray<NSIndexPath>
            '-insertRowsAtIndexPaths:withRowAnimation:':
                name: insertRows
                parameters:
                    indexPaths:
                        type: NSArray<NSIndexPath>
            '-moveRowAtIndexPath:toIndexPath:':
                name: moveRow
            '-numberOfRowsInSection:':
                name: getNumberOfRowsInSection
            '-numberOfSections':
                name: getNumberOfSections
            '-rectForFooterInSection:':
                name: getRectForFooterInSection
            '-rectForHeaderInSection:':
                name: getRectForHeaderInSection
            '-rectForRowAtIndexPath:':
                name: getRectForRow
            '-rectForSection:':
                name: getRectForSection
            '-registerNib:forCellReuseIdentifier:':
                name: registerReusableCellNib
            '-registerClass:forCellReuseIdentifier:':
                name: registerReusableCellClass
                parameters:
                    cellClass:
                        type: 'Class<? extends UITableViewCell>'
            '-reloadRowsAtIndexPaths:withRowAnimation:':
                name: reloadRows
                parameters:
                    indexPaths:
                        type: NSArray<NSIndexPath>
            '-scrollToNearestSelectedRowAtScrollPosition:animated:':
                name: scrollToNearestSelectedRow
            '-scrollToRowAtIndexPath:atScrollPosition:animated:':
                name: scrollToRow
            '-selectRowAtIndexPath:animated:scrollPosition:':
                name: selectRow
            '-visibleCells':
                name: getVisibleCells
                return_type: NSArray<UITableViewCell>
            '-registerClass:forHeaderFooterViewReuseIdentifier:':
                name: registerReusableHeaderFooterViewClass
                parameters:
                    aClass:
                        type: 'Class<? extends UITableViewHeaderFooterView>'
            '-registerNib:forHeaderFooterViewReuseIdentifier:':
                name: registerReusableHeaderFooterViewNib
            '-footerViewForSection:':
                name: getFooterViewForSection
            '-headerViewForSection:':
                name: getHeaderViewForSection
            '-insertSections:withRowAnimation:':
                name: insertSections
            '-deleteSections:withRowAnimation:':
                name: deleteSections
            '-reloadSections:withRowAnimation:':
                name: reloadSections
            '-moveSection:toSection:':
                name: moveSection
            '-setEditing:animated:':
                name: setEditing
    UITableViewCell: # DONE
        methods:
            '-init.*':
                name: init
            '-setSelected:animated:':
                trim_after_first_colon: true
            '-setHighlighted:animated:':
                trim_after_first_colon: true
            '-setEditing:animated:':
                trim_after_first_colon: true
            '-willTransitionToState:':
                trim_after_first_colon: true
            '-didTransitionToState:':
                trim_after_first_colon: true
    UITableViewController: # DONE
        methods:
            '-init.*':
                name: init
    UITableViewHeaderFooterView: # DONE
        methods:
            '-init.*':
                name: init
    UITableViewRowAction: # DONE
        methods:
            '+rowActionWithStyle:title:handler:':
                name: create
    UITapGestureRecognizer: {} # DONE
    UITextChecker: # DONE
        methods:
            '-rangeOfMisspelledWordInString:range:startingAt:wrap:language:':
                name: getRangeOfMisspelledWordInString
            '-guessesForWordRange:inString:language:':
                name: getGuessesForWord
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-completionsForPartialWordRange:inString:language:':
                name: getCompletionsForPartialWord
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-ignoreWord:':
                trim_after_first_colon: true
            '-ignoredWords':
                property: true
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-setIgnoredWords:':
                trim_after_first_colon: true
                parameters:
                    words:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+learnWord:':
                trim_after_first_colon: true
            '+hasLearnedWord:':
                trim_after_first_colon: true
            '+unlearnWord:':
                trim_after_first_colon: true
            '+availableLanguages':
                property: true
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
    UITextField: # DONE
        properties:
            'defaultTextAttributes':
                name: defaultTextAttributesDictionary
                type: 'NSDictionary<NSString, NSObject>'
            'typingAttributes':
                name: typingAttributesDictionary
                type: 'NSDictionary<NSString, NSObject>'
        methods:
            '-borderRectForBounds:':
                name: getBorderRect
            '-textRectForBounds:':
                name: getTextRect
            '-placeholderRectForBounds:':
                name: getPlaceholderRect
            '-editingRectForBounds:':
                name: getEditingRect
            '-clearButtonRectForBounds:':
                name: getClearButtonRect
            '-leftViewRectForBounds:':
                name: getLeftViewRect
            '-rightViewRectForBounds:':
                name: getRightViewRect
            '-drawTextInRect:':
                name: drawText
            '-drawPlaceholderInRect:':
                name: drawPlaceholder
    UITextInputMode: # DONE
        methods:
            '+activeInputModes':
                name: getActiveInputModes
                return_type: NSArray<UITextInputMode>
            '+currentInputMode':
                name: getCurrentInputMode
    UITextInputStringTokenizer: # DONE
        methods: 
            '-initWithTextInput:':
                name: init
                parameters:
                    textInput:
                        type: UITextInput
    UITextPosition: {} # DONE
    UITextRange: {} # DONE
    UITextSelectionRect: # DONE
        properties:
            'isVertical':
                name: vertical
    UITextView: # DONE
        properties:
            'linkTextAttributes':
                name: linkTextAttributesDictionary
                type: 'NSDictionary<NSString, NSObject>'
            'typingAttributes':
                name: typingAttributesDictionary
                type: 'NSDictionary<NSString, NSObject>'
        methods:
            '-init.*':
                name: init
            '-scrollRangeToVisible:':
                trim_after_first_colon: true
    UIToolbar: # DONE
        properties:
            'items':
                type: NSArray<UIBarButtonItem>
        methods:
            '-backgroundImageForToolbarPosition:barMetrics:':
                name: getBackgroundImage
            '-shadowImageForToolbarPosition:':
                name: getShadowImage
            '-setItems:animated:':
                trim_after_first_colon: true
                parameters:
                    items:
                        type: NSArray<UIBarButtonItem>
            '-setBackgroundImage:forToolbarPosition:barMetrics:':
                trim_after_first_colon: true
            '-setShadowImage:forToolbarPosition:':
                trim_after_first_colon: true
    UITouch: # DONE
        properties:
            'gestureRecognizers':
                type: NSArray<UIGestureRecognizer>
        methods:
            '-locationInView:':
                name: getLocationInView
            '-previousLocationInView:':
                name: getPreviousLocationInView
    UITraitCollection: # DONE
        methods:
            '-containsTraitsInCollection:':
                name: containsTraits
            '+traitCollectionWithTraitsFromCollections:':
                name: createWithTraits
                parameters:
                    traitCollections:
                        type: NSArray<UITraitCollection>
            '+traitCollectionWithUserInterfaceIdiom:':
                name: createWithUserInterfaceIdiom
            '+traitCollectionWithDisplayScale:':
                name: createWithDisplayScale
            '+traitCollectionWithHorizontalSizeClass:':
                name: createWithHorizontalSizeClass
            '+traitCollectionWithVerticalSizeClass:':
                name: createWithVerticalSizeClass
    UIMutableUserNotificationAction: {} # DONE
    UIMutableUserNotificationCategory: # DONE
        methods:
            '-setActions:forContext:':
                trim_after_first_colon: true
                parameters:
                    actions:
                        type: NSArray<UIUserNotificationAction>
    UIUserNotificationAction: {} # DONE
    UIUserNotificationCategory: # DONE
        methods:
            '-actionsForContext:':
                name: getActions
                return_type: NSArray<UIUserNotificationAction>
    UIUserNotificationSettings: # DONE
        properties:
            'categories':
                type: NSSet<UIUserNotificationCategory>
        methods:
            '+settingsForTypes:categories:':
                name: create
                parameters:
                    categories:
                        type: NSSet<UIUserNotificationCategory>
    UIVideoEditorController: # DONE
        properties:
            'delegate':
                type: UIVideoEditorControllerDelegate
        methods:
            '+canEditVideoAtPath:':
                name: canEditVideo
                visibility: protected
    UIVibrancyEffect: # DONE
        methods:
            '+effectForBlurEffect:':
                name: create
    UIView: # DONE
        properties:
            'subviews':
                type: NSArray<UIView>
            'gestureRecognizers':
                type: NSArray<UIGestureRecognizer>
            'motionEffects':
                type: NSArray<UIMotionEffect>
        methods:
            '-init.*':
                name: init
            '+animateWithDuration:animations:':
                name: animate
            '+animateWithDuration:animations:completion:':
                name: animate
            '+animateWithDuration:delay:options:animations:completion:':
                name: animate
            '+animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:':
                name: animate
            '+transitionFromView:toView:duration:options:completion:':
                name: transition
            '+transitionWithView:duration:options:animations:completion:':
                name: transition
            '+layerClass':
                name: getLayerClass
                return_type: 'Class<? extends CALayer>'
            '+performSystemAnimation:onViews:options:animations:completion:':
                trim_after_first_colon: true
                parameters:
                    views:
                        type: NSArray<UIView>
            '+animateKeyframesWithDuration:delay:options:animations:completion:':
                name: animateKeyframes
            '+addKeyframeWithRelativeStartTime:relativeDuration:animations:':
                name: addKeyframe
            '+beginAnimations:context:':
                trim_after_first_colon: true
            '+setAnimationTransition:forView:cache:':
                trim_after_first_colon: true
            '+performWithoutAnimation:':
                trim_after_first_colon: true
            '-convertPoint:fromView:':
                name: convertPointFromView
            '-convertPoint:toView:':
                name: convertPointToView
            '-convertRect:fromView:':
                name: convertRectFromView
            '-convertRect:toView:':
                name: convertRectToView
            '-insertSubview:aboveSubview:':
                name: insertSubviewAbove
            '-insertSubview:belowSubview:':
                name: insertSubviewBelow
            '-isDescendantOfView:':
                name: isDescendantOf
            '-drawRect:':
                name: draw
            '-exchangeSubviewAtIndex:withSubviewAtIndex:':
                name: exchangeSubview
            '-viewPrintFormatter':
                name: getViewPrintFormatter
            '-setNeedsDisplayInRect:':
                name: setNeedsDisplay
            '-viewWithTag:':
                name: getViewWithTag
            '-sizeThatFits:':
                name: getSizeThatFits
            '-sizeToFit':
                name: sizeToFit
# Renamed since it conflicts with the animationDuration property in UIImageView. 
# The static method in UIView should not be used anymore so we rename it rather than the property in UIImageView.                
            '+setAnimationDuration:':
                name: setAnimationDurationInSeconds
            '-contentCompressionResistancePriorityForAxis:':
                name: getContentCompressionResistancePriority
            '-contentHuggingPriorityForAxis:':
                name: getContentHuggingPriority
            '-alignmentRectForFrame:':
                name: getAlignmentRectForFrame
            '-alignmentRectInsets':
                name: getAlignmentRectInsets
            '-constraints':
                name: getConstraints
                return_type: NSArray<NSLayoutConstraint>
            '-constraintsAffectingLayoutForAxis:':
                name: getConstraintsAffectingLayout
                return_type: NSArray<NSLayoutConstraint>
            '-frameForAlignmentRect:':
                name: getFrameForAlignmentRect
            '-intrinsicContentSize':
                name: getIntrinsicContentSize
            '-systemLayoutSizeFittingSize:':
                name: getSystemLayoutSizeFittingSize
                parameters:
                    targetSize:
                        type: UILayoutFittingSize
            '-translatesAutoresizingMaskIntoConstraints':
                name: translatesAutoresizingMaskIntoConstraints
            '-viewForBaselineLayout':
                name: getViewForBaselineLayout
            '-hitTest:withEvent:':
                trim_after_first_colon: true
            '-pointInside:withEvent:':
                name: isPointInside
            '-insertSubview:atIndex:':
                trim_after_first_colon: true
            '-addSubview:':
                trim_after_first_colon: true
            '-bringSubviewToFront:':
                trim_after_first_colon: true
            '-sendSubviewToBack:':
                trim_after_first_colon: true
            '-didAddSubview:':
                trim_after_first_colon: true
            '-willRemoveSubview:':
                trim_after_first_colon: true
            '-willMoveToSuperview:':
                trim_after_first_colon: true
            '-willMoveToWindow:':
                trim_after_first_colon: true
            '-addGestureRecognizer:':
                trim_after_first_colon: true
            '-removeGestureRecognizer:':
                trim_after_first_colon: true
            '-gestureRecognizerShouldBegin:':
                trim_after_first_colon: true
            '-addMotionEffect:':
                trim_after_first_colon: true
            '-removeMotionEffect:':
                trim_after_first_colon: true
            '-addConstraint:':
                trim_after_first_colon: true
            '-addConstraints:':
                trim_after_first_colon: true
                parameters:
                    constraints:
                        type: NSArray<NSLayoutConstraint>
            '-removeConstraint:':
                trim_after_first_colon: true
            '-removeConstraints:':
                trim_after_first_colon: true
                parameters:
                    constraints:
                        type: NSArray<NSLayoutConstraint>
            '-setContentHuggingPriority:forAxis:':
                trim_after_first_colon: true
            '-setContentCompressionResistancePriority:forAxis:':
                trim_after_first_colon: true
            '-encodeRestorableStateWithCoder:':
                name: encodeRestorableState
            '-decodeRestorableStateWithCoder:':
                name: decodeRestorableState
            '-snapshotViewAfterScreenUpdates:':
                name: getSnapshot
            '-resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:':
                name: getResizableSnapshot
            '-drawViewHierarchyInRect:afterScreenUpdates:':
                name: drawViewHierarchy
            '-endEditing:':
                trim_after_first_colon: true
            '-drawRect:forViewPrintFormatter:':
                name: draw
            '-systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:':
                name: getSystemLayoutSizeFittingSize
    UIViewController: # DONE
        properties:
            'restorationClass':
                type: ObjCClass
            'childViewControllers':
                type: NSArray<UIViewController>
            'toolbarItems':
                type: NSArray<UIBarButtonItem>
            'modalPresentationCapturesStatusBarAppearance':
                getter: modalPresentationCapturesStatusBarAppearance
            'extendedLayoutIncludesOpaqueBars':
                getter: extendedLayoutIncludesOpaqueBars
        methods:
            '-init.*':
                name: init
            '-rotatingFooterView':
                name: getRotatingFooterView
            '-rotatingHeaderView':
                name: getRotatingHeaderView
            '-automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers':
                name: isAutomaticallyForwardAppearanceAndRotationMethodsToChildViewControllers
            '-didRotateFromInterfaceOrientation:':
                name: didRotate
            '-dismissModalViewControllerAnimated:':
                name: dismissModalViewController
            '-dismissViewControllerAnimated:completion:':
                name: dismissViewController
                parameters:
                    flag:
                        name: animated
            '-performSegueWithIdentifier:sender:':
                name: performSegue
            '-transitionFromViewController:toViewController:duration:options:animations:completion:':
                name: transition
            '-willAnimateRotationToInterfaceOrientation:duration:':
                name: willAnimateRotation
            '-willRotateToInterfaceOrientation:duration:':
                name: willRotate
            '-willMoveToParentViewController:':
                name: willMoveToParentViewController
            '-editButtonItem':
                name: getEditButtonItem
            '-decodeRestorableStateWithCoder:':
                name: decodeRestorableState
            '-encodeRestorableStateWithCoder:':
                name: encodeRestorableState
            '-preferredInterfaceOrientationForPresentation':
                name: getPreferredInterfaceOrientation
            '-segueForUnwindingToViewController:fromViewController:identifier:':
                name: getSegueForUnwinding
            '-shouldPerformSegueWithIdentifier:sender:':
                name: shouldPerformSegue
            '-supportedInterfaceOrientations':
                name: getSupportedInterfaceOrientations
                return_type: UIInterfaceOrientationMask
            '-viewControllerForUnwindSegueAction:fromViewController:withSender:':
                name: getViewControllerForUnwind
            '-addChildViewController:':
                trim_after_first_colon: true
            '-beginAppearanceTransition:animated:':
                trim_after_first_colon: true
            '-canPerformUnwindSegueAction:fromViewController:withSender:':
                name: canPerformUnwind
            '-didAnimateFirstHalfOfRotationToInterfaceOrientation:':
                name: didAnimateFirstHalfOfRotation
            '-didMoveToParentViewController:':
                trim_after_first_colon: true
            '-prepareForSegue:sender:':
                trim_after_first_colon: true
            '-presentModalViewController:animated:':
                trim_after_first_colon: true
            '-presentViewController:animated:completion:':
                trim_after_first_colon: true
                parameters:
                    flag:
                        name: animated
            '-setEditing:animated:':
                trim_after_first_colon: true
            '-setToolbarItems:animated:':
                trim_after_first_colon: true
                parameters:
                    toolbarItems:
                        type: NSArray<UIBarButtonItem>
            '-shouldAutorotateToInterfaceOrientation:':
                name: shouldAutorotate
            '-viewDidAppear:':
                trim_after_first_colon: true
            '-viewDidDisappear:':
                trim_after_first_colon: true
            '-viewWillAppear:':
                trim_after_first_colon: true
            '-viewWillDisappear:':
                trim_after_first_colon: true
            '-willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:':
                name: willAnimateFirstHalfOfRotation
            '-willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:':
                name: willAnimateSecondHalfOfRotation
            '-preferredStatusBarStyle':
                property: true
            '-preferredStatusBarUpdateAnimation':
                property: true
            '-childViewControllerForStatusBarStyle':
                property: true
            '-childViewControllerForStatusBarHidden':
                property: true
            '-transitionCoordinator':
                property: true
            '-targetViewControllerForAction:sender:':
                name: getTargetViewControllerForAction
            '-showViewController:sender:':
                trim_after_first_colon: true
            '-showDetailViewController:sender:':
                trim_after_first_colon: true
            '-setOverrideTraitCollection:forChildViewController:':
                name: setOverrideTraitCollection
            '-overrideTraitCollectionForChildViewController:':
                name: getOverrideTraitCollection
            '-collapseSecondaryViewController:forSplitViewController:':
                name: collapseSecondaryViewController
            '-separateSecondaryViewControllerForSplitViewController:':
                name: separateSecondaryViewController
    UIViewPrintFormatter: {} # DONE
    UIVisualEffect: {} # DONE
    UIVisualEffectView: # DONE
        methods:
            '-init.*':
                name: init
    UIWebView: # DONE
        methods:
            '-loadHTMLString:baseURL:':
                name: loadHTML
            '-stringByEvaluatingJavaScriptFromString:':
                name: evaluateJavaScript
            '-loadRequest:':
                trim_after_first_colon: true
            '-loadData:MIMEType:textEncodingName:baseURL:':
                trim_after_first_colon: true
    UIWindow: # DONE
        methods:
            '-convertPoint:fromWindow:':
                name: convertPointFromWindow
            '-convertPoint:toWindow:':
                name: convertPointToWindow
            '-convertRect:fromWindow:':
                name: convertRectFromWindow
            '-convertRect:toWindow:':
                name: convertRectToWindow
            '-sendEvent:':
                trim_after_first_colon: true

protocols:
    NSLayoutManagerDelegate: # DONE
        methods:
            '-layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:':
                name: shouldGenerateGlyphs
            '-layoutManager:lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:':
                name: getLineSpacingAfterGlyph
            '-layoutManager:paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:':
                name: getParagraphSpacingBeforeGlyph
            '-layoutManager:paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:':
                name: getParagraphSpacingAfterGlyph
            '-layoutManager:shouldUseAction:forControlCharacterAtIndex:':
                name: shouldUseAction
            '-layoutManager:shouldBreakLineByWordBeforeCharacterAtIndex:':
                name: shouldBreakLineByWordBeforeCharacter
            '-layoutManager:shouldBreakLineByHyphenatingBeforeCharacterAtIndex:':
                name: shouldBreakLineByHyphenatingBeforeCharacter
            '-layoutManager:boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:':
                name: getBoundingBoxForControlGlyph
            '-layoutManagerDidInvalidateLayout:':
                name: didInvalidateLayout
            '-layoutManager:didCompleteLayoutForTextContainer:atEnd:':
                name: didCompleteLayout
            '-layoutManager:textContainer:didChangeGeometryFromSize:':
                name: didChangeGeometry
    NSTextAttachmentContainer: # DONE
        methods:
            '-imageForBounds:textContainer:characterIndex:':
                name: getImageForBounds
            '-attachmentBoundsForTextContainer:proposedLineFragment:glyphPosition:characterIndex:':
                name: getAttachmentBounds
    NSTextLayoutOrientationProvider: {} # DONE
    NSTextStorageDelegate:
        methods:
            '-textStorage:willProcessEditing:range:changeInLength:':
                name: willProcessEditing
            '-textStorage:didProcessEditing:range:changeInLength:':
                name: didProcessEditing
    UIAccessibilityIdentification: {} # DONE
    UIActionSheetDelegate: # DONE
        methods:
            '-actionSheet:clickedButtonAtIndex:':
                name: clicked
            '-actionSheet:didDismissWithButtonIndex:':
                name: didDismiss
            '-actionSheet:willDismissWithButtonIndex:':
                name: willDismiss
            '-actionSheetCancel:':
                name: cancel
            '-didPresentActionSheet:':
                name: didPresent
            '-willPresentActionSheet:':
                name: willPresent
    UIActivityItemSource: # DONE
        methods:
            '-activityViewController:itemForActivityType:':
                name: getItem
            '-activityViewControllerPlaceholderItem:':
                name: getPlaceholderItem
            '-activityViewController:subjectForActivityType:':
                name: getSubject
            '-activityViewController:dataTypeIdentifierForActivityType:':
                name: getDataTypeIdentifier
            '-activityViewController:thumbnailImageForActivityType:suggestedSize:':
                name: getThumbnailImage
    UIAdaptivePresentationControllerDelegate: # DONE
        methods:
            '-adaptivePresentationStyleForPresentationController:':
                name: getAdaptivePresentationStyle
            '-adaptivePresentationStyleForPresentationController:traitCollection:':
                name: getAdaptivePresentationStyle
            '-presentationController:viewControllerForAdaptivePresentationStyle:':
                name: getViewController
            '-presentationController:willPresentWithAdaptiveStyle:transitionCoordinator:':
                name: willPresent
    UIAlertViewDelegate: # DONE
        methods:
            '-alertView:clickedButtonAtIndex:':
                name: clicked
            '-alertView:didDismissWithButtonIndex:':
                name: didDismiss
            '-alertView:willDismissWithButtonIndex:':
                name: willDismiss
            '-alertViewCancel:':
                name: cancel
            '-didPresentAlertView:':
                name: didPresent
            '-willPresentAlertView:':
                name: willPresent
            '-alertViewShouldEnableFirstOtherButton:':
                name: shouldEnableFirstOtherButton
    # UIAppearance is bound as a class with static methods rather than an interface.
    # UIAppearance: {}
    UIAppearanceContainer: # DONE
        skip_adapter: true
    UIApplicationDelegate: # DONE
        properties:
            'window':
                skip_adapter: true
        methods:
            '-application:didChangeStatusBarFrame:':
                name: didChangStatusBarFrame
            '-application:didChangeStatusBarOrientation:':
                name: didChangStatusBarOrientation
            '-application:didFailToRegisterForRemoteNotificationsWithError:':
                name: didFailToRegisterForRemoteNotifications
            '-application:didFinishLaunchingWithOptions:':
                name: didFinishLaunching
                parameters:
                    launchOptions:
                        type: UIApplicationLaunchOptions
            '-applicationDidFinishLaunching:':
                name: didFinishLaunching
            '-application:didReceiveLocalNotification:':
                name: didReceiveLocalNotification
            '-application:didReceiveRemoteNotification:':
                name: didReceiveRemoteNotification
                parameters:
                    userInfo:
                        type: UIRemoteNotification
            '-application:didRegisterForRemoteNotificationsWithDeviceToken:':
                name: didRegisterForRemoteNotifications
            '-application:handleOpenURL:':
                name: handleOpenURL
            '-application:openURL:sourceApplication:annotation:':
                name: openURL
                parameters:
                    annotation:
                        type: NSPropertyList
            '-application:willChangeStatusBarFrame:':
                name: willChangeStatusBarFrame
            '-application:willChangeStatusBarOrientation:duration:':
                name: willChangeStatusBarOrientation
            '-applicationDidBecomeActive:':
                name: didBecomeActive
            '-applicationDidEnterBackground:':
                name: didEnterBackground
            '-applicationDidReceiveMemoryWarning:':
                name: didReceiveMemoryWarning
                skip_adapter: true
            '-applicationProtectedDataDidBecomeAvailable:':
                name: protectedDataDidBecomeAvailable
            '-applicationProtectedDataWillBecomeUnavailable:':
                name: protectedDataWillBecomeUnavailable
            '-applicationSignificantTimeChange:':
                name: significantTimeChange
            '-applicationWillEnterForeground:':
                name: willEnterForeground
            '-applicationWillResignActive:':
                name: willResignActive
            '-applicationWillTerminate:':
                name: willTerminate
            '-application:shouldSaveApplicationState:':
                name: shouldSaveApplicationState
            '-application:shouldRestoreApplicationState:':
                name: shouldRestoreApplicationState
            '-application:didDecodeRestorableStateWithCoder:':
                name: didDecodeRestorableState
            '-application:supportedInterfaceOrientationsForWindow:':
                name: getSupportedInterfaceOrientations
            '-application:viewControllerWithRestorationIdentifierPath:coder:':
                name: getViewController
                parameters:
                    identifierComponents:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-application:willEncodeRestorableStateWithCoder:':
                name: willEncodeRestorableState
            '-application:willFinishLaunchingWithOptions:':
                name: willFinishLaunching
                parameters:
                    launchOptions:
                        type: UIApplicationLaunchOptions
            '-application:didReceiveRemoteNotification:fetchCompletionHandler:':
                name: didReceiveRemoteNotification
                parameters:
                    userInfo:
                        type: UIRemoteNotification
            '-application:performFetchWithCompletionHandler:':
                name: performFetch
            '-application:handleEventsForBackgroundURLSession:completionHandler:':
                name: handleEventsForBackgroundURLSession
            '-application:didRegisterUserNotificationSettings:':
                name: didRegisterUserNotificationSettings
            '-application:handleActionWithIdentifier:forLocalNotification:completionHandler:':
                name: handleLocalNotificationAction
            '-application:handleActionWithIdentifier:forRemoteNotification:completionHandler:':
                name: handleRemoteNotificationAction
                parameters:
                    userInfo:
                        type: UIRemoteNotification
            '-application:shouldAllowExtensionPointIdentifier:':
                name: shouldAllowExtensionPointIdentifier
                parameters:
                    extensionPointIdentifier:
                        type: UIApplicationExtensionPointIdentifier
            '-application:willContinueUserActivityWithType:':
                name: willContinueUserActivity
            '-application:continueUserActivity:restorationHandler:':
                name: continueUserActivity
                parameters:
                    restorationHandler:
                        type: '@Block VoidBlock1<NSArray<UIResponder>>'
            '-application:didFailToContinueUserActivityWithType:error:':
                name: didFailToContinueUserActivity
            '-application:didUpdateUserActivity:':
                name: didUpdateUserActivity
            '-application:handleWatchKitExtensionRequest:reply:':
                name: handleWatchKitExtensionRequest
                parameters:
                    reply:
                        type: '@Block VoidBlock1<NSDictionary<?, ?>>'
    UIBarPositioning: {} # DONE
    UIBarPositioningDelegate: # DONE
        methods:
            '-positionForBar:':
                name: getPosition
    UICollectionViewDataSource: # DONE
        methods:
            '-collectionView:cellForItemAtIndexPath:':
                name: getCellForItem
            '-collectionView:numberOfItemsInSection:':
                name: getNumberOfItemsInSection
            '-collectionView:viewForSupplementaryElementOfKind:atIndexPath:':
                name: getViewForSupplementaryElement
            '-numberOfSectionsInCollectionView:':
                name: getNumberOfSections
    UICollectionViewDelegate: # DONE
        methods:
            '-collectionView:canPerformAction:forItemAtIndexPath:withSender:':
                name: canPerformAction
            '-collectionView:didDeselectItemAtIndexPath:':
                name: didDeselectItem
            '-collectionView:didEndDisplayingCell:forItemAtIndexPath:':
                name: didEndDisplayingCell
            '-collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:':
                name: didEndDisplayingSupplementaryView
            '-collectionView:didHighlightItemAtIndexPath:':
                name: didHighlightItem
            '-collectionView:didSelectItemAtIndexPath:':
                name: didSelectItem
            '-collectionView:didUnhighlightItemAtIndexPath:':
                name: didUnhighlightItem
            '-collectionView:performAction:forItemAtIndexPath:withSender:':
                name: performAction
            '-collectionView:shouldDeselectItemAtIndexPath:':
                name: shouldDeselectItem
            '-collectionView:shouldHighlightItemAtIndexPath:':
                name: shouldHighlightItem
            '-collectionView:shouldSelectItemAtIndexPath:':
                name: shouldSelectItem
            '-collectionView:shouldShowMenuForItemAtIndexPath:':
                name: shouldShowMenuForItem
            '-collectionView:transitionLayoutForOldLayout:newLayout:':
                name: getTransitionLayout
            '-collectionView:willDisplayCell:forItemAtIndexPath:':
                name: willDisplayCell
            '-collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:':
                name: willDisplaySupplementaryView
    UICollectionViewDelegateFlowLayout: # DONE
        methods:
            '-collectionView:layout:insetForSectionAtIndex:':
                name: getSectionInset
            '-collectionView:layout:minimumInteritemSpacingForSectionAtIndex:':
                name: getSectionMinimumInteritemSpacing
            '-collectionView:layout:minimumLineSpacingForSectionAtIndex:':
                name: getSectionMinimumLineSpacing
            '-collectionView:layout:referenceSizeForFooterInSection:':
                name: getSectionFooterReferenceSize
            '-collectionView:layout:referenceSizeForHeaderInSection:':
                name: getSectionHeaderReferenceSize
            '-collectionView:layout:sizeForItemAtIndexPath:':
                name: getItemSize
    UICollisionBehaviorDelegate: # DONE
        methods:
            '-collisionBehavior:beganContactForItem:withItem:atPoint:':
                name: beganContact
            '-collisionBehavior:endedContactForItem:withItem:':
                name: endedContact
            '-collisionBehavior:beganContactForItem:withBoundaryIdentifier:atPoint:':
                name: beganBoundaryContact
            '-collisionBehavior:endedContactForItem:withBoundaryIdentifier:':
                name: endedBoundaryContact
    UICoordinateSpace: # DONE
        methods:
            '-convertPoint:toCoordinateSpace:':
                name: convertPointToCoordinateSpace
            '-convertPoint:fromCoordinateSpace:':
                name: convertPointFromCoordinateSpace
            '-convertRect:toCoordinateSpace:':
                name: convertRectToCoordinateSpace
            '-convertRect:fromCoordinateSpace:':
                name: convertRectFromCoordinateSpace
    UIDataSourceModelAssociation: # DONE
        methods:
            '-indexPathForElementWithModelIdentifier:inView:':
                name: getElementIndexPath
            '-modelIdentifierForElementAtIndexPath:inView:':
                name: getElementModelIdentifier
    UIDocumentInteractionControllerDelegate: # DONE
        methods:
            '-documentInteractionController:canPerformAction:':
                name: canPerformAction
            '-documentInteractionController:didEndSendingToApplication:':
                name: didEndSendingToApplication
            '-documentInteractionController:performAction:':
                name: performAction
            '-documentInteractionController:willBeginSendingToApplication:':
                name: willBeginSendingToApplication
            '-documentInteractionControllerDidDismissOpenInMenu:':
                name: didDismissOpenInMenu
            '-documentInteractionControllerDidDismissOptionsMenu:':
                name: didDismissOptionsMenu
            '-documentInteractionControllerDidEndPreview:':
                name: didEndPreview
            '-documentInteractionControllerRectForPreview:':
                name: getRectForPreview
            '-documentInteractionControllerViewControllerForPreview:':
                name: getViewControllerForPreview
            '-documentInteractionControllerViewForPreview:':
                name: getViewForPreview
            '-documentInteractionControllerWillBeginPreview:':
                name: willBeginPreview
            '-documentInteractionControllerWillPresentOpenInMenu:':
                name: willPresentOpenInMenu
            '-documentInteractionControllerWillPresentOptionsMenu:':
                name: willPresentOptionsMenu
    UIDocumentMenuDelegate: # DONE
        methods:
            '-documentMenu:didPickDocumentPicker:':
                name: didPickDocumentPicker
            '-documentMenuWasCancelled:':
                name: wasCancelled
    UIDocumentPickerDelegate: # DONE
        methods:
            '-documentPicker:didPickDocumentAtURL:':
                name: didPickDocument
            '-documentPickerWasCancelled:':
                name: wasCancelled
    UIDynamicAnimatorDelegate: # DONE
        methods:
            '-dynamicAnimatorWillResume:':
                name: willResume
            '-dynamicAnimatorDidPause:':
                name: didPause
    UIDynamicItem: {} # DONE
    UIGestureRecognizerDelegate: # DONE
        methods:
            '-gestureRecognizer:shouldReceiveTouch:':
                name: shouldReceiveTouch
            '-gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:':
                name: shouldRecognizeSimultaneously
            '-gestureRecognizerShouldBegin:':
                name: shouldBegin
            '-gestureRecognizer:shouldRequireFailureOfGestureRecognizer:':
                name: shouldRequireFailure
            '-gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:':
                name: shouldBeRequiredToFail
    UIGuidedAccessRestrictionDelegate: # DONE
        methods:
            '-guidedAccessRestrictionIdentifiers':
                name: getIdentifiers
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-guidedAccessRestrictionWithIdentifier:didChangeState:':
                name: didChangeState
            '-textForGuidedAccessRestrictionWithIdentifier:':
                name: getText
            '-detailTextForGuidedAccessRestrictionWithIdentifier:':
                name: getDetailText
    UIImagePickerControllerDelegate: # DONE
        protocols: [UINavigationControllerDelegate]
        methods:
            '-imagePickerController:didFinishPickingMediaWithInfo:':
                name: didFinishPickingMedia
                parameters:
                    info:
                        type: UIImagePickerControllerEditingInfo
            '-imagePickerControllerDidCancel:':
                name: didCancel
            '-imagePickerController:didFinishPickingImage:editingInfo:':
                name: didFinishPickingImage
                parameters:
                    editingInfo:
                        type: UIImagePickerControllerEditingInfo
    UIKeyInput: # DONE
        methods:
            '-insertText:':
                name: insertText
    UILayoutSupport: {} # DONE
    UINavigationBarDelegate: # DONE
        methods:
            '-navigationBar:didPopItem:':
                name: didPopItem
            '-navigationBar:didPushItem:':
                name: didPushItem
            '-navigationBar:shouldPopItem:':
                name: shouldPopItem
            '-navigationBar:shouldPushItem:':
                name: shouldPushItem
    UINavigationControllerDelegate: # DONE
        methods:
            '-navigationController:didShowViewController:animated:':
                name: didShowViewController
            '-navigationController:willShowViewController:animated:':
                name: willShowViewController
            '-navigationControllerSupportedInterfaceOrientations:':
                name: getSupportedInterfaceOrientations
                return_type: UIInterfaceOrientationMask
            '-navigationControllerPreferredInterfaceOrientationForPresentation:':
                name: getPreferredInterfaceOrientation
            '-navigationController:interactionControllerForAnimationController:':
                name: getInteractionController
            '-navigationController:animationControllerForOperation:fromViewController:toViewController:':
                name: getAnimationController
# Has a single static mehtod
#    UIObjectRestoration: {}
    UIPageViewControllerDataSource: # DONE
        methods:
            '-pageViewController:viewControllerAfterViewController:':
                name: getViewControllerAfter
            '-pageViewController:viewControllerBeforeViewController:':
                name: getViewControllerBefore
            '-presentationCountForPageViewController:':
                name: getPresentationCount
            '-presentationIndexForPageViewController:':
                name: getPresentationIndex
    UIPageViewControllerDelegate: # DONE
        methods:
            '-pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:':
                name: didFinishAnimating
                parameters:
                    previousViewControllers:
                        type: NSArray<UIViewController>
            '-pageViewController:spineLocationForInterfaceOrientation:':
                name: getSpineLocation
            '-pageViewController:willTransitionToViewControllers:':
                name: willTransition
                parameters:
                    pendingViewControllers:
                        type: NSArray<UIViewController>
            '-pageViewControllerSupportedInterfaceOrientations:':
                name: getSupportedInterfaceOrientations
                return_type: UIInterfaceOrientationMask
            '-pageViewControllerPreferredInterfaceOrientationForPresentation:':
                name: getPreferredInterfaceOrientation
    UIPickerViewAccessibilityDelegate: # DONE
        methods:
            '-pickerView:accessibilityHintForComponent:':
                name: getAccessibilityHint
            '-pickerView:accessibilityLabelForComponent:':
                name: getAccessibilityLabel
    UIPickerViewDataSource: # DONE
        methods:
            '-numberOfComponentsInPickerView:':
                name: getNumberOfComponents
            '-pickerView:numberOfRowsInComponent:':
                name: getNumberOfRows
    UIPickerViewDelegate: # DONE
        methods:
            '-pickerView:didSelectRow:inComponent:':
                name: didSelectRow
            '-pickerView:rowHeightForComponent:':
                name: getRowHeight
            '-pickerView:titleForRow:forComponent:':
                name: getRowTitle
            '-pickerView:viewForRow:forComponent:reusingView:':
                name: getRowView
            '-pickerView:widthForComponent:':
                name: getComponentWidth
            '-pickerView:attributedTitleForRow:forComponent:':
                name: getAttributedRowTitle
    UIPopoverControllerDelegate: # DONE
        methods:
            '-popoverControllerDidDismissPopover:':
                name: didDismiss
            '-popoverControllerShouldDismissPopover:':
                name: shouldDismiss
            '-popoverController:willRepositionPopoverToRect:inView:':
                name: willReposition
    UIPopoverPresentationControllerDelegate: # DONE
        methods:
            '-prepareForPopoverPresentation:':
                trim_after_first_colon: true
            '-popoverPresentationControllerShouldDismissPopover:':
                name: shouldDismissPopover
            '-popoverPresentationControllerDidDismissPopover:':
                name: didDismissPopover
            '-popoverPresentationController:willRepositionPopoverToRect:inView:':
                name: willRepositionPopover
    UIPrintInteractionControllerDelegate: # DONE
        methods:
            '-printInteractionController:choosePaper:':
                name: choosePaper
                parameters:
                    paperList:
                        type: NSArray<UIPrintPaper>
            '-printInteractionControllerDidDismissPrinterOptions:':
                name: didDismissPrinterOptions
            '-printInteractionControllerDidFinishJob:':
                name: didFinishJob
            '-printInteractionControllerDidPresentPrinterOptions:':
                name: didPresentPrinterOptions
            '-printInteractionControllerParentViewController:':
                name: getParentViewController
            '-printInteractionControllerWillDismissPrinterOptions:':
                name: willDismissPrinterOptions
            '-printInteractionControllerWillPresentPrinterOptions:':
                name: willPresentPrinterOptions
            '-printInteractionControllerWillStartJob:':
                name: willStartJob
            '-printInteractionController:cutLengthForPaper:':
                name: getCutLength
    UIPrinterPickerControllerDelegate: # DONE
        methods:
            '-printerPickerControllerParentViewController:':
                name: getParentViewController
            '-printerPickerController:shouldShowPrinter:':
                name: shouldShowPrinter
            '-printerPickerControllerWillPresent:':
                name: willPresent
            '-printerPickerControllerDidPresent:':
                name: didPresent
            '-printerPickerControllerWillDismiss:':
                name: willDismiss
            '-printerPickerControllerDidDismiss:':
                name: didDismiss
            '-printerPickerControllerDidSelectPrinter:':
                name: didSelectPrinter
    UIScrollViewDelegate: # DONE
        methods:
            '-scrollViewDidEndDecelerating:':
                name: didEndDecelerating
            '-scrollViewDidEndDragging:willDecelerate:':
                name: didEndDragging
            '-scrollViewDidEndScrollingAnimation:':
                name: didEndScrollingAnimation
            '-scrollViewDidEndZooming:withView:atScale:':
                name: didEndZooming
            '-scrollViewDidScroll:':
                name: didScroll
            '-scrollViewDidScrollToTop:':
                name: didScrollToTop
            '-scrollViewDidZoom:':
                name: didZoom
            '-scrollViewShouldScrollToTop:':
                name: shouldScrollToTop
            '-scrollViewWillBeginDecelerating:':
                name: willBeginDecelerating
            '-scrollViewWillBeginDragging:':
                name: willBeginDragging
            '-scrollViewWillBeginZooming:withView:':
                name: willBeginZooming
            '-scrollViewWillEndDragging:withVelocity:targetContentOffset:':
                name: willEndDragging
            '-viewForZoomingInScrollView:':
                name: getViewForZooming
    UISearchBarDelegate: # DONE
        methods:
            '-searchBar:selectedScopeButtonIndexDidChange:':
                name: selectedScopeButtonIndexDidChange
            '-searchBar:shouldChangeTextInRange:replacementText:':
                name: shouldChange
            '-searchBar:textDidChange:':
                name: didChange
            '-searchBarBookmarkButtonClicked:':
                name: bookmarkButtonClicked
            '-searchBarCancelButtonClicked:':
                name: cancelButtonClicked
            '-searchBarResultsListButtonClicked:':
                name: resultsListButtonClicked
            '-searchBarSearchButtonClicked:':
                name: searchButtonClicked
            '-searchBarShouldBeginEditing:':
                name: shouldBeginEditing
            '-searchBarShouldEndEditing:':
                name: shouldEndEditing
            '-searchBarTextDidBeginEditing:':
                name: didBeginEditing
            '-searchBarTextDidEndEditing:':
                name: didEndEditing
    UISearchControllerDelegate: # DONE
        methods:
            '-willPresentSearchController:':
                name: willPresent
            '-didPresentSearchController:':
                name: didPresent
            '-willDismissSearchController:':
                name: willDismiss
            '-didDismissSearchController:':
                name: didDismiss
            '-presentSearchController:':
                name: present
    UISearchDisplayDelegate: # DONE
        methods:
            '-searchDisplayController:didHideSearchResultsTableView:':
                name: didHideSearchResults
            '-searchDisplayController:didLoadSearchResultsTableView:':
                name: didLoadSearchResults
            '-searchDisplayController:didShowSearchResultsTableView:':
                name: didShowSearchResults
            '-searchDisplayController:shouldReloadTableForSearchScope:':
                name: shouldReloadForSearchScope
            '-searchDisplayController:shouldReloadTableForSearchString:':
                name: shouldReloadForSearchString
            '-searchDisplayController:willHideSearchResultsTableView:':
                name: willHideSearchResults
            '-searchDisplayController:willUnloadSearchResultsTableView:':
                name: willUnloadSearchResults
            '-searchDisplayController:willShowSearchResultsTableView:':
                name: willShowSearchResults
            '-searchDisplayControllerDidBeginSearch:':
                name: didBeginSearch
            '-searchDisplayControllerDidEndSearch:':
                name: didEndSearch
            '-searchDisplayControllerWillBeginSearch:':
                name: willBeginSearch
            '-searchDisplayControllerWillEndSearch:':
                name: willEndSearch
    UISearchResultsUpdating: # DONE
        methods:
            '-updateSearchResultsForSearchController:':
                name: updateSearchResults
    UISplitViewControllerDelegate: # DONE
        methods:
            '-splitViewController:popoverController:willPresentViewController:':
                name: willPresentViewController
            '-splitViewController:shouldHideViewController:inOrientation:':
                name: shouldHideViewController
            '-splitViewController:willHideViewController:withBarButtonItem:forPopoverController:':
                name: willHideViewController
            '-splitViewController:willShowViewController:invalidatingBarButtonItem:':
                name: willShowViewController
            '-splitViewControllerSupportedInterfaceOrientations:':
                name: getSupportedInterfaceOrientations
            '-splitViewControllerPreferredInterfaceOrientationForPresentation:':
                name: getPreferredInterfaceOrientation
            '-splitViewController:willChangeToDisplayMode:':
                name: willChangeToDisplayMode
            '-targetDisplayModeForActionInSplitViewController:':
                name: getTargetDisplayMode
            '-splitViewController:showViewController:sender:':
                name: showViewController
            '-splitViewController:showDetailViewController:sender:':
                name: showDetailViewController
            '-primaryViewControllerForCollapsingSplitViewController:':
                name: getPrimaryViewControllerForCollapsing
            '-primaryViewControllerForExpandingSplitViewController:':
                name: getPrimaryViewControllerForExpanding
            '-splitViewController:collapseSecondaryViewController:ontoPrimaryViewController:':
                name: collapseSecondaryViewController
            '-splitViewController:separateSecondaryViewControllerFromPrimaryViewController:':
                name: separateSecondaryViewController
    UIStateRestoring: # DONE
        methods:
            '-decodeRestorableStateWithCoder:':
                name: decodeRestorableState
            '-encodeRestorableStateWithCoder:':
                name: encodeRestorableState
    UITabBarControllerDelegate: # DONE
        methods:
            '-tabBarController:didEndCustomizingViewControllers:changed:':
                name: didEndCustomizingViewControllers
                parameters:
                    viewControllers:
                        type: NSArray<UIViewController>
            '-tabBarController:didSelectViewController:':
                name: didSelectViewController
            '-tabBarController:shouldSelectViewController:':
                name: shouldSelectViewController
            '-tabBarController:willBeginCustomizingViewControllers:':
                name: willBeginCustomizingViewControllers
                parameters:
                    viewControllers:
                        type: NSArray<UIViewController>
            '-tabBarController:willEndCustomizingViewControllers:changed:':
                name: willEndCustomizingViewControllers
                parameters:
                    viewControllers:
                        type: NSArray<UIViewController>
            '-tabBarControllerSupportedInterfaceOrientations:':
                name: getSupportedInterfaceOrientations
                return_type: UIInterfaceOrientation
            '-tabBarControllerPreferredInterfaceOrientationForPresentation:':
                name: getPreferredInterfaceOrientation
            '-tabBarController:interactionControllerForAnimationController:':
                name: getInteractionController
            '-tabBarController:animationControllerForTransitionFromViewController:toViewController:':
                name: getAnimationController
    UITabBarDelegate: # DONE
        methods:
            '-tabBar:didBeginCustomizingItems:':
                name: didBeginCustomizingItems
                parameters:
                    items:
                        type: NSArray<UITabBarItem>
            '-tabBar:didEndCustomizingItems:changed:':
                name: didEndCustomizingItems
                parameters:
                    items:
                        type: NSArray<UITabBarItem>
            '-tabBar:didSelectItem:':
                name: didSelectItem
            '-tabBar:willBeginCustomizingItems:':
                name: willBeginCustomizingItems
                parameters:
                    items:
                        type: NSArray<UITabBarItem>
            '-tabBar:willEndCustomizingItems:changed:':
                name: willEndCustomizingItems
                parameters:
                    items:
                        type: NSArray<UITabBarItem>
    UITableViewDataSource: # DONE
        methods:
            '-numberOfSectionsInTableView:':
                name: getNumberOfSections
            '-sectionIndexTitlesForTableView:':
                name: getSectionIndexTitles
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-tableView:commitEditingStyle:forRowAtIndexPath:':
                name: commitEditingStyleForRow
            '-tableView:canMoveRowAtIndexPath:':
                name: canMoveRow
            '-tableView:cellForRowAtIndexPath:':
                name: getCellForRow
            '-tableView:canEditRowAtIndexPath:':
                name: canEditRow
            '-tableView:moveRowAtIndexPath:toIndexPath:':
                name: moveRow
            '-tableView:numberOfRowsInSection:':
                name: getNumberOfRowsInSection
            '-tableView:sectionForSectionIndexTitle:atIndex:':
                name: getSectionForSectionIndexTitle
            '-tableView:titleForFooterInSection:':
                name: getTitleForFooter
            '-tableView:titleForHeaderInSection:':
                name: getTitleForHeader
    UITableViewDelegate: # DONE
        methods:
            '-tableView:accessoryButtonTappedForRowWithIndexPath:':
                name: accessoryButtonTapped
            '-tableView:canPerformAction:forRowAtIndexPath:withSender:':
                name: canPerformAction
            '-tableView:didDeselectRowAtIndexPath:':
                name: didDeselectRow
            '-tableView:didEndEditingRowAtIndexPath:':
                name: didEndEditingRow
            '-tableView:didSelectRowAtIndexPath:':
                name: didSelectRow
            '-tableView:editingStyleForRowAtIndexPath:':
                name: getEditingStyleForRow
            '-tableView:heightForFooterInSection:':
                name: getHeightForFooter
            '-tableView:heightForHeaderInSection:':
                name: getHeightForHeader
            '-tableView:heightForRowAtIndexPath:':
                name: getHeightForRow
            '-tableView:indentationLevelForRowAtIndexPath:':
                name: getIndentationLevelForRow
            '-tableView:performAction:forRowAtIndexPath:withSender:':
                name: performActionForRow
            '-tableView:shouldIndentWhileEditingRowAtIndexPath:':
                name: shouldIndentWhileEditingRow
            '-tableView:shouldShowMenuForRowAtIndexPath:':
                name: shouldShowMenuForRow
            '-tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:':
                name: getTargetForMove
            '-tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:':
                name: getTitleForDeleteConfirmationButton
            '-tableView:viewForFooterInSection:':
                name: getViewForFooter
            '-tableView:viewForHeaderInSection:':
                name: getViewForHeader
            '-tableView:willBeginEditingRowAtIndexPath:':
                name: willBeginEditingRow
            '-tableView:willDeselectRowAtIndexPath:':
                name: willDeselectRow
            '-tableView:willDisplayCell:forRowAtIndexPath:':
                name: willDisplayCell
            '-tableView:willSelectRowAtIndexPath:':
                name: willSelectRow
            '-tableView:didUnhighlightRowAtIndexPath:':
                name: didUnhighlightRow
            '-tableView:didEndDisplayingFooterView:forSection:':
                name: didEndDisplayingFooterView
            '-tableView:shouldHighlightRowAtIndexPath:':
                name: shouldHighlightRow
            '-tableView:didEndDisplayingCell:forRowAtIndexPath:':
                name: didEndDisplayingCell
            '-tableView:didEndDisplayingHeaderView:forSection:':
                name: didEndDisplayingHeaderView
            '-tableView:didHighlightRowAtIndexPath:':
                name: didHighlightRow
            '-tableView:willDisplayFooterView:forSection:':
                name: willDisplayFooterView
            '-tableView:willDisplayHeaderView:forSection:':
                name: willDisplayHeaderView
            '-tableView:estimatedHeightForRowAtIndexPath:':
                name: getEstimatedHeightForRow
            '-tableView:estimatedHeightForHeaderInSection:':
                name: getEstimatedHeightForHeader
            '-tableView:estimatedHeightForFooterInSection:':
                name: getEstimatedHeightForFooter
            '-tableView:accessoryTypeForRowWithIndexPath:':
                name: getAccessoryTypeForRow
            '-tableView:editActionsForRowAtIndexPath:':
                name: getEditActionsForRow
                return_type: NSArray<UITableViewRowAction>
    UITextDocumentProxy: # DONE
        methods:
            '-adjustTextPositionByCharacterOffset:':
                name: adjustTextPosition
    UITextFieldDelegate: # DONE
        methods:
            '-textField:shouldChangeCharactersInRange:replacementString:':
                name: shouldChangeCharacters
                default: true
            '-textFieldDidBeginEditing:':
                name: didBeginEditing
            '-textFieldDidEndEditing:':
                name: didEndEditing
            '-textFieldShouldBeginEditing:':
                name: shouldBeginEditing
                default: true
            '-textFieldShouldClear:':
                name: shouldClear
                default: true
            '-textFieldShouldEndEditing:':
                name: shouldEndEditing
                default: true
            '-textFieldShouldReturn:':
                name: shouldReturn
                default: true
    UITextInput: # DONE
        properties:
            'markedTextStyle':
                type: UITextInputTextStyle
        methods:
            '-baseWritingDirectionForPosition:inDirection:':
                name: getBaseWritingDirection
            '-caretRectForPosition:':
                name: getCaretRect
            '-characterOffsetOfPosition:withinRange:':
                name: getCharacterOffset
            '-characterRangeAtPoint:':
                name: getCharacterRange
            '-characterRangeByExtendingPosition:inDirection:':
                name: getCharacterRange
            '-closestPositionToPoint:':
                name: getClosestPosition
            '-closestPositionToPoint:withinRange:':
                name: getClosestPosition
            '-comparePosition:toPosition:':
                name: comparePositions
            '-firstRectForRange:':
                name: getFirstRect
            '-offsetFromPosition:toPosition:':
                name: getOffset
            '-positionFromPosition:offset:':
                name: getPosition
            '-positionFromPosition:inDirection:offset:':
                name: getPosition
            '-positionWithinRange:farthestInDirection:':
                name: getPosition
            '-positionWithinRange:atCharacterOffset:':
                name: getPosition
            '-replaceRange:withText:':
                name: replaceText
            '-textInRange:':
                name: getText
            '-textRangeFromPosition:toPosition:':
                name: getTextRange
            '-textStylingAtPosition:inDirection:':
                name: getTextStyling
                return_type: UITextInputTextStyle
            '-frameForDictationResultPlaceholder:':
                name: getDictationResultPlaceholderFrame
            '-selectionRectsForRange:':
                name: getSelectionRects
                return_type: NSArray<UITextSelectionRect>
            '-shouldChangeTextInRange:replacementText:':
                name: shouldChangeText
            '-setMarkedText:selectedRange:':
                name: setMarkedText
            '-setBaseWritingDirection:forRange:':
                name: setBaseWritingDirection
            '-insertDictationResultPlaceholder':
                property: true
            '-insertDictationResult:':
                name: insertDictationResult
                parameters:
                    dictationResult:
                        type: NSArray<UIDictationPhrase>
            '-removeDictationResultPlaceholder:willInsertResult:':
                name: removeDictationResultPlaceholder
    UITextInputDelegate: # DONE
        methods:
            '-selectionWillChange:':
                name: selectionWillChange
            '-selectionDidChange:':
                name: selectionDidChange
            '-textWillChange:':
                name: textWillChange
            '-textDidChange:':
                name: textDidChange
    UITextInputTokenizer: # DONE
        methods:
            '-positionFromPosition:toBoundary:inDirection:':
                name: getPosition
                parameters:
                    direction:
                        type: UITextDirection
            '-rangeEnclosingPosition:withGranularity:inDirection:':
                name: getRangeEnclosingPosition
                parameters:
                    direction:
                        type: UITextDirection
            '-isPosition:atBoundary:inDirection:':
                name: isPositionAtBoundary
                parameters:
                    direction:
                        type: UITextDirection
            '-isPosition:withinTextUnit:inDirection:':
                name: isPositionWithinTextUnit
                parameters:
                    direction:
                        type: UITextDirection
    UITextInputTraits: {} # DONE
    UITextViewDelegate: # DONE
        methods:
            '-textView:shouldChangeTextInRange:replacementText:':
                name: shouldChangeCharacters
            '-textViewDidBeginEditing:':
                name: didBeginEditing
            '-textViewDidChange:':
                name: didChange
            '-textViewDidChangeSelection:':
                name: didChangeSelection
            '-textViewDidEndEditing:':
                name: didEndEditing
            '-textViewShouldBeginEditing:':
                name: shouldBeginEditing
            '-textViewShouldEndEditing:':
                name: shouldEndEditing
            '-textView:shouldInteractWithURL:inRange:':
                name: shouldInteractWithURL
            '-textView:shouldInteractWithTextAttachment:inRange:':
                name: shouldInteractWithTextAttachment
    UIToolbarDelegate: {} # DONE
    UITraitEnvironment: # DONE
        methods:
            '-traitCollectionDidChange:':
                trim_after_first_colon: true
    UIVideoEditorControllerDelegate: # DONE
        protocols: [UINavigationControllerDelegate]
        methods:
            '-videoEditorController:didFailWithError:':
                name: didFail
            '-videoEditorController:didSaveEditedVideoToPath:':
                name: didSave
            '-videoEditorControllerDidCancel:':
                name: didCancel
    UIViewControllerAnimatedTransitioning: # DONE
        methods:
            '-transitionDuration:':
                name: getTransitionDuration
            '-animateTransition:':
                name: animateTransition
            '-animationEnded:':
                name: animationEnded
    UIViewControllerContextTransitioning: # DONE
        methods:
            '-(containerView|presentationStyle|targetTransform)':
                property: true
            '-updateInteractiveTransition:':
                name: updateInteractiveTransition
            '-completeTransition:':
                name: completeTransition
            '-viewControllerForKey:':
                name: getViewController
                parameters:
                    key:
                        type: UITransitionContextViewControllerType
            '-initialFrameForViewController:':
                name: getInitialFrame
            '-finalFrameForViewController:':
                name: getFinalFrame
            '-viewForKey:':
                name: getView
                parameters:
                    key:
                        type: UITransitionContextViewType
    UIViewControllerInteractiveTransitioning: # DONE
        methods:
            '-completion(Speed|Curve)':
                property: true
            '-startInteractiveTransition:':
                name: startInteractiveTransition
# Contains a single static method
#    UIViewControllerRestoration: {}
    UIViewControllerTransitionCoordinator: # DONE
        methods:
            '-animateAlongsideTransition:completion:':
                name: animateAlongsideTransition
            '-animateAlongsideTransitionInView:animation:completion:':
                name: animateAlongsideTransition
            '-notifyWhenInteractionEndsUsingBlock:':
                name: notifyWhenInteractionEnds
    UIViewControllerTransitionCoordinatorContext: # DONE
        methods:
            '-(presentationStyle|initiallyInteractive|transitionDuration|percentComplete|completionVelocity|completionCurve|containerView|targetTransform)':
                property: true
            '-viewControllerForKey:':
                name: getViewController
            '-viewForKey:':
                name: getView
    UIViewControllerTransitioningDelegate: # DONE
        methods:
            '-animationControllerForPresentedController:presentingController:sourceController:':
                name: getAnimationControllerForPresentedController
            '-animationControllerForDismissedController:':
                name: getAnimationControllerForDismissedController
            '-interactionControllerForPresentation:':
                name: getInteractionControllerForPresentation
            '-interactionControllerForDismissal:':
                name: getInteractionControllerForDismissal
            '-presentationControllerForPresentedViewController:presentingViewController:sourceViewController:':
                name: getPresentationControllerForPresentedViewController
    UIWebViewDelegate: # DONE
        methods:
            '-webView:didFailLoadWithError:':
                name: didFailLoad
            '-webView:shouldStartLoadWithRequest:navigationType:':
                name: shouldStartLoad
                default: true
            '-webViewDidFinishLoad:':
                name: didFinishLoad
            '-webViewDidStartLoad:':
                name: didStartLoad

    # Informal protocols (categories)
    UIAccessibility: # DONE
        properties:
            'isAccessibilityElement':
                name: accessibilityElement
            'accessibilityElementsHidden':
                name: accessibilityElementsHidden
                getter: areAccessibilityElementsHidden
            'accessibilityViewIsModal':
                name: accessibilityViewModal
    UIAccessibilityAction: # DONE
        properties:
            'accessibilityCustomActions':
                type: NSArray<UIAccessibilityCustomAction>
        methods:
            '-accessibility(.*):':
                name: '#{g[0][0].downcase}#{g[0][1..-1]}'
            '-accessibility(.*)':
                name: '#{g[0][0].downcase}#{g[0][1..-1]}'   
    UIAccessibilityContainer: # DONE
        properties:
            'accessibilityElements':
                type: NSArray<UIAccessibilityElement>
        methods:
            '-accessibilityElementCount':
                property: true
            '-accessibilityElementAtIndex:':
                name: getAccessibilityElement
                return_type: UIAccessibilityElement
            '-indexOfAccessibilityElement:':
                name: indexOfAccessibilityElement
                parameters:
                    element:
                        type: UIAccessibilityElement
    UIAccessibilityFocus: # DONE
        methods:
            '-accessibilityElementDidBecomeFocused':
                name: didBecomeFocused
            '-accessibilityElementDidLoseFocus':
                name: didLoseFocus
            '-accessibilityElementIsFocused':
                name: isFocused
    UINibLoadingAdditions: {} # DONE
    UIResponderStandardEditActions: # DONE
        methods:
            '-cut:':
                name: cut
            '-copy:':
                name: copy
            '-paste:':
                name: paste
            '-select:':
                name: select
            '-selectAll:':
                name: selectAll
            '-delete:':
                name: delete
            '-makeTextWritingDirectionLeftToRight:':
                name: makeTextWritingDirectionLeftToRight
            '-makeTextWritingDirectionRightToLeft:':
                name: makeTextWritingDirectionRightToLeft
            '-toggleBoldface:':
                name: toggleBoldface
            '-toggleItalics:':
                name: toggleItalics
            '-toggleUnderline:':
                name: toggleUnderline
            '-increaseSize:':
                name: increaseSize
            '-decreaseSize:':
                name: decreaseSize

functions:
    # NSTextAlignment
    NSTextAlignmentToCTTextAlignment: # We use them directly in NSTextAlignment
        exclude: true
    NSTextAlignmentFromCTTextAlignment: # We use them directly in NSTextAlignment
        exclude: true 

    # UIAccessibility
    UIAccessibility(PostNotification):
        class: UIAccessibilityGlobals
        name: '#{g[0]}'
        visibility: protected
    UIAccessibility(DarkerSystemColorsEnabled):
        class: UIAccessibilityGlobals
        name: 'are#{g[0]}'
    UIAccessibility(.*):
        class: UIAccessibilityGlobals
        name: '#{g[0]}'

    UIApplication(Main):
        class: UIApplication
        visibility: protected
        name: '#{g[0]}'

    # UIGraphics
    UI(RectFill)UsingBlendMode:
        class: UIGraphics
        name: '#{g[0]}'
    UI(RectFrame)UsingBlendMode:
        class: UIGraphics
        name: '#{g[0]}'
    UIGraphics(BeginImageContext)WithOptions:
        class: UIGraphics
        name: '#{g[0]}'
    UIGraphics(BeginPDFPage)WithInfo:
        class: UIGraphics
        name: '#{g[0]}'
        parameters:
            pageInfo:
                type: CGPDFBoxOptions
    UIGraphics(.*):
        class: UIGraphics
        name: '#{g[0]}'
        parameters:
            documentInfo:
                type: CGPDFContextOptions
    UI(Rect.*):
        class: UIGraphics
        name: '#{g[0]}'

    UIGuidedAccessRestrictionStateForIdentifier:
        class: UIGuidedAccessRestriction
        name: getState

    # UIImage
    UIImage(.*)Representation:
        class: UIImage
        name: 'to#{g[0]}Data'
    UIImage(WriteToSavedPhotosAlbum):
        class: UIImage
        name: saveToPhotosAlbum
        parameters:
            contextInfo:
                type: '@Pointer long'

    # UIVideo
    UIVideoAtPath(IsCompatibleWithSavedPhotosAlbum):
        class: UIVideo
        visibility: protected
        name: '#{g[0]}'
    UISaveVideoAtPathToSavedPhotosAlbum:
        class: UIVideo
        name: saveToPhotosAlbum
        parameters:
            contextInfo:
                type: '@Pointer long'

    NSStringFrom(UI.*):
        class: '#{g[0]}'
        name: toString
        visibility: protected
        static: true
    (UI.*)FromString:
        class: '#{g[0]}'
        name: fromString
    NSStringFrom.*:
        class: UIGeometry
        name: toString
    (.*)FromString:
        class: UIGeometry
        name: 'stringTo#{g[0]}'

    # Make sure we don't miss any functions if new ones are introduced in a later UIKit
    (CG.*):
        name: 'Function__#{g[0]}'
    (NS.*):
        name: 'Function__#{g[0]}'
    (UI.*):
        name: 'Function__#{g[0]}'

values:
    NS(TabColumnTerminatorsAttribute)Name:
        class: NSTextTabOptions
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    NSTextStorage(.*Notification):
        class: NSTextStorage
        name: '#{g[0]}'
        type: NSString
    NS(.*DocumentAttribute):
        class: NSAttributedStringDocumentAttribute
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    NS(TextLayoutSectionsAttribute):
        class: NSAttributedStringDocumentAttribute
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    NS(.*Attribute)Name:
        class: NSAttributedStringAttribute
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    UITextAttribute(Font):
        class: NSAttributedStringAttribute
        name: 'Text#{g[0]}Attribute'
        type: NSString
        visibility: protected
    UITextAttribute(.*):
        class: NSAttributedStringAttribute
        name: '#{g[0]}Attribute'
        type: NSString
        visibility: protected
    NSTextEffect(.*):
        class: NSTextEffect
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    NS(.*)TextDocumentType:
        class: NSDocumentType
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    NSTextLayoutSection(.*):
        class: NSTextLayoutSection
        name: '#{g[0]}Key'
        type: NSString
        visibility: protected
    UILayoutPriority(.*):
        class: UILayoutPriority
        name: '#{g[0]}'

    # NSRunLoopMode
    UI(Tracking)RunLoopMode:
        class: UIRunLoopMode
        name: '#{g[0]}Value'
        visibility: protected

    # NSError
    UIPrintErrorDomain:
        class: UIPrintError
        name: getClassDomain

    # UIAccessibility
    UIAccessibility(ScreenChanged|LayoutChanged|Announcement|PageScrolled|PauseAssistiveTechnology|ResumeAssistiveTechnology)Notification:
        class: UIAccessibilityNotification
        name: '#{g[0]}Notification'
        readonly: true
        visibility: protected
    UIAccessibility(.*Notification):
        class: UIAccessibilityGlobals
        name: '#{g[0]}'
        readonly: true
        type: NSString
    UIAccessibility(VoiceOverStatusChanged):
        class: UIAccessibilityGlobals
        name: '#{g[0]}Notification'
        readonly: true
        type: NSString
    UIAccessibilityNotification(SwitchControlIdentifier):
        class: UIAccessibilityGlobals
        name: '#{g[0]}'
        readonly: true
    UIAccessibility(AnnouncementKey.*):
        class: UIAccessibilityGlobals
        name: '#{g[0]}'
        type: NSString
    UIAccessibilityTrait(.*):
        class: UIAccessibilityTraits
        name: '#{g[0]}Value'
        visibility: protected
        type: long
        readonly: true
    UIAccessibilitySpeechAttribute(.*):
        class: NSAttributedStringAttribute
        name: 'Speech#{g[0]}Attribute'
        type: NSString
        visibility: protected

    # UIActivity
    UIActivityType(.*):
        class: UIActivityType
        name: '#{g[0]}'

    # UIApplication
    UIApplicationLaunchOptionsUserActivity(Type)Key:
        class: UIApplicationLaunchOptionsUserActivityInfo
        name: '#{g[0]}Key'
        type: NSString
        visibility: protected
    UIApplicationLaunchOptions(.*Key):
        class: UIApplicationLaunchOptions
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    UIApplication(.*Notification):
        class: UIApplication
        name: '#{g[0]}'
        type: NSString
    UIApplication(ProtectedDataDidBecomeAvailable|ProtectedDataWillBecomeUnavailable):
        class: UIApplication
        name: '#{g[0]}Notification'
        type: NSString
    UI(ContentSizeCategoryDidChangeNotification):
        class: UIApplication
        name: '#{g[0]}'
        type: NSString
    UIApplication(.*UserInfoKey):
        class: UIApplication
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    UI(ContentSizeCategoryNewValueKey):
        class: UIApplication
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    UIContentSizeCategory(.*):
        class: UIContentSizeCategory
        name: '#{g[0]}Value'
        visibility: protected
        type: NSString
    UIApplication(BackgroundFetchInterval.*):
        class: UIApplication
        name: 'get#{g[0]}'
    UI(BackgroundTask)(Invalid):
        class: UIApplication
        name: 'get#{g[1]}#{g[0]}'
    UI(MinimumKeepAliveTimeout):
        class: UIApplication
        name: 'get#{g[0]}'
    UIApplication(OpenSettingsURLString):
        class: UIApplication
        name: 'get#{g[0]}'
    UIApplication(.*)ExtensionPointIdentifier:
        class: UIApplicationExtensionPointIdentifier
        name: '#{g[0]}Value'
        visibility: protected
        type: NSString

    # UICollectionView
    UICollectionElementKind(.*):
        class: UICollectionElementKind
        name: '#{g[0]}Value'
        visibility: protected
        type: NSString

    # UIDevice
    UIDevice(.*Notification):
        class: UIDevice
        name: '#{g[0]}'
        type: NSString

    # UIDocument
    UIDocument(.*Notification):
        class: UIDocument
        name: '#{g[0]}'
        type: NSString
    NS(UserActivityDocumentURLKey):
        class: UIDocument
        name: '#{g[0]}'

    # UIEdgeInsets
    UIEdgeInsets(Zero):
        class: UIEdgeInsets
        name: '#{g[0]}'

    # UIFont
    UIFontDescriptor(.*)Attribute:
        class: UIFontDescriptorAttribute
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    UIFontFeature(.*IdentifierKey):
        class: UIFontDescriptorAttributes
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    UIFontTextStyle(.*):
        class: UIFontTextStyle
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    UIFont(.*Trait):
        class: UIFontDescriptorTraits
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    UIFontWeight(.*):
        enum: UIFontWeight
        name: '#{g[0]}'

    # UIImagePickerController
    UIImagePickerController(.*):
        class: UIImagePickerControllerEditingInfo
        name: '#{g[0]}Key'
        type: NSString
        visibility: protected

    # UIKeyCommand
    UIKeyInput(.*):
        class: UIKeyCommand
        name: '#{g[0]}'

    # UILocalNotification
    UILocalNotification(DefaultSoundName):
        class: UILocalNotification
        name: 'get#{g[0]}'

    # UIMenuController
    UIMenuController(.*Notification):
        class: UIMenuController
        name: '#{g[0]}'
        type: NSString

    # UINavigationController
    UINavigationController(HideShowBarDuration):
        class: UINavigationController
        name: 'get#{g[0]}'

    # UINib
    UINib(ExternalObjects):
        class: UINibLoadingOptions
        name: '#{g[0]}Key'
        type: NSString
        visibility: protected

    # UIOffset
    UIOffset(Zero):
        class: UIOffset
        name: '#{g[0]}'

    # UIPageViewController
    UIPageViewControllerOption(.*Key):
        class: UIPageViewControllerOptions
        name: '#{g[0]}'
        type: NSString
        visibility: protected

    # UIPasteboard
    UIPasteboard(.*Notification):
        class: UIPasteboard
        name: '#{g[0]}'
        type: NSString
    UIPasteboardChanged(.*Key):
        class: UIPasteboardChangedNotificationInfo
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    UIPasteboardNameGeneral:
        exclude: true # use UIPasteboard.getGeneralPasteboard() instead
    UI(PasteboardNameFind):
        class: UIPasteboard
        name: '#{g[0]}'
        visibility: private # use Pasteboard.getFindPasteboard() instead
    UIPasteboardTypeList(.*):
        class: UIPasteboard
        name: 'get#{g[0]}TypeList'
        readonly: true
        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'

    # UIScreen
    UIScreen(.*Notification):
        class: UIScreen
        name: '#{g[0]}'
        type: NSString

    # UISplitViewController
    UISplitViewController(AutomaticDimension):
        class: UISplitViewController
        name: 'get#{g[0]}'

    # UIScrollView
    UIScrollViewDecelerationRate(.*):
        class: UIScrollView
        name: 'get#{g[0]}DecelerationRate'

    # UIStateRestoring
    UIStateRestoration(ViewControllerStoryboardKey):
        class: UIStateRestorationKey
        name: '#{g[0]}'
        visibility: protected
    UIApplicationStateRestoration(.*Key):
        class: UIStateRestorationKey
        name: 'Application#{g[0]}'
        visibility: protected

    # UITableView
    UITableView(.*Notification):
        class: UITableView
        name: '#{g[0]}'
        type: NSString
    UITableView(AutomaticDimension):
        class: UITableView
        name: 'get#{g[0]}'
    UITableView(IndexSearch):
        class: UITableView
        name: 'get#{g[0]}'

    # UITextField
    UITextFieldText(.*Notification):
        class: UITextField
        name: '#{g[0]}'
        type: NSString

    # UITextInput
    UITextInputText(.*Key):
        class: UITextInputTextStyle
        name: '#{g[0]}'
        type: NSString
        visibility: protected

    # UITextInputMode
    UITextInput(.*)Notification:
        class: UITextInputMode
        name: '#{g[0]}'
        type: NSString

    # UITextView
    UITextViewText(.*Notification):
        class: UITextView
        name: '#{g[0]}'
        type: NSString

    # UIView
    UIView(NoIntrinsicMetric):
        class: UIView
        name: '#{g[0]}'
    UILayoutFitting(.*)Size:
        class: UILayoutFittingSize
        name: '#{g[0]}Value'
        visibility: protected

    # UIViewController
    UIViewController(ShowDetailTargetDidChangeNotification):
        class: UIViewController
        name: '#{g[0]}'
        type: NSString

    # UIViewControllerContextTransitioning
    UITransitionContext(.*ViewControllerKey):
        class: UITransitionContextViewControllerType
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    UITransitionContext(.*ViewKey):
        class: UITransitionContextViewType
        name: '#{g[0]}'
        type: NSString
        visibility: protected

    # UIWindow
    UIWindow(.*Notification):
        class: UIWindow
        name: '#{g[0]}'
        type: NSString
    UI(Keyboard.*Notification):
        class: UIWindow
        name: '#{g[0]}'
        type: NSString
    UIKeyboard(.*)UserInfoKey:
        class: UIKeyboardAnimation
        name: '#{g[0]}Key'
        type: NSString
        visibility: protected
    UIWindow(Level.*):
        class: UIWindowLevel
        name: '#{g[0]}'
        visibility: protected

    UINibProxiedObjectsKey:
        exclude: true
    UIApplicationInvalidInterfaceOrientationException:
        exclude: true
    UIViewControllerHierarchyInconsistencyException:
        exclude: true

    # Make sure we don't miss any values if new ones are introduced in a later UIKit
    (NS.*):
        class: UIKit
        name: 'Value__#{g[0]}'
    (UI.*):
        class: UIKit
        name: 'Value__#{g[0]}'

constants:
    NS(AttachmentCharacter):
        class: NSTextAttachment
        name: '#{g[0]}'
        type: char

    UISegmentedControl(NoSegment):
        class: UISegmentedControl
        name: '#{g[0]}'

    # Make sure we don't miss any constants if new ones are introduced in a later UIKit
    (UI.*):
        class: UIKit
        name: 'Constant__#{g[0]}'
