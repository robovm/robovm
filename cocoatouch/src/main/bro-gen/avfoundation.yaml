package: org.robovm.apple.avfoundation
include: [foundation.yaml, dispatch.yaml, coreanimation.yaml, corefoundation.yaml, coregraphics.yaml, coreaudio.yaml, coremedia.yaml, corevideo.yaml, audiotoolbox.yaml, mediatoolbox.yaml ]
library: AVFoundation
framework: AVFoundation
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/AVFoundation.framework/Headers/AVFoundation.h
    - /System/Library/Frameworks/AVFoundation.framework/Headers/AVBase.h
typedefs:
    'void (^)(CMSampleBufferRef, NSError *)': '@Block VoidBlock2<CMSampleBuffer, NSError>'
    'void (^)(CMTime)': '@Block VoidBlock1<CMTime>'
    'void (^)(BOOL, NSError *)': '@Block VoidBlock2<Boolean, NSError>'
    'void (^)(CMSampleBufferRef, AVCaptureBracketedStillImageSettings *, NSError *)': '@Block VoidBlock3<CMSampleBuffer, AVCaptureBracketedStillImageSettings, NSError>'
    
enums:
    AVAssetReferenceRestrictions: { first: AVAssetReferenceRestrictionForbidNone, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    AVAssetExportSessionStatus: { first: AVAssetExportSessionStatusUnknown }
    AVAssetImageGeneratorResult: { first: AVAssetImageGeneratorSucceeded }
    AVAssetReaderStatus: { first: AVAssetReaderStatusUnknown }
    AVAssetWriterStatus: { first: AVAssetWriterStatusUnknown }
    AVAudio3DMixingRenderingAlgorithm: {}
    AVAudioCommonFormat: { suffix: Format }
    AVAudioEnvironmentDistanceAttenuationModel: {}
    AVAudioPlayerNodeBufferOptions: {}
    AVAudioSessionInterruptionOptions: { prefix: AVAudioSessionInterruptionOption, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    AVAudioSessionSetActiveOptions: { prefix: AVAudioSessionSetActiveOption, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    AVAudioSessionPortOverride: { marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    AVAudioSessionRouteChangeReason: { marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    AVAudioSessionCategoryOptions: { marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    AVAudioSessionInterruptionType: { marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    AVAudioSessionErrorCode: {}
    AVAudioSessionInterruptionFlag: { first: AVAudioSessionInterruptionFlags_ShouldResume, prefix: AVAudioSessionInterruptionFlags_, bits: true, marshaler: Bits.AsMachineSizedIntMarshaler }
    AVAudioSessionRecordPermission: {}
    AVAudioSessionSetActiveFlag: { first: AVAudioSessionSetActiveFlags_NotifyOthersOnDeactivation, prefix: AVAudioSessionSetActiveFlags_, bits: true, marshaler: Bits.AsMachineSizedIntMarshaler }
    AVAudioSessionSilenceSecondaryAudioHintType: {}
    AVAudioQuality: { first: AVAudioQualityMin }
    AVAudioUnitReverbPreset: {}
    AVAudioUnitEQFilterType: {}
    AVAudioUnitDistortionPreset: {}
    AVAuthorizationStatus: {}
    AVCaptureDevicePosition: {}
    AVCaptureFlashMode: {}
    AVCaptureTorchMode: {}
    AVCaptureFocusMode: {}
    AVCaptureAutoFocusRangeRestriction: {}
    AVCaptureAutoFocusSystem: {}
    AVCaptureExposureMode: {}
    AVCaptureDeviceTransportControlsPlaybackMode: {}
    AVCaptureVideoOrientation: {}
    AVCaptureVideoStabilizationMode: {}
    AVCaptureWhiteBalanceMode: {}
    AVErrorCode: { first: AVErrorUnknown, prefix: AVError, marshaler: ValuedEnum.AsMachineSizedSIntMarshaler }
    AVKeyValueStatus: { first: AVKeyValueStatusUnknown }
    AVPlayerStatus: { first: AVPlayerStatusUnknown }
    AVPlayerActionAtItemEnd: { first: AVPlayerActionAtItemEndAdvance }
    AVPlayerItemStatus: { first: AVPlayerItemStatusUnknown }
    AVQueuedSampleBufferRenderingStatus: {}
    AVSampleBufferDisplayLayerQueueManagement: {}
    AVSpeechBoundary: {}
    AVVideoFieldMode: {}
    
categories:
    NSValueAVFoundationExtensions: # DONE
        methods:
            '+valueWith.*':
                name: create
    AVTimeCoding: # DONE
        methods:
            '-encodeCMTime:forKey:':
                trim_after_first_colon: true
            '-decodeCMTimeForKey:':
                name: decodeCMTime
            '-encodeCMTimeRange:forKey:':
                trim_after_first_colon: true
            '-decodeCMTimeRangeForKey:':
                name: decodeCMTimeRange
            '-encodeCMTimeMapping:forKey:':
                trim_after_first_colon: true
            '-decodeCMTimeMappingForKey:':
                name: decodeCMTimeMapping
classes:
    AVFoundation:
        annotations: ['@Marshaler(NSString.AsStringMarshaler.class)']

    # Structs
    AVAudio3DAngularOrientation: {}
    AVAudio3DPoint: {}
    AVAudio3DVector: {}
    AVAudio3DVectorOrientation: {}
    AVCaptureWhiteBalanceGains: {}
    AVCaptureWhiteBalanceChromaticityValues: {}
    AVCaptureWhiteBalanceTemperatureAndTintValues: {}
    AVEdgeWidths: {}
    AVPixelAspectRatio: {}
    
    AVError:
        extends: NSError
    AVMetadataIdentifierCommon:
        extends: AVMetadataIdentifier
    AVMetadataIdentifier3GPUserData:
        extends: AVMetadataIdentifier
    AVMetadataIdentifierISOUserData:
        extends: AVMetadataIdentifier
    AVMetadataIdentifierQuickTimeUserData:
        extends: AVMetadataIdentifier
    AVMetadataIdentifierIcyMetadata:
        extends: AVMetadataIdentifier
    AVMetadataIdentifierID3Metadata:
        extends: AVMetadataIdentifier
    AVMetadataIdentifieriTunesMetadata:
        extends: AVMetadataIdentifier
    AVMetadataIdentifierQuickTimeMetadata:
        extends: AVMetadataIdentifier

    AVMetadataKeyCommon:
        extends: AVMetadataKey
    AVMetadataKey3GPUserData:
        extends: AVMetadataKey
    AVMetadataKeyIcyMetadata:
        extends: AVMetadataKey
    AVMetadataKeyID3Metadata:
        extends: AVMetadataKey
    AVMetadataKeyISOUserData:
        extends: AVMetadataKey
    AVMetadataKeyiTunesMetadata:
        extends: AVMetadataKey
    AVMetadataKeyQuickTimeMetadata:
        extends: AVMetadataKey
    AVMetadataKeyQuickTimeUserData:
        extends: AVMetadataKey

    AVAsset: # DONE
        properties:
            'tracks':
                type: "NSArray<AVAssetTrack>"
            'trackGroups':
                type: "NSArray<AVAssetTrackGroup>"
            'commonMetadata':
                type: "NSArray<AVMetadataItem>"
            'availableMetadataFormats':
                type: "NSArray<NSString>"
            'availableChapterLocales':
                type: "NSArray<NSLocale>"
            'availableMediaCharacteristicsWithMediaSelectionOptions':
                name: "availableMediaCharacteristics"
                type: "NSArray<NSString>"
        methods:
            '+assetWithURL:':
                name: "create"
                return_type: "AVAsset"
            '-trackWithTrackID:':
                name: "getTrack"
            '-tracksWithMediaType:':
                name: "getTracksWithType"
                return_type: "NSArray<AVAssetTrack>"
            '-tracksWithMediaCharacteristic:':
                name: "getTracksWithCharacteristic"
                return_type: "NSArray<AVAssetTrack>"
            '-metadataForFormat:':
                name: "getMetadata"
                return_type: "NSArray<AVMetadataItem>"
            '-chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:':
                name: "getChapterMetadataGroups"
                return_type: "NSArray<AVTimedMetadataGroup>"
                parameters:
                    commonKeys:
                        type: "NSArray<AVMetadataItem>"
            '-chapterMetadataGroupsBestMatchingPreferredLanguages:':
                name: "getChapterMetadataGroups"
                return_type: "NSArray<AVTimedMetadataGroup>"
                parameters:
                    preferredLanguages:
                        type: "NSArray<NSString>"
            '-mediaSelectionGroupForMediaCharacteristic:':
                name: "getMediaSelectionGroup"
            '-unusedTrackID':
                property: true
            '-statusOfValueForKey:error:':
                name: "getStatusOfValue"
    AVAssetExportSession: # DONE
        properties:
            'outputFileType':
                type: "NSString"
            'supportedFileTypes':
                type: "NSArray<NSString>"
            'metadata':
                type: "NSArray<AVMetadataItem>"
        methods:
            '-initWithAsset:presetName:':
                name: "init"
            '-determineCompatibleFileTypesWithCompletionHandler:':
                name: "determineCompatibleFileTypes"
                parameters:
                    handler:
                        type: "@Block VoidBlock1<NSArray<NSString>>"
            '-exportAsynchronouslyWithCompletionHandler:':
                name: "exportAsynchronously"
            '+allExportPresets':
                property: true
                return_type: "NSArray<NSString>"
            '+exportPresetsCompatibleWithAsset:':
                name: "getCompatibleExportPresets"
                return_type: "NSArray<NSString>"
            '+determineCompatibilityOfExportPreset:withAsset:outputFileType:completionHandler:':
                name: "determineCompatibilityOfExportPreset"
            '+exportSessionWithAsset:presetName:':
                name: "getExportSession"  
    AVAssetImageGenerator: # DONE
        methods:
            '-initWithAsset:':
                name: "init"
            '-copyCGImageAtTime:actualTime:error:':
                name: "copyCGImage"
            '-generateCGImagesAsynchronouslyForTimes:completionHandler:':
                name: "generateCGImagesAsynchronously"
                parameters:
                    requestedTimes:
                        type: "NSArray<NSValue>"
                    handler: 
                        type: "@Block VoidBlock5<CMTime, CGImage, CMTime, AVAssetImageGeneratorResult, NSError>"
            '+assetImageGeneratorWithAsset:':
                name: "create"
    AVAssetReader: # DONE
        properties:
            'outputs':
                type: "NSArray<AVAssetReaderOutput>"
        methods:
            '-initWithAsset:error:':
                name: "init"
            '-canAddOutput:':
                trim_after_first_colon: true
            '-addOutput:':
                trim_after_first_colon: true
            '+assetReaderWithAsset:error:':
                name: "create"  
    AVAssetReaderAudioMixOutput: # DONE
        properties:
            'audioTracks':
                type: "NSArray<AVAssetTrack>"
            'audioSettings':
                type: "NSDictionary<NSString, ?>"
        methods:
            '-initWithAudioTracks:audioSettings:':
                name: "init"
                parameters:
                    audioTracks:
                        type: "NSArray<AVAssetTrack>"
                    audioSettings:
                        type: "NSDictionary<NSString, ?>"
            '+assetReaderAudioMixOutputWithAudioTracks:audioSettings:':
                name: "create"
                parameters:
                    audioTracks:
                        type: "NSArray<AVAssetTrack>"
                    audioSettings:
                        type: "NSDictionary<NSString, ?>"
    AVAssetReaderOutput: {} # DONE
    AVAssetReaderOutputMetadataAdaptor: {}
    AVAssetReaderSampleReferenceOutput: {}
    AVAssetReaderTrackOutput: # DONE
        properties:
            'outputSettings':
                type: "NSDictionary<NSString, ?>"
        methods:
            '-initWithTrack:outputSettings:':
                name: "init"
                parameters:
                    outputSettings:
                        type: "NSDictionary<NSString, ?>"
            '+assetReaderTrackOutputWithTrack:outputSettings:':
                name: "create"
                parameters:
                    outputSettings:
                        type: "NSDictionary<NSString, ?>" 
    AVAssetReaderVideoCompositionOutput: # DONE
        properties:
            'videoTracks':
                type: "NSArray<AVAssetTrack>"
            'videoSettings':
                type: "NSDictionary<NSString, ?>"
        methods:
            '-initWithVideoTracks:videoSettings:':
                name: "init"
                parameters:
                    videoTracks:
                        type: "NSArray<AVAssetTrack>"
                    videoSettings:
                        type: "NSDictionary<NSString, ?>"
            '+assetReaderVideoCompositionOutputWithVideoTracks:videoSettings:':
                name: "create"
                parameters:
                    videoTracks:
                        type: "NSArray<AVAssetTrack>"
                    videoSettings:
                        type: "NSDictionary<NSString, ?>"
    AVAssetResourceLoader: # DONE
        methods:
            '-setDelegate:queue:':
                trim_after_first_colon: true
    AVAssetResourceLoadingContentInformationRequest: {} # DONE
    AVAssetResourceLoadingDataRequest: # DONE
        methods:
            '-respondWithData:':
                trim_after_first_colon: true
    AVAssetResourceLoadingRequest: # DONE
        methods:
            '-finishLoadingWithError:':
                name: "finishLoading"
            '-streamingContentKeyRequestDataForApp:contentIdentifier:options:error:':
                name: "getStreamingContentKeyRequestData"
                parameters:
                    options:
                        type: "NSDictionary<NSString, ?>"
            '-finishLoadingWithResponse:data:redirect:':
                name: "finishLoading" 
    AVAssetResourceRenewalRequest: {}
    AVAssetTrack: # DONE
        properties:
            'formatDescriptions':
                type: "NSArray<?>" # CMFormatDescription
            'segments':
                type: "NSArray<AVAssetTrackSegment>"
            'commonMetadata':
                type: "NSArray<AVMetadataItem>"
            'availableMetadataFormats':
                type: "NSArray<NSString>"
            'availableTrackAssociationTypes':
                type: "NSArray<NSString>"
        methods:
            '-hasMediaCharacteristic:':
                trim_after_first_colon: true
            '-segmentForTrackTime:':
                name: "getSegment"
            '-samplePresentationTimeForTrackTime:':
                name: "getSamplePresentationTime"
            '-metadataForFormat:':
                name: "getMetadata"
                return_type: "NSArray<AVMetadataItem>"
            '-associatedTracksOfType:':
                name: "getAssociatedTracks"
                return_type: "NSArray<AVAssetTrack>"
    AVAssetTrackGroup: # DONE
        properties:
            'trackIDs':
                type: "NSArray<NSNumber>"
    AVAssetTrackSegment: {} # DONE
    AVAssetWriter: # DONE
        properties:
            'availableMediaTypes':
                type: "NSArray<NSString>"
            'metadata':
                type: "NSArray<AVMetadataItem>"
            'inputs':
                type: "NSArray<AVAssetWriterInput>"
            'inputGroups':
                type: "NSArray<AVAssetWriterInputGroup>"
        methods:
            '-initWithURL:fileType:error:':
                name: "init"
            '-canApplyOutputSettings:forMediaType:':
                trim_after_first_colon: true
                parameters:
                    outputSettings:
                        type: "NSDictionary<NSString, ?>"
            '-canAddInput:':
                trim_after_first_colon: true
            '-addInput:':
                trim_after_first_colon: true
            '-startSessionAtSourceTime:':
                name: "startSession"
            '-endSessionAtSourceTime:':
                name: "endSession"
            '-finishWritingWithCompletionHandler:':
                name: "finishWriting"
            '+assetWriterWithURL:fileType:error:':
                name: "create"
            '-canAddInputGroup:':
                trim_after_first_colon: true
            '-addInputGroup:':
                trim_after_first_colon: true
    AVAssetWriterInput: # DONE
        properties:
            'outputSettings':
                type: "NSDictionary<NSString, ?>"
            'metadata':
                type: "NSArray<AVMetadataItem>"
        methods:
            '-initWithMediaType:outputSettings:':
                name: "init"
                parameters:
                    outputSettings:
                        type: "NSDictionary<NSString, ?>"
            '-initWithMediaType:outputSettings:sourceFormatHint:':
                name: "init"
                parameters:
                    outputSettings:
                        type: "NSDictionary<NSString, ?>"
            '-requestMediaDataWhenReadyOnQueue:usingBlock:':
                name: "requestMediaDataWhenReady"
            '-appendSampleBuffer:':
                trim_after_first_colon: true
            '+assetWriterInputWithMediaType:outputSettings:':
                name: "create"
                parameters:
                    outputSettings:
                        type: "NSDictionary<NSString, ?>"
            '+assetWriterInputWithMediaType:outputSettings:sourceFormatHint:':
                name: "create"
                parameters:
                    outputSettings:
                        type: "NSDictionary<NSString, ?>"
            '-canAddTrackAssociationWithTrackOfInput:type:':
                name: "canAddTrackAssociation"
            '-addTrackAssociationWithTrackOfInput:type:':
                name: "addTrackAssociation"   
    AVAssetWriterInputGroup: # DONE
        properties:
            'inputs':
                type: "NSArray<AVAssetWriterInput>"
        methods:
            '-initWithInputs:defaultInput:':
                name: "init"
                parameters:
                    inputs:
                        type: "NSArray<AVAssetWriterInput>"
            '+assetWriterInputGroupWithInputs:defaultInput:':
                name: "create"
                parameters:
                    inputs:
                        type: "NSArray<AVAssetWriterInput>"
    AVAssetWriterInputMetadataAdaptor: {}
    AVAssetWriterInputPassDescription: {}
    AVAssetWriterInputPixelBufferAdaptor: # DONE
        properties:
            'sourcePixelBufferAttributes':
                type: "NSDictionary<NSString, ?>"
        methods:
            '-initWithAssetWriterInput:sourcePixelBufferAttributes:':
                name: "init"
                parameters:
                    sourcePixelBufferAttributes:
                        type: "NSDictionary<NSString, ?>"
            '-appendPixelBuffer:withPresentationTime:':
                name: "appendPixelBuffer"
            '+assetWriterInputPixelBufferAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:':
                name: "create"
                parameters:
                    sourcePixelBufferAttributes:
                        type: "NSDictionary<NSString, ?>"
    AVAsynchronousVideoCompositionRequest: # DONE
        properties:
            'sourceTrackIDs':
                type: "NSArray<NSString>"
        methods:
            '-sourceFrameByTrackID:':
                name: "getSourceFrame"
            '-finishWithComposedVideoFrame:':
                name: "finish"
            '-finishWithError:':
                name: "finish"
    AVAudioBuffer: {}
    AVAudioChannelLayout: {}
    AVAudioEngine:
        methods:
            '-init':
                exclude: true
    AVAudioEnvironmentDistanceAttenuationParameters: {}
    AVAudioEnvironmentNode: {}
    AVAudioEnvironmentReverbParameters: {}
    AVAudioFile: {}
    AVAudioFormat: {}
    AVAudioIONode: {}
    AVAudioInputNode: {}
    AVAudioOutputNode: {}
    AVAudioMixerNode: {}
    AVAudioMix: # DONE
        properties:
            'inputParameters':
                type: NSArray<AVAudioMixInputParameters>
    AVAudioMixInputParameters: # DONE
        properties:
            'audioTimePitchAlgorithm':
                type: AVAudioTimePitchAlgorithm
        methods:
            '-getVolumeRampForTime:startVolume:endVolume:timeRange:':
                name: getVolumeRamp
                visibility: protected
                parameters:
                    timeRange:
                        type: CMTimeRange.CMTimeRangePtr
    AVAudioNode: {}
    AVAudioPCMBuffer: {}  
    AVAudioPlayer: # DONE
        properties:
            'settings':
                type: "NSDictionary<NSString, ?>"
            'channelAssignments':
                type: "NSArray<AVAudioSessionChannelDescription>"
        methods:
            '-init.*':
                name: "init"
            '-playAtTime:':
                trim_after_first_colon: true
            '-peakPowerForChannel:':
                name: "getPeakPower"
            '-averagePowerForChannel:':
                name: "getAveragePower"
    AVAudioPlayerNode: {}
    AVAudioRecorder: # DONE
        properties:
            'settings':
                type: "NSDictionary<NSString, ?>"
            'channelAssignments':
                type: "NSArray<AVAudioSessionChannelDescription>"
        methods:
            '-initWithURL:settings:error:':
                name: "init"
                parameters:
                    settings:
                        type: "NSDictionary<NSString, ?>"
            '-recordAtTime:':
                trim_after_first_colon: true
            '-recordForDuration:':
                trim_after_first_colon: true
            '-recordAtTime:forDuration:':
                name: "record"
            '-peakPowerForChannel:':
                name: "getPeakPower"
            '-averagePowerForChannel:':
                name: "getAveragePower"
    AVAudioSession: # DONE
        properties:
            'category':
                type: AVAudioSessionCategory
            'mode':
                type: AVAudioSessionMode
            'inputIsAvailable':
                exclude: true
            'availableInputs':
                type: NSArray<AVAudioSessionPortDescription>
            'inputDataSources':
                type: NSArray<AVAudioSessionDataSourceDescription>
            'outputDataSources':
                type: NSArray<AVAudioSessionDataSourceDescription>
        methods:
            '-setActive:.*':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '-setCategory:.*':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
                parameters:
                    category:
                        type: AVAudioSessionCategory
            '-recordPermission':
                property: true
            '-requestRecordPermission:':
                trim_after_first_colon: true
                parameters:
                    response:
                        type: '@Block VoidBooleanBlock'
            '-setMode:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
                parameters:
                    mode:
                        type: AVAudioSessionMode
            '-overrideOutputAudioPort:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '-setPreferredInput:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '+sharedInstance':
                return_type: AVAudioSession
                property: true
            '-setPreferredSampleRate:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '-setPreferredIOBufferDuration:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '-setPreferredInputNumberOfChannels:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '-setPreferredOutputNumberOfChannels:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '-setInputGain:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '-setInputDataSource:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '-setOutputDataSource:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '-setPreferredHardwareSampleRate:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
    AVAudioSessionChannelDescription: {} # DONE
    AVAudioSessionDataSourceDescription: # DONE
        properties:
            'location':
                type: AVAudioSessionLocation
            'orientation':
                type: AVAudioSessionOrientation
            'supportedPolarPatterns':
                type:  '@org.robovm.rt.bro.annotation.Marshaler(AVAudioSessionPolarPattern.AsListMarshaler.class) List<AVAudioSessionPolarPattern>'
            '(selectedPolarPattern|preferredPolarPattern)':
                type: AVAudioSessionPolarPattern
        methods:
            '-setPreferredPolarPattern:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
                parameters:
                    pattern:
                        type: AVAudioSessionPolarPattern
    AVAudioSessionPortDescription: # DONE
        properties:
            'portType':
                type: AVAudioSessionPort
            'channels':
                type: NSArray<AVAudioSessionChannelDescription>
            'dataSources':
                type: NSArray<AVAudioSessionDataSourceDescription>
        methods:
            '-setPreferredDataSource:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
    AVAudioSessionRouteDescription: # DONE
        properties:
            'inputs':
                type: NSArray<AVAudioSessionPortDescription>
            'outputs':
                type: NSArray<AVAudioSessionPortDescription>
    AVAudioTime: {}
    AVAudioUnit: {}
    AVAudioUnitDelay: {}
    AVAudioUnitDistortion: {}
    AVAudioUnitEQ: {}
    AVAudioUnitEQFilterParameters: {}
    AVAudioUnitEffect: {}
    AVAudioUnitGenerator: {}
    AVAudioUnitMIDIInstrument: {}
    AVAudioUnitReverb: {}
    AVAudioUnitSampler: {}
    AVAudioUnitTimeEffect: {}
    AVAudioUnitTimePitch: {}
    AVAudioUnitVarispeed: {}
    AVCaptureAudioChannel: {} # DONE
    AVCaptureAudioDataOutput: # DONE
        methods:
            '-setSampleBufferDelegate:queue:':
                trim_after_first_colon: true
            '-recommendedAudioSettingsForAssetWriterWithOutputFileType:':
                name: "getRecommendedAudioSettings"
                return_type: "NSDictionary<NSString, ?>"
    AVCaptureAutoExposureBracketedStillImageSettings: {}
    AVCaptureBracketedStillImageSettings: {}
    AVCaptureConnection: # DONE
        properties:
            'inputPorts':
                type: "NSArray<AVCaptureInputPort>"
            'audioChannels':
                type: "NSArray<AVCaptureAudioChannel>"
    AVCaptureDevice: # DONE
        properties:
            'formats':
                type: "NSArray<AVCaptureDeviceFormat>"
        methods:
            '-hasMediaType:':
                trim_after_first_colon: true
            '-lockForConfiguration:':
                trim_after_first_colon: true
            '-supportsAVCaptureSessionPreset:':
                trim_after_first_colon: true
            '+devices':
                name: "getDevices"
                return_type: "NSArray<AVCaptureDevice>"
            '+devicesWithMediaType:':
                name: "getDevices"
                return_type: "NSArray<AVCaptureDevice>"
            '+defaultDeviceWithMediaType:':
                name: "getDefaultDevice"
            '+deviceWithUniqueID:':
                name: "getDevice"
            '-isFlashModeSupported:':
                trim_after_first_colon: true
            '-isTorchModeSupported:':
                trim_after_first_colon: true
            '-setTorchModeOnWithLevel:error:':
                name: "setTorchModeOn"
            '-isFocusModeSupported:':
                trim_after_first_colon: true
            '-isExposureModeSupported:':
                trim_after_first_colon: true
            '-isWhiteBalanceModeSupported:':
                trim_after_first_colon: true
            '-rampToVideoZoomFactor:withRate:':
                trim_after_first_colon: true
            '+authorizationStatusForMediaType:':
                name: "getAuthorizationStatus"
            '+requestAccessForMediaType:completionHandler:':
                trim_after_first_colon: true
    AVCaptureDeviceFormat: # DONE
        properties:
            'videoSupportedFrameRateRanges':
                type: "NSArray<AVFrameRateRange>"    
    AVCaptureDeviceInput: # DONE
        methods:
            '-initWithDevice:error:':
                name: "init"
            '+deviceInputWithDevice:error:':
                name: "create"
                return_type: "AVCaptureDeviceInput" 
    AVCaptureDeviceInputSource: {} # DONE
    AVCaptureFileOutput: # DONE
        methods:
            '-startRecordingToOutputFileURL:recordingDelegate:':
                name: "startRecording"
    AVCaptureInput: # DONE
        properties:
            'ports':
                type: "NSArray<AVCaptureInputPort>"
    AVCaptureInputPort: {} # DONE
    AVCaptureManualExposureBracketedStillImageSettings: {}
    AVCaptureMetadataOutput: # DONE
        properties:
            'availableMetadataObjectTypes':
                type: "NSArray<NSString>"
            'metadataObjectTypes':
                type: "NSArray<NSString>"
        methods:
            '-setMetadataObjectsDelegate:queue:':
                trim_after_first_colon: true
    AVCaptureMovieFileOutput: # DONE
        properties:
            'metadata':
                type: "NSArray<AVMetadataItem>"
    AVCaptureOutput: # DONE
        properties:
            'connections':
                type: "NSArray<AVCaptureConnection>"
        methods:
            '-connectionWithMediaType:':
                name: "getConnection"
            '-transformedMetadataObjectForMetadataObject:connection:':
                name: "getTransformedMetadataObject"
            '-metadataOutputRectOfInterestForRect:':
                name: "getRectOfInterestInOutputCoordinates"
            '-rectForMetadataOutputRectOfInterest:':
                name: "getRectOfInterestInMetadataOutputCoordinates"
    AVCaptureSession: # DONE
        properties:
            'inputs':
                type: NSArray<AVCaptureInput>
            'outputs':
                type: NSArray<AVCaptureOutput>
        methods:
            '-canSetSessionPreset:':
                trim_after_first_colon: true
            '-canAddInput:':
                trim_after_first_colon: true
            '-addInput:':
                trim_after_first_colon: true
            '-removeInput:':
                trim_after_first_colon: true
            '-canAddOutput:':
                trim_after_first_colon: true
            '-addOutput:':
                trim_after_first_colon: true
            '-removeOutput:':
                trim_after_first_colon: true
            '-addInputWithNoConnections:':
                trim_after_first_colon: true
            '-addOutputWithNoConnections:':
                trim_after_first_colon: true
            '-canAddConnection:':
                trim_after_first_colon: true
            '-addConnection:':
                trim_after_first_colon: true
            '-removeConnection:':
                trim_after_first_colon: true
    AVCaptureStillImageOutput: # DONE
        properties:
            'outputSettings':
                type: "NSDictionary<NSString, ?>"
            'availableImageDataCVPixelFormatTypes':
                type: "NSArray<?>"
        methods:
            '-captureStillImageAsynchronouslyFromConnection:completionHandler:':
                name: "captureStillImageAsynchronously"
            '+jpegStillImageNSDataRepresentation:':
                name: "getJPEGStillImageNSDataRepresentation"  
    AVCaptureVideoDataOutput: # DONE
        properties:
            'videoSettings':
                type: AVVideoSettings
            'availableVideoCVPixelFormatTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(CVPixelFormatType.AsListMarshaler.class) List<CVPixelFormatType>'
            'availableVideoCodecTypes':
                type: '@org.robovm.rt.bro.annotation.Marshaler(CMVideoCodecType.AsListMarshaler.class) List<CMVideoCodecType>'
        methods:
            '-setSampleBufferDelegate:queue:':
                trim_after_first_colon: true
            '-recommendedVideoSettingsForAssetWriterWithOutputFileType:':
                name: getRecommendedVideoSettings
                return_type: AVVideoSettings
                parameters:
                    outputFileType:
                        type: AVFileType
    AVCaptureVideoPreviewLayer: # DONE
        properties:
            'videoGravity':
                type: AVLayerVideoGravity
        methods:
            '-initWithSessionWithNoConnection:':
                exclude: true
            '-initWithSession:':
                name: init
            '-captureDevicePointOfInterestForPoint:':
                name: captureDevicePointOfInterest
            '-pointForCaptureDevicePointOfInterest:':
                name: getDevicePointOfInterest
            '-metadataOutputRectOfInterestForRect:':
                name: getRectOfInterestInLayerCoordinates
            '-rectForMetadataOutputRectOfInterest:':
                name: getRectOfInterestInMetadataOutputCoordinates
            '-transformedMetadataObjectForMetadataObject:':
                name: getTransformedMetadataObject
            '+layerWithSession:':
                name: create
                return_type: AVCaptureVideoPreviewLayer
            '+layerWithSessionWithNoConnection:':
                name: createWithNoConnection
                return_type: AVCaptureVideoPreviewLayer
    AVComposition: # DONE
        properties:
            'tracks':
                type: NSArray<AVAssetTrack>
    AVCompositionTrack: # DONE
        properties:
            'segments':
                type: NSArray<AVAssetTrackSegment>
    AVCompositionTrackSegment: # DONE
        methods:
            '-initWithURL:trackID:sourceTimeRange:targetTimeRange:':
                name: init
            '-initWithTimeRange:':
                name: init
            '+compositionTrackSegmentWithURL:trackID:sourceTimeRange:targetTimeRange:':
                name: create
            '+compositionTrackSegmentWithTimeRange:':
                name: create
    AVFrameRateRange: {} # DONE
    AVMediaSelectionGroup: # DONE
        properties:
            'options':
                type: NSArray<AVMediaSelectionOption>
        methods:
            '-mediaSelectionOptionWithPropertyList:':
                name: getMediaSelectionOption
                parameters:
                    plist:
                        type: NSPropertyList
            '+playableMediaSelectionOptionsFromArray:':
                name: filterPlayableMediaSelectionOptions
                return_type: NSArray<AVMediaSelectionOption>
                parameters:
                    mediaSelectionOptions:
                        type: NSArray<AVMediaSelectionOption>
            '+mediaSelectionOptionsFromArray:filteredAndSortedAccordingToPreferredLanguages:':
                name: filterMediaSelectionOptionsByPreferredLanguages
                return_type: NSArray<AVMediaSelectionOption>
                parameters:
                    mediaSelectionOptions:
                        type: NSArray<AVMediaSelectionOption>
                    preferredLanguages:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+mediaSelectionOptionsFromArray:withLocale:':
                name: filterMediaSelectionOptionsByLocale
                return_type: NSArray<AVMediaSelectionOption>
                parameters:
                    mediaSelectionOptions:
                        type: NSArray<AVMediaSelectionOption>
            '+mediaSelectionOptionsFromArray:withMediaCharacteristics:':
                name: filterMediaSelectionOptionsWithMediaCharacteristics
                return_type: NSArray<AVMediaSelectionOption>
                parameters:
                    mediaSelectionOptions:
                        type: NSArray<AVMediaSelectionOption>
                    mediaCharacteristics:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMediaCharacteristic.AsListMarshaler.class) List<AVMediaCharacteristic>'
            '+mediaSelectionOptionsFromArray:withoutMediaCharacteristics:':
                name: filterMediaSelectionOptionsWithoutMediaCharacteristics
                return_type: NSArray<AVMediaSelectionOption>
                parameters:
                    mediaSelectionOptions:
                        type: NSArray<AVMediaSelectionOption>
                    mediaCharacteristics:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMediaCharacteristic.AsListMarshaler.class) List<AVMediaCharacteristic>'
    AVMediaSelectionOption: # DONE
        properties:
            'mediaType':
                type: AVMediaType
            'mediaSubTypes':
                type: "NSArray<NSNumber>"
            'commonMetadata':
                type: NSArray<AVMetadataItem>
            'availableMetadataFormats':
                type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataFormat.AsListMarshaler.class) List<AVMetadataFormat>'
        methods:
            '-hasMediaCharacteristic:':
                trim_after_first_colon: true
                parameters:
                    mediaCharacteristic:
                        type: AVMediaCharacteristic
            '-metadataForFormat:':
                name: getMetadata
                parameters:
                    format:
                        type: AVMetadataFormat
                return_type: NSArray<AVMetadataItem>
            '-associatedMediaSelectionOptionInMediaSelectionGroup:':
                name: getAssociatedMediaSelectionOption
            '-propertyList':
                property: true
                return_type: NSPropertyList
            '-displayNameWithLocale:':
                name: getDisplayName
    AVMetadataFaceObject: {} # DONE
    AVMetadataItem: # DONE
        properties:
            'identifier':
                type: AVMetadataIdentifier
            'key':
                type: AVMetadataKey
            'commonKey':
                type: AVMetadataKeyCommon
            'keySpace':
                type: AVMetadataKeySpace
            'dataType':
                type: String # TODO   types defined in CMMetadata.h
            'value':
                type: NSObject
            'extraAttributes':
                type: AVMetadataExtraAttributes
        methods:
            '-statusOfValueForKey:error:':
                name: getStatusOfValue
                visibility: protected # throws NSErrorException
                parameters:
                    key:
                        type: AVMetadataKey
            '-loadValuesAsynchronouslyForKeys:completionHandler:':
                name: loadValuesAsynchronously
                parameters:
                    keys:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataKey.AsListMarshaler.class) List<AVMetadataKey>'
            '+metadataItemsFromArray:filteredAndSortedAccordingToPreferredLanguages:':
                name: filterMetadataItemsByPreferredLanguages
                return_type: NSArray<AVMetadataItem>
                parameters:
                    metadataItems:
                        type: NSArray<AVMetadataItem>
                    preferredLanguages:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+metadataItemsFromArray:withLocale:':
                name: filterMetadataItemsByLocale
                return_type: NSArray<AVMetadataItem>
                parameters:
                    metadataItems:
                        type: NSArray<AVMetadataItem>
            '+metadataItemsFromArray:withKey:keySpace:':
                name: filterMetadataItemsByKey
                return_type: NSArray<AVMetadataItem>
                parameters:
                    metadataItems:
                        type: NSArray<AVMetadataItem>
                    key:
                        type: AVMetadataKey
                    keySpace:
                        type: AVMetadataKeySpace
            '+metadataItemsFromArray:filteredByMetadataItemFilter:':
                name: filterMetadataItems
                return_type: NSArray<AVMetadataItem>
                parameters:
                    metadataItems:
                        type: NSArray<AVMetadataItem>
            '+metadataItemsFromArray:filteredByIdentifier:':
                name: filterMetadataItemsByIdentifier
                return_type: NSArray<AVMetadataItem>
                parameters:
                    metadataItems:
                        type: NSArray<AVMetadataItem>
                    identifier:
                        type: AVMetadataIdentifier
            '+identifierForKey:keySpace:':
                name: getIdentifierForKey
                return_type: AVMetadataIdentifier
                parameters:
                    key:
                        type: AVMetadataKey
                    keySpace:
                        type: AVMetadataKeySpace
            '+keySpaceForIdentifier:':
                name: getKeySpaceForIdentifier
                return_type: AVMetadataKeySpace
                parameters:
                    identifier:
                        type: AVMetadataIdentifier
            '+keyForIdentifier:':
                name: getKeyForIdentifier
                return_type: AVMetadataKey
                parameters:
                    identifier:
                        type: AVMetadataIdentifier
    AVMetadataItemFilter: # DONE
        methods:
            '+metadataItemFilterForSharing':
                name: createForSharing
    AVMetadataMachineReadableCodeObject: # DONE
        properties:
            'corners':
                type: 'NSArray<NSDictionary<?, ?>>'
    AVMetadataObject: # DONE
        properties:
            'type':
                type: AVMetadataObjectType
    AVMIDIPlayer: # DONE
        methods:
            '-init.*':
                name: init
                constructor: false
            '-play:':
                trim_after_first_colon: true
    AVMutableAudioMix: # DONE
        properties:
            'inputParameters':
                type: NSArray<AVAudioMixInputParameters>
        methods:
            '+audioMix':
                name: create
    AVMutableAudioMixInputParameters: # DONE
        properties:
            'audioTimePitchAlgorithm':
                type: AVAudioTimePitchAlgorithm
        methods:
            '-setVolumeRampFromStartVolume:toEndVolume:timeRange:':
                name: setVolumeRamp
            '-setVolume:atTime:':
                trim_after_first_colon: true
            '+audioMixInputParametersWithTrack:':
                name: create
            '+audioMixInputParameters':
                name: create
    AVMutableComposition: # DONE
        properties:
            'tracks':
                type: NSArray<AVAssetTrack>
        methods:
            '+composition':
                name: create
            '-insertTimeRange:ofAsset:atTime:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '-insertEmptyTimeRange:':
                trim_after_first_colon: true
            '-removeTimeRange:':
                trim_after_first_colon: true
            '-scaleTimeRange:toDuration:':
                trim_after_first_colon: true
            '-addMutableTrackWithMediaType:preferredTrackID:':
                name: addMutableTrack
                parameters:
                    mediaType:
                        type: AVMediaType
            '-removeTrack:':
                trim_after_first_colon: true
            '-mutableTrackCompatibleWithTrack:':
                name: getCompatibleMutableTrack
    AVMutableCompositionTrack: # DONE
        properties:
            'segments':
                type: NSArray<AVAssetTrackSegment>
        methods:
            '-insertTimeRange:ofTrack:atTime:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
            '-insertTimeRanges:ofTracks:atTime:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
                parameters:
                    timeRanges:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(CMTimeRange.AsValuedListMarshaler.class) List<CMTimeRange>'
                    tracks:
                        type: NSArray<AVAssetTrack>
            '-insertEmptyTimeRange:':
                trim_after_first_colon: true
            '-removeTimeRange:':
                trim_after_first_colon: true
            '-scaleTimeRange:toDuration:':
                trim_after_first_colon: true
            '-validateTrackSegments:error:':
                trim_after_first_colon: true
                visibility: protected # throws NSErrorException
                parameters:
                    trackSegments:
                        type: NSArray<AVCompositionTrackSegment>
    AVMutableMetadataItem: # DONE
        properties:
            'identifier':
                type: AVMetadataIdentifier
            'dataType':
                type: String # TODO   types defined in CMMetadata.h
            'key':
                type: AVMetadataKey
            'keySpace':
                type: AVMetadataKeySpace
            'value':
                type: NSObject
            'extraAttributes':
                type: AVMetadataExtraAttributes
        methods:
            '+metadataItem':
                name: create
    AVMutableTimedMetadataGroup: # DONE
        properties:
            'items':
                type: NSArray<AVMetadataItem>
    AVMutableVideoComposition: # DONE
        properties:
            'customVideoCompositorClass':
                type: 'Class<? extends AVVideoCompositing>'
            'instructions':
                type: NSArray<AVVideoCompositionInstruction>
        methods:
            '+videoComposition':
                name: create
            '+videoCompositionWithPropertiesOfAsset:':
                name: create
    AVMutableVideoCompositionInstruction: # DONE
        properties:
            'layerInstructions':
                type: NSArray<AVVideoCompositionLayerInstruction>
        methods:
            '+videoCompositionInstruction':
                name: create
    AVMutableVideoCompositionLayerInstruction: # DONE
        methods:
            '-setTransformRampFromStartTransform:toEndTransform:timeRange:':
                name: setTransformRamp
            '-setTransform:atTime:':
                trim_after_first_colon: true
            '-setOpacityRampFromStartOpacity:toEndOpacity:timeRange:':
                name: setOpacityRamp
            '-setOpacity:atTime:':
                trim_after_first_colon: true
            '-setCropRectangleRampFromStartCropRectangle:toEndCropRectangle:timeRange:':
                name: setCropRectangleRamp
            '-setCropRectangle:atTime:':
                trim_after_first_colon: true
            '+videoCompositionLayerInstructionWithAssetTrack:':
                name: create
            '+videoCompositionLayerInstruction':
                name: create
    AVOutputSettingsAssistant: # DONE
        properties:
            'audioSettings':
                type: AVAudioSettings
            'videoSettings':
                type: AVVideoSettings
        methods:
            '+availableOutputSettingsPresets':
                name: getAvailableOutputSettingsPresets
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(AVOutputSettingsPreset.AsListMarshaler.class) List<AVOutputSettingsPreset>'
            '+outputSettingsAssistantWithPreset:':
                name: create
                parameters:
                    presetIdentifier:
                        type: AVOutputSettingsPreset
    AVPlayer: # DONE
        methods:
            '-initWithURL:':
                name: init
            '-initWithPlayerItem:':
                name: init
            '+playerWithURL:':
                name: create
                return_type: AVPlayer
            '+playerWithPlayerItem:':
                name: create
                return_type: AVPlayer
            '-replaceCurrentItemWithPlayerItem:':
                name: replaceCurrentItem
            '-currentTime':
                property: true
            '-seekToDate:':
                trim_after_first_colon: true
            '-seekToDate:completionHandler:':
                trim_after_first_colon: true
            '-seekToTime.*':
                trim_after_first_colon: true
            '-setRate:time:atHostTime:':
                trim_after_first_colon: true
            '-prerollAtRate:completionHandler:':
                trim_after_first_colon: true
            '-addPeriodicTimeObserverForInterval:queue:usingBlock:':
                name: addPeriodicTimeObserver
            '-addBoundaryTimeObserverForTimes:queue:usingBlock:':
                name: addBoundaryTimeObserver
                parameters:
                    times:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(CMTime.AsValuedListMarshaler.class) List<CMTime>'
            '-removeTimeObserver:':
                trim_after_first_colon: true
            '-setMediaSelectionCriteria:forMediaCharacteristic:':
                trim_after_first_colon: true
            '-mediaSelectionCriteriaForMediaCharacteristic:':
                name: getMediaSelectionCriteria
    AVPlayerItem: # DONE
        properties:
            'tracks':
                type: NSArray<AVPlayerItemTrack>
            'timedMetadata':
                type: NSArray<AVMetadataItem>
            'automaticallyLoadedAssetKeys':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            'seekableTimeRanges':
                type: '@org.robovm.rt.bro.annotation.Marshaler(CMTimeRange.AsValuedListMarshaler.class) List<CMTimeRange>'
            'textStyleRules':
                type: NSArray<AVTextStyleRule>
            'loadedTimeRanges':
                type: '@org.robovm.rt.bro.annotation.Marshaler(CMTimeRange.AsValuedListMarshaler.class) List<CMTimeRange>'
            'outputs':
                type: NSArray<AVPlayerItemOutput>
        methods:
            '-initWithURL:':
                name: init
            '-initWithAsset:':
                name: init
            '-initWithAsset:automaticallyLoadedAssetKeys:':
                name: init
                parameters:
                    automaticallyLoadedAssetKeys:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+playerItemWithURL:':
                name: create
            '+playerItemWithAsset:':
                name: create
            '+playerItemWithAsset:automaticallyLoadedAssetKeys:':
                name: create
                parameters:
                    automaticallyLoadedAssetKeys:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '-currentTime':
                property: true
            '-seekToTime.*':
                trim_after_first_colon: true
            '-currentDate':
                property: true
            '-seekToDate.*':
                trim_after_first_colon: true
            '-stepByCount:':
                trim_after_first_colon: true
            '-selectMediaOption:inMediaSelectionGroup:':
                trim_after_first_colon: true
            '-selectMediaOptionAutomaticallyInMediaSelectionGroup:':
                name: selectMediaOptionAutomatically
            '-selectedMediaOptionInMediaSelectionGroup:':
                name: getSelectedMediaOption
            '-accessLog':
                property: true
            '-errorLog':
                property: true
            '-addOutput:':
                trim_after_first_colon: true
            '-removeOutput:':
                trim_after_first_colon: true
    AVPlayerItemAccessLog: # DONE
        properties:
            'events':
                type: NSArray<AVPlayerItemAccessLogEvent>
        methods:
            '-extendedLogData':
                property: true
    AVPlayerItemAccessLogEvent: {} # DONE
    AVPlayerItemErrorLog: # DONE
        properties:
            'events':
                type: NSArray<AVPlayerItemErrorLogEvent>
        methods:
            '-extendedLogData':
                property: true
    AVPlayerItemErrorLogEvent: {} # DONE
    AVPlayerItemLegibleOutput: # DONE
        properties:
            'textStylingResolution':
                type: AVPlayerItemLegibleOutputTextStylingResolution
        methods:
            '-setDelegate:queue:':
                trim_after_first_colon: true
            '-initWithMediaSubtypesForNativeRepresentation:':
                name: init
                parameters:
                    subtypes:
                        type: "NSArray<NSNumber>"
    AVPlayerItemMetadataOutput: # DONE
        methods:
            '-initWithIdentifiers:':
                name: init
                parameters:
                    identifiers:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataIdentifier.AsListMarshaler.class) List<AVMetadataIdentifier>'
            '-setDelegate:queue:':
                trim_after_first_colon: true
    AVPlayerItemOutput: # DONE
        methods:
            '-itemTimeForHostTime:':
                name: getItem
            '-itemTimeForMachAbsoluteTime:':
                name: getItem
    AVPlayerItemTrack: {} # DONE
    AVPlayerItemVideoOutput: # DONE
        methods:
            '-initWithPixelBufferAttributes:':
                name: init
                parameters:
                    pixelBufferAttributes:
                        type: "NSDictionary<NSString, ?>"
            '-hasNewPixelBufferForItemTime:':
                name: hasNewPixelBuffer
            '-copyPixelBufferForItemTime:itemTimeForDisplay:':
                name: copyPixelBuffer
            '-setDelegate:queue:':
                trim_after_first_colon: true
            '-requestNotificationOfMediaDataChangeWithAdvanceInterval:':
                name: requestNotificationOfMediaDataChange
    AVPlayerLayer: # DONE
        properties:
            'videoGravity':
                type: AVLayerVideoGravity
        methods:
            '+playerLayerWithPlayer:':
                name: create
    AVPlayerMediaSelectionCriteria: # DONE
        properties:
            'preferredLanguages':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            'preferredMediaCharacteristics':
                type: '@org.robovm.rt.bro.annotation.Marshaler(AVMediaCharacteristic.AsListMarshaler.class) List<AVMediaCharacteristic>'
        methods:
            '-initWithPreferredLanguages:preferredMediaCharacteristics:':
                name: init
                parameters:
                    preferredLanguages:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
                    preferredMediaCharacteristics:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMediaCharacteristic.AsListMarshaler.class) List<AVMediaCharacteristic>'
    AVQueuePlayer: # DONE
        methods:
            '-initWithItems:':
                name: init
                parameters:
                    items:
                        type: NSArray<AVPlayerItem>
            '-items':
                property: true
                return_type: NSArray<AVPlayerItem>
            '-canInsertItem:afterItem:':
                trim_after_first_colon: true
            '-insertItem:afterItem:':
                trim_after_first_colon: true
            '-removeItem:':
                trim_after_first_colon: true
            '+queuePlayerWithItems:':
                name: create
                return_type: AVQueuePlayer
                parameters:
                    items:
                        type: NSArray<AVPlayerItem>
    AVSampleBufferDisplayLayer: # DONE
        properties:
            'videoGravity':
                type: AVLayerVideoGravity
        methods:
            '-enqueueSampleBuffer:':
                trim_after_first_colon: true
            '-requestMediaDataWhenReadyOnQueue:usingBlock:':
                trim_after_first_colon: true
    AVSpeechSynthesisVoice: # DONE
        methods:
            '+speechVoices':
                name: getSpeechVoices
                return_type: NSArray<AVSpeechSynthesisVoice>
            '+currentLanguageCode':
                name: getCurrentLanguageCode
            '+voiceWithLanguage:':
                name: create
    AVSpeechSynthesizer: # DONE
        methods:
            '-speakUtterance:':
                name: enqueueSpeakUtterance
            '-stopSpeakingAtBoundary:':
                name: stopSpeaking
            '-pauseSpeakingAtBoundary:':
                name: pauseSpeaking
    AVSpeechUtterance: # DONE
        methods:
            '-initWithString:':
                name: init
            '+speechUtteranceWithString:':
                name: create
    AVSynchronizedLayer: # DONE
        methods:
            '+synchronizedLayerWithPlayerItem:':
                name: create
    AVTextStyleRule: # DONE
        properties:
            'textMarkupAttributes':
                type: "NSDictionary<NSString, ?>"
        methods:
            '-init.*':
                name: init
                parameters:
                    textMarkupAttributes:
                        type: "NSDictionary<NSString, ?>"
            '+propertyListForTextStyleRules:':
                name: createPropertyList
                parameters:
                    textStyleRules:
                        type: NSArray<AVTextStyleRule>
            '+textStyleRulesFromPropertyList:':
                name: createTextStyleRulesArray
                return_type: NSArray<AVTextStyleRule>
            '+textStyleRuleWithTextMarkupAttributes:':
                name: create
                parameters:
                    textMarkupAttributes:
                        type: "NSDictionary<NSString, ?>"
            '+textStyleRuleWithTextMarkupAttributes:textSelector:':
                name: create
                parameters:
                    textMarkupAttributes:
                        type: "NSDictionary<NSString, ?>"
    AVTimedMetadataGroup: # DONE
        properties:
            'items':
                type: NSArray<AVMetadataItem>
        methods:
            '-initWithItems:timeRange:':
                name: init
                parameters:
                    items:
                        type: NSArray<AVMetadataItem>
            '-init.*':
                name: init
            '-copyFormatDescription':
                name: getFormatDescription
    AVURLAsset: # DONE
        methods:
            '-initWithURL:options:':
                name: init
                parameters:
                    options:
                        type: AVURLAssetOptions
            '+audiovisualTypes':
                property: true
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+audiovisualMIMETypes':
                property: true
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            '+isPlayableExtendedMIMEType:':
                trim_after_first_colon: true
            '+URLAssetWithURL:options:':
                name: create
                parameters:
                    options:
                        type: AVURLAssetOptions
            '-compatibleTrackForCompositionTrack:':
                name: getCompatibleTrack
    AVVideoComposition: # DONE
        properties:
            'instructions':
                type: NSArray<AVVideoCompositionInstruction>
            'customVideoCompositorClass':
                type: 'Class<? extends AVVideoCompositing>'
        methods:
            '+videoCompositionWithPropertiesOfAsset:':
                name: create
            '-isValidForAsset:timeRange:validationDelegate:':
                name: isValid
    AVVideoCompositionCoreAnimationTool: # DONE
        methods:
            '+videoCompositionCoreAnimationToolWithAdditionalLayer:asTrackID:':
                name: create
            '+videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:inLayer:':
                name: create
            '+videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers:inLayer:':
                name: create
                parameters:
                    videoLayers:
                        type: NSArray<CALayer>
    AVVideoCompositionInstruction: # DONE
        properties:
            'layerInstructions':
                type: NSArray<AVVideoCompositionLayerInstruction>
            'requiredSourceTrackIDs':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsIntegerListMarshaler.class) List<Integer>'
    AVVideoCompositionLayerInstruction: # DONE
        methods:
            '-getTransformRampForTime:startTransform:endTransform:timeRange:':
                name: getTransformRamp
                visibility: protected
                parameters:
                    startTransform:
                        type: CGAffineTransform.CGAffineTransformPtr
                    endTransform:
                        type: CGAffineTransform.CGAffineTransformPtr
                    timeRange:
                        type: CMTimeRange.CMTimeRangePtr
            '-getOpacityRampForTime:startOpacity:endOpacity:timeRange:':
                name: getOpacityRamp
                visibility: protected
                parameters:
                    timeRange:
                        type: CMTimeRange.CMTimeRangePtr
            '-getCropRectangleRampForTime:startCropRectangle:endCropRectangle:timeRange:':
                name: getCropRectangleRamp
                visibility: protected
                parameters:
                    startCropRectangle:
                        type: CGRect.CGRectPtr
                    endCropRectangle:
                        type: CGRect.CGRectPtr
                    timeRange:
                        type: CMTimeRange.CMTimeRangePtr
    AVVideoCompositionRenderContext: {} # DONE

protocols:
    AVAssetResourceLoaderDelegate: # DONE
        methods:
            '-resourceLoader:shouldWaitForLoadingOfRequestedResource:':
                name: shouldWait
            '-resourceLoader:didCancelLoadingRequest:':
                name: didCancel
    AVAsynchronousKeyValueLoading: # DONE
        methods: 
            '-loadValuesAsynchronouslyForKeys:completionHandler:':
                name: loadValuesAsynchronously
                parameters:
                    keys:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(AVMetadataKey.AsListMarshaler.class) List<AVMetadataKey>'
            '-statusOfValueForKey:error:':
                name: getStatusOfValue
                parameters:
                    key:
                        type: AVMetadataKey
    AVAudio3DMixing: {}
    AVAudioMixing: {}
    AVAudioStereoMixing: {}
    AVAudioPlayerDelegate: # DONE
        methods:
            '-audioPlayerDidFinishPlaying:successfully:':
                name: didFinishPlaying
            '-audioPlayerDecodeErrorDidOccur:error:':
                name: decodeErrorDidOccur
            '-audioPlayerBeginInterruption:':
                name: beginInterruption
            '-audioPlayerEndInterruption:withOptions:':
                name: endInterruptionWithOptions
            '-audioPlayerEndInterruption:withFlags:':
                name: endInterruptionWithFlags
            '-audioPlayerEndInterruption:':
                name: endInterruption
    AVAudioRecorderDelegate: # DONE
        methods:
            '-audioRecorderDidFinishRecording:successfully:':
                name: didFinishRecording
            '-audioRecorderEncodeErrorDidOccur:error:':
                name: encodeErrorDidOccur
            '-audioRecorderBeginInterruption:':
                name: beginInterruption
            '-audioRecorderEndInterruption:withOptions:':
                name: endInterruptionWithOptions
            '-audioRecorderEndInterruption:withFlags:':
                name: endInterruptionWithFlags
            '-audioRecorderEndInterruption:':
                name: endInterruption
    AVAudioSessionDelegate: # DONE
        methods:
            '-endInterruptionWithFlags:':
                name: endInterruption
                parameters:
                    flags:
                        type: AVAudioSessionInterruptionFlag
            '-inputIsAvailableChanged:':
                name: inputAvailabilityChanged
    AVCaptureAudioDataOutputSampleBufferDelegate: # DONE
        methods:
            '-captureOutput:didOutputSampleBuffer:fromConnection:':
                name: didOutputSampleBuffer  
    AVCaptureFileOutputRecordingDelegate: # DONE
        methods:
            '-captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:':
                name: didStartRecording
                parameters:
                    connections:
                        type: NSArray<AVCaptureConnection>
            '-captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:':
                name: didFinishRecording
                parameters:
                    connections:
                        type: NSArray<AVCaptureConnection>
    AVCaptureMetadataOutputObjectsDelegate: # DONE
        methods:
            '-captureOutput:didOutputMetadataObjects:fromConnection:':
                name: didOutputMetadataObjects
                parameters:
                    metadataObjects:
                        type: NSArray<AVMetadataObject>
    AVCaptureVideoDataOutputSampleBufferDelegate: # DONE
        methods:
            '-captureOutput:didOutputSampleBuffer:fromConnection:':
                name: didOutputSampleBuffer
            '-captureOutput:didDropSampleBuffer:fromConnection:':
                name: didDropSampleBuffer
    AVPlayerItemLegibleOutputPushDelegate: # DONE
        methods:
            '-legibleOutput:didOutputAttributedStrings:nativeSampleBuffers:forItemTime:':
                name: didOutputAttributedStrings
                parameters:
                    strings:
                        type: NSArray<NSAttributedString>
                    nativeSamples:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<CMSampleBuffer>'
    AVPlayerItemMetadataOutputPushDelegate: # DONE
        methods:
            '-metadataOutput:didOutputTimedMetadataGroups:fromPlayerItemTrack:':
                name: didOutputTimedMetadataGroups
                parameters:
                    groups:
                        type: NSArray<AVTimedMetadataGroup>
    AVPlayerItemOutputPullDelegate: # DONE
        methods:
            '-outputMediaDataWillChange:':
                name: mediaDataWillChange
            '-outputSequenceWasFlushed:':
                name: sequenceWasFlushed
    AVPlayerItemOutputPushDelegate: # DONE
        methods:
            '-outputSequenceWasFlushed:':
                name: wasFlushed
    AVSpeechSynthesizerDelegate: # DONE
        methods:
            '-speechSynthesizer:didStartSpeechUtterance:':
                name: didStartSpeechUtterance
            '-speechSynthesizer:didFinishSpeechUtterance:':
                name: didFinishSpeechUtterance
            '-speechSynthesizer:didPauseSpeechUtterance:':
                name: didPauseSpeechUtterance
            '-speechSynthesizer:didContinueSpeechUtterance:':
                name: didContinueSpeechUtterance
            '-speechSynthesizer:didCancelSpeechUtterance:':
                name: didCancelSpeechUtterance
            '-speechSynthesizer:willSpeakRangeOfSpeechString:utterance:':
                name: willSpeak
    AVVideoCompositionValidationHandling: # DONE
        methods:
            '-videoComposition:shouldContinueValidatingAfterFindingInvalidValueForKey:':
                name: shouldContinueValidatingAfterFindingInvalidValue
            '-videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:':
                name: shouldContinueValidatingAfterFindingEmptyTimeRange
            '-videoComposition:shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:':
                name: shouldContinueValidatingAfterFindingInvalidTimeRange
            '-videoComposition:shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:layerInstruction:asset:':
                name: shouldContinueValidatingAfterFindingInvalidTrackID
    AVVideoCompositing: # DONE
        properties:
            'sourcePixelBufferAttributes':
                type: "NSDictionary<NSString, ?>"
            'requiredPixelBufferAttributesForRenderContext':
                type: "NSDictionary<NSString, ?>"
        methods:
            '-renderContextChanged:':
                trim_after_first_colon: true
            '-startVideoCompositionRequest:':
                trim_after_first_colon: true

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?AV.*):
        class: AVFoundation
        name: 'Function__#{g[0]}'

values:
    AVFoundationErrorDomain:
        class: AVError
        name: getClassDomain

    # AVAudioSession
    AVAudioSessionCategory(.*):
        class: AVAudioSessionCategory
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVAudioSessionLocation(.*):
        class: AVAudioSessionLocation
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVAudioSessionMode(.*):
        class: AVAudioSessionMode
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVAudioSessionOrientation(.*):
        class: AVAudioSessionOrientation
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVAudioSessionPolarPattern(.*):
        class: AVAudioSessionPolarPattern
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVAudioSessionPort(.*):
        class: AVAudioSessionPort
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVAudioSession(.*Notification):
        class: AVAudioSession
        name: '#{g[0]}'
        type: NSString
    AVAudioSessionInterruption(.*Key):
        class: AVAudioSessionInterruptionNotificationUserInfo
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    AVAudioSessionRouteChange(.*Key):
        class: AVAudioSessionRouteChangeNotificationUserInfo
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    AVAudioSession(SilenceSecondaryAudioHintTypeKey):
        class: AVAudioSession
        name: '#{g[0]}'
        type: NSString
        visibility: protected

    # AVLayer
    AVLayerVideoGravity(.*):
        class: AVLayerVideoGravity
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected

    # AVMedia
    AVMediaCharacteristic(.*):
        class: AVMediaCharacteristic
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected

    # AVMetadataItem
    AVMetadataCommonIdentifier(.*):
        class: AVMetadataIdentifierCommon
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVMetadataIdentifier(.*)UserData(.*):
        class: 'AVMetadataIdentifier#{g[0]}UserData'
        name: '#{g[1]}Value'
        type: NSString
        visibility: protected
    AVMetadataIdentifier(.*)Metadata(.*):
        class: 'AVMetadataIdentifier#{g[0]}Metadata'
        name: '#{g[1]}Value'
        type: NSString
        visibility: protected
    AVMetadataObjectType(.*):
        class: AVMetadataObjectType
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVMetadataKeySpace(.*):
        class: AVMetadataKeySpace
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVMetadataFormat(.*):
        class: AVMetadataFormat
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVMetadataCommonKey(.*):
        class: AVMetadataKeyCommon
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVMetadata(.*)MetadataKey(.*):
        class: 'AVMetadataKey#{g[0]}Metadata'
        name: '#{g[1]}Value'
        type: NSString
        visibility: protected
    AVMetadata(.*)UserDataKey(.*):
        class: 'AVMetadataKey#{g[0]}UserData'
        name: '#{g[1]}Value'
        type: NSString
        visibility: protected
    AVMetadataExtraAttribute(.*):
        class: AVMetadataExtraAttributes
        name: '#{g[0]}'
        type: NSString
        visibility: protected

    # AVOutputSettingsAssistant
    AVOutputSettingsPreset(.*):
        class: AVOutputSettingsPreset
        name: '_#{g[0]}Value'
        type: NSString
        visibility: protected

    # AVPlayerItemLegibleOutput
    AVPlayerItemLegibleOutputTextStylingResolution(.*):
        class: AVPlayerItemLegibleOutputTextStylingResolution
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected

    # AVURLAsset
    AVURLAsset(.*Key):
        class: AVURLAssetOptions
        name: '#{g[0]}'
        type: NSString
        visibility: protected


    # Constants
    AVFileType(3.*):
        class: AVMediaType
        name: '_#{g[0]}Value'
        type: NSString
        visibility: protected
    AVFileType(.*):
        class: AVFileType
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected

    # AudioSettings
    AVAudioBitRateStrategy_(.*):
        class: AVAudioBitRateStrategy
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVAudioTimePitchAlgorithm(.*):
        class: AVAudioTimePitchAlgorithm
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVSampleRateConverter(.*Key):
        class: AVSampleRateConverterSettings
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    AVSampleRateConverterAlgorithm_(.*):
        class: AVSampleRateConverterAlgorithm
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVEncoder(.*Key):
        class: AVAudioEncoderSettings
        name: '#{g[0]}'
        type: NSString
        visibility: protected
    AV((ChannelLayout|FormatID|SampleRate|NumberOfChannels)Key):
        class: AVAudioSettings
        name: '#{g[0]}'
        type: NSString
        visibility: protected 
    AVLinearPCM(.*):
        class: AVAudioSettings
        name: '#{g[0]}'
        type: NSString
        visibility: protected 

    # VideoSettings
    AVMediaType(.*):
        class: AVMediaType
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVVideo(CleanApertureKey):
        class: AVVideoSettings
        name: '#{g[0]}'
        type: NSString
        visibility: protected 
    AVVideoCleanAperture(.*Key):
        class: AVVideoCleanAperture
        name: '#{g[0]}'
        type: NSString
        visibility: protected  
    AVVideo((AverageBitRate|Quality|MaxKeyFrameInterval|MaxKeyFrameIntervalDuration)Key):
        class: AVVideoCompressionSettings
        name: '#{g[0]}'
        type: NSString
        visibility: protected 
    AVVideo(.*Key):
        class: AVVideoSettings
        name: '#{g[0]}'
        type: NSString
        visibility: protected        
    AVVideoCodec(.*):
        exclude: true
    AVVideoScalingMode(.*):
        class: AVVideoScalingMode
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVVideoProfileLevel(.*):
        class: AVVideoProfileLevel
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    AVVideoH264EntropyMode(.*):
        class: AVVideoH264EntropyMode
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected


    AVFormat(.*)Key:
        class: AVFoundation
        name: "AVFormat#{g[0]}Key"
        
    AVCoreAnimation(BeginTimeAtZero):
        class: AVFoundation
        name: "AVCoreAnimation#{g[0]}"
        
    AVAssetExportPreset(.*):
        class: AVFoundation
        name: "AVAssetExportPreset#{g[0]}"
    AVAssetImageGenerator(.*):
        class: AVFoundation
        name: "AVAssetImageGenerator#{g[0]}"
    AVTrackAssociationType(.*):
        class: AVFoundation
        name: "AVTrackAssociationType#{g[0]}"
        
    AVCaptureDevice(.*)Notification:
        class: AVFoundation
        name: "AVCaptureDevice#{g[0]}Notification"
    AVCapture(MaxAvailableTorchLevel):
        class: AVFoundation
        name: "AVCapture#{g[0]}"
        
    AVCaptureSession(.*)Notification:
        class: AVFoundation
        name: "AVCaptureSession#{g[0]}Notification"
    AVCaptureSession(.*)Key:
        class: AVFoundation
        name: "AVCaptureSession#{g[0]}Key"
    AVCaptureSessionPreset(.*):
        class: AVFoundation
        name: "AVCaptureSessionPreset#{g[0]}"
    AVCapture(.*)Notification:
        class: AVFoundation
        name: "AVCapture#{g[0]}Notification"
        
    AVError(.*)Key:
        class: AVFoundation
        name: "AVError#{g[0]}Key"
        
    AVPlayerItem(.*)Notification:
        class: AVFoundation
        name: "AVPlayerItem#{g[0]}Notification"
    AVPlayerItem(.*)Key:
        class: AVFoundation
        name: "AVPlayerItem#{g[0]}Key"
        
    AVPlayerItemLegibleOutput(.*):
        class: AVFoundation
        name: "AVPlayerItemLegibleOutput#{g[0]}"
        
    AVSpeechUtterance(.*):
        class: AVFoundation
        name: "AVSpeechUtterance#{g[0]}"
    

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?AV.*):
        class: AVFoundation
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?AV.*):
        class: AVFoundation
        name: 'Constant__#{g[0]}'
