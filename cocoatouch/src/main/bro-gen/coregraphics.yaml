package: org.robovm.apple.coregraphics
include: [corefoundation.yaml, foundation.yaml, uikit.yaml]
library: CoreGraphics
framework: CoreGraphics
clang_args: ['-x', 'objective-c']
header: /System/Library/Frameworks/CoreGraphics.framework/Headers/CoreGraphics.h
typedefs:
    Boolean: boolean
    CGFloat: MachineFloat
    CGGlyph: short
private_typedefs:
    '__CFString *': String
    '__CFString **': 'NSString.NSStringPtr'
    '__CFData *': NSData
    '__CFURL *': NSURL
    '__CFDictionary *': 'NSDictionary<?, ?>'
    '__CFArray *': 'NSArray<?>'

enums:
    CGBitmapInfo: {}
    CGBlendMode: {}
    CGColorRenderingIntent: {}
    CGColorSpaceModel: {}
    CGErrorCode: {first: kCGErrorSuccess}
    CGFontPostScriptFormat: {}
    CGGradientDrawingOptions: {first: kCGGradientDrawsBeforeStartLocation, bits: true, marshaler: Bits.AsMachineSizedIntMarshaler}
    CGImageAlphaInfo: {type: MachineUInt}
    CGInterpolationQuality: {}
    CGLineCap: {}
    CGLineJoin: {}
    CGPathDrawingMode: {}
    CGPathElementType: {}
    CGPatternTiling: {}
    CGPDFBox: {}
    CGPDFDataFormat: {}
    CGPDFObjectType: {}
    CGRectEdge: {prefix: CGRect, suffix: Edge, type: MachineUInt}
    CGTextDrawingMode: {}
    CGTextEncoding: {}

classes:
    CoreGraphics:
        visibility: ''

    # Structs
    CGAffineTransform: {}
    CGFunctionCallbacks: {visibility: ''}
    CGPathElement: {visibility: ''}
    CGPatternCallbacks: {visibility: ''}
    CGPoint: {}
    CGRect: {}
    CGSize: {}
    CGVector: {}

    # Opaque types
    CGBitmapContext:
        extends: CGContext
    CGColor:
        extends: CFType
    CGColorSpace:
        extends: CFType
    CGContext:
        extends: CFType
    CGDataConsumer:
        extends: CFType
    CGDataProvider:
        extends: CFType
    CGFont:
        extends: CFType
    CGFunction:
        extends: CFType
    CGGradient:
        extends: CFType
    CGImage:
        extends: CFType
    CGLayer:
        extends: CFType
    CGMutablePathRef:
        name: CGMutablePath
        extends: CGPath
    CGPath:
        extends: CFType
    CGPattern:
        extends: CFType
    CGPDFArray: {}
    CGPDFContentStream: {}
    CGPDFContext:
        extends: CGContext
    CGPDFDictionary: {}
    CGPDFDocument:
        extends: CFType
    CGPDFObject: {}
    CGPDFOperatorTable: {}
    CGPDFPage:
        extends: CFType
    CGPDFScanner: {}
    CGPDFStream: {}
    CGPDFString: {}
    CGShading:
        extends: CFType

functions:
    (CG.*)GetTypeID:
        class: '#{g[0]}'
        name: getClassTypeID

    # CGAffineTransform
    CGAffineTransformMake:
        exclude: true
    CGAffineTransformMake(.*):
        class: CGAffineTransform
        name: 'create#{g[0]}'
        static: true
    CGAffineTransformEqualToTransform:
        class: CGAffineTransform
        name: equalsTo
    CGAffineTransform(.*):
        class: CGAffineTransform
        name: '#{g[0]}'

    # CGBitmapContext
    CGBitmapContext(CreateImage):
        class: CGBitmapContext
        name: toImage
        return_type: CGImage
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            context:
                type: CGBitmapContext
    CGBitmapContext(Create)WithData:
        class: CGBitmapContext
        name: '#{g[0]}'
        visibility: private
        return_type: CGBitmapContext
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            data:
                type: IntPtr
            releaseInfo:
                type: '@Pointer long'
    CGBitmapContext(Create):
        class: CGBitmapContext
        name: '#{g[0]}'
        static: true
        return_type: CGBitmapContext
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            data:
                type: IntPtr
    CGBitmapContext(GetData):
        class: CGBitmapContext
        name: '#{g[0]}'
        return_type: IntPtr
        parameters:
            context:
                type: CGBitmapContext
    CGBitmapContext(.*):
        class: CGBitmapContext
        name: '#{g[0]}'
        parameters:
            context:
                type: CGBitmapContext

    # CGColorSpace
    CGColorSpace(Retain|Release):
        exclude: true
    CGColorSpaceCreateWithPlatformColorSpace:
        # Not available on iOS
        exclude: true
    CGColorSpace(CreateCalibratedGray):
        class: CGColorSpace
        name: '#{g[0]}'
        static: true
        visibility: private
        return_type: CGColorSpace
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            whitePoint:
                type: '@Pointer long'
            blackPoint:
                type: '@Pointer long'
    CGColorSpace(CreateCalibratedRGB):
        class: CGColorSpace
        name: '#{g[0]}'
        static: true
        visibility: private
        return_type: CGColorSpace
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            whitePoint:
                type: '@Pointer long'
            blackPoint:
                type: '@Pointer long'
            gamma:
                type: '@Pointer long'
            matrix:
                type: '@Pointer long'
    CGColorSpace(CreateICCBased):
        class: CGColorSpace
        name: '#{g[0]}'
        static: true
        visibility: private
        return_type: CGColorSpace
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            range:
                type: '@Pointer long'
    CGColorSpace(CreateLab):
        class: CGColorSpace
        name: '#{g[0]}'
        static: true
        visibility: private
        return_type: CGColorSpace
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            whitePoint:
                type: '@Pointer long'
            blackPoint:
                type: '@Pointer long'
            range:
                type: '@Pointer long'
    CGColorSpace(CreateIndexed):
        class: CGColorSpace
        name: '#{g[0]}'
        static: true
        visibility: private
        return_type: CGColorSpace
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            colorTable:
                type: '@Pointer long'
    CGColorSpace(Create)WithName:
        class: CGColorSpace
        name: '#{g[0]}'
        static: true
        return_type: CGColorSpace
        return_marshaler: CFType.NoRetainMarshaler
    CGColorSpace(Create.*):
        class: CGColorSpace
        name: '#{g[0]}'
        static: true
        return_type: CGColorSpace
        return_marshaler: CFType.NoRetainMarshaler
    CGColorSpaceCopy(Name):
        class: CGColorSpace
        name: 'get#{g[0]}'
        return_marshaler: CFString.AsStringNoRetainMarshaler
    CGColorSpaceCopy(ICCProfile):
        class: CGColorSpace
        name: 'get#{g[0]}'
        return_marshaler: NSObject.NoRetainMarshaler
    CGColorSpace(GetColorTable):
        class: CGColorSpace
        name: '#{g[0]}'
        visibility: private
        parameters:
            table:
                type: '@Pointer long'
    CGColorSpace(.*):
        class: CGColorSpace
        name: '#{g[0]}'

    # CGColor
    CGColor(Retain|Release):
        exclude: true
    CGColor(CreateCopy).*:
        class: CGColor
        name: '#{g[0]}'
        static: true
        return_type: CGColor
        return_marshaler: CFType.NoRetainMarshaler
    CGColor(Create|CreateWithPattern):
        class: CGColor
        name: create
        visibility: private
        static: true
        return_type: CGColor
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            components:
                type: '@Pointer long'
    CGColor(GetComponents):
        class: CGColor
        name: '#{g[0]}'
        visibility: private
        static: true
    CGColorEqualToColor:
        class: CGColor
        name: equalsTo
    CGColor(.*):
        class: CGColor
        name: '#{g[0]}'

    # CGContext
    CGContext(Retain|Release):
        exclude: true
    CGContext(AddRects|AddLines|FillRects|StrokeLineSegments|ClipToRects):
        class: CGContext
        visibility: private
        name: '#{g[0]}'
    CGContext(SetLineDash):
        class: CGContext
        visibility: private
        name: '#{g[0]}'
        parameters:
            lengths:
                type: '@Pointer long'
    CGContext(SetFillColor|SetStrokeColor|SetFillPattern|SetStrokePattern):
        class: CGContext
        visibility: private
        name: '#{g[0]}'
        parameters:
            components:
                type: '@Pointer long'
    CGContextEO(.*):
        class: CGContext
        name: 'evenOdd#{g[0]}'
    CGContext(ShowGlyphs.*):
        class: CGContext
        visibility: private
        name: '#{g[0]}'
        parameters:
            g:
                type: '@Pointer long'
            glyphs:
                type: '@Pointer long'
    CGContext(ShowText.*):
        class: CGContext
        visibility: private
        name: '#{g[0]}'
        parameters:
            string:
                type: '@Pointer long'
    CGContext(SelectFont):
        class: CGContext
        visibility: private
        name: '#{g[0]}'
        parameters:
            name:
                type: '@Pointer long'
    CGContextCopy(Path):
        class: CGContext
        name: 'get#{g[0]}'
        return_type: CGPath
        return_marshaler: CFType.NoRetainMarshaler
    CGContext(StrokeRect)WithWidth:
        class: CGContext
        name: '#{g[0]}'
    CGContext(.*)WithColor:
        class: CGContext
        name: '#{g[0]}'
    CGContext(BeginTransparencyLayer)WithRect:
        class: CGContext
        name: '#{g[0]}'
    CGContext(.*):
        class: CGContext
        name: '#{g[0]}'

    # CGDataConsumer
    CGDataConsumer(Retain|Release):
        exclude: true
    CGDataConsumerCreate:
        exclude: true
    CGDataConsumer(Create).*:
        class: CGDataConsumer
        name: '#{g[0]}'
        static: true
        return_type: CGDataConsumer
        return_marshaler: CFType.NoRetainMarshaler
    CGDataConsumer(.*):
        class: CGDataConsumer
        name: '#{g[0]}'

    # CGDataProvider
    CGDataProvider(Retain|Release):
        exclude: true
    CGDataProviderCreate(Direct|Sequential|WithData):
        exclude: true
    CGDataProvider(Create)WithFilename:
        class: CGDataProvider
        name: '#{g[0]}'
        visibility: private
        static: true
        return_type: CGDataProvider
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            filename:
                type: '@Pointer long'
    CGDataProvider(Create).*:
        class: CGDataProvider
        name: '#{g[0]}'
        static: true
        return_type: CGDataProvider
        return_marshaler: CFType.NoRetainMarshaler
    CGDataProviderCopy(Data):
        class: CGDataProvider
        name: 'get#{g[0]}'
        return_type: NSData
        return_marshaler: NSObject.NoRetainMarshaler
    CGDataProvider(.*):
        class: CGDataProvider
        name: '#{g[0]}'

    # CGFont
    CGFont(Retain|Release):
        exclude: true
    CGFontCreate(WithPlatformFont|PostScriptSubset|PostScriptEncoding|CopyWithVariations):
        exclude: true
    CGFontCanCreatePostScriptSubset:
        exclude: true
    CGFontCopy(TableTags|TableForTag):
        exclude: true
    CGFont(Create.*):
        class: CGFont
        name: create
        return_type: CGFont
        return_marshaler: CFType.NoRetainMarshaler
        static: true
    CGFontCopy(FullName|PostScriptName):
        class: CGFont
        name: 'get#{g[0]}'
        return_marshaler: CFString.AsStringNoRetainMarshaler
    CGFontCopyGlyph(NameForGlyph):
        class: CGFont
        name: 'get#{g[0]}'
        return_marshaler: CFString.AsStringNoRetainMarshaler
        parameters:
            glyph:
                type: char
    CGFontCopy(Variations):
        class: CGFont
        name: 'get#{g[0]}'
        return_type: Map<String, NSNumber>
        return_marshaler: CFDictionary.AsStringMapMarshaler
    CGFontCopy(VariationAxes):
        class: CGFont
        name: 'get#{g[0]}'
        return_type: List<CGFontVariationAxis>
        return_marshaler: CGFontVariationAxis.AsListMarshaler
    CGFont(GetGlyphWithGlyphName):
        class: CGFont
        name: getGlyphForName
        return_type: char
    CGFont(GetGlyphAdvances):
        class: CGFont
        name: '#{g[0]}'
        visibility: private
    CGFont(GetGlyphBBoxes):
        class: CGFont
        name: '#{g[0]}'
        visibility: private
    CGFont(.*):
        class: CGFont
        name: '#{g[0]}'

    # CGFunction
    CGFunction(Retain|Release):
        exclude: true
    CGFunction(Create):
        class: CGFunction
        name: '#{g[0]}'
        visibility: private
        return_type: CGFunction
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            info:
                type: '@Pointer long'
    CGFunction(.*):
        class: CGFunction
        name: '#{g[0]}'

    # CGGradient
    CGGradient(Retain|Release):
        exclude: true
    CGGradient(Create).*:
        class: CGGradient
        name: '#{g[0]}'
        static: true
        visibility: private
        return_type: CGGradient
        marshaler: CFType.NoRetainMarshaler
        parameters:
            components:
                type: '@Pointer long'
            locations:
                type: '@Pointer long'
            colors:
                type: CFArray
    CGGradient(.*):
        class: CGGradient
        name: '#{g[0]}'

    # CGImage
    CGImage(Retain|Release):
        exclude: true
    CGImage(CreateCopy).*:
        class: CGImage
        name: '#{g[0]}'
        static: true
        return_type: CGImage
        return_marshaler: CFType.NoRetainMarshaler
    CGImage(Create|CreateWithMaskingColors|CreateWith.*DataProvider):
        class: CGImage
        name: '#{g[0]}'
        static: true
        visibility: private
        return_type: CGImage
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            components:
                type: '@Pointer long'
            decode:
                type: '@Pointer long'
    CGImageMaskCreate:
        class: CGImage
        name: createMask
        static: true
        visibility: private
        return_type: CGImage
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            decode:
                type: '@Pointer long'
    CGImage(Create.*):
        class: CGImage
        name: '#{g[0]}'
        static: true
        return_type: CGImage
        return_marshaler: CFType.NoRetainMarshaler
    CGImageGet(ShouldInterpolate):
        class: CGImage
        name: '#{g[0]}'
    CGImage(.*):
        class: CGImage
        name: '#{g[0]}'

    # CGLayer
    CGLayer(Retain|Release):
        exclude: true
    CGLayer(Create).*:
        class: CGLayer
        name: '#{g[0]}'
        static: true
        return_type: CGLayer
        return_marshaler: CFType.NoRetainMarshaler
    CGLayer(.*):
        class: CGLayer
        name: '#{g[0]}'

    # CGMutablePath
    CGPath(AddLines|AddRects):
        class: CGMutablePath
        name: '#{g[0]}'
        visibility: private
    CGPath(Add.*):
        class: CGMutablePath
        name: '#{g[0]}'
    CGPath(CreateMutable.*):
        class: CGMutablePath
        name: '#{g[0]}'
        static: true
        return_type: CGMutablePath
        return_marshaler: CFType.NoRetainMarshaler
    CGPath(CloseSubpath|MoveToPoint):
        class: CGMutablePath
        name: '#{g[0]}'

    # CGPath
    CGPath(Retain|Release):
        exclude: true
    CGPath(CreateCopyByDashingPath):
        class: CGPath
        name: '#{g[0]}'
        static: true
        visibility: private
        return_type: CGPath
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            lengths:
                type: '@Pointer long'
    CGPath(Create.*):
        class: CGPath
        name: '#{g[0]}'
        static: true
        return_type: CGPath
        return_marshaler: CFType.NoRetainMarshaler
    CGPath(Apply):
        class: CGPath
        name: '#{g[0]}'
        visibility: private
        parameters:
            info:
                type: '@Pointer long'
            function:
                type: '@Pointer long'
    CGPathEqualToPath:
        class: CGPath
        name: equalsTo
    CGPath(.*):
        class: CGPath
        name: '#{g[0]}'

    # CGPattern
    CGPattern(Retain|Release):
        exclude: true
    CGPattern(Create.*):
        class: CGPattern
        name: '#{g[0]}'
        static: true
        visibility: private
        return_type: CGPattern
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            info:
                type: '@Pointer long'
    CGPattern(.*):
        class: CGPattern
        name: '#{g[0]}'

    # CGPDFArray
    CGPDFArrayGetCount:
        class: CGPDFArray
        name: size
    CGPDFArrayGetNull:
        class: CGPDFArray
        name: isNull
    CGPDFArray(GetBoolean):
        class: CGPDFArray
        name: '#{g[0]}'
        visibility: private
        parameters:
            value:
                type: BooleanPtr
    CGPDFArray(Get.*):
        class: CGPDFArray
        name: '#{g[0]}'
        visibility: private
    CGPDFArray(.*):
        class: CGPDFArray
        name: '#{g[0]}'

    # CGPDFContentStream
    CGPDFContentStream(Retain|Release):
        exclude: true
    CGPDFContentStream(Create).*:
        class: CGPDFContentStream
        name: '#{g[0]}'
    CGPDFContentStream(GetStreams):
        class: CGPDFContentStream
        name: '#{g[0]}'
        return_type: List<CGPDFContentStream>
        return_marshaler: CGPDFContentStream.AsListMarshaler
    CGPDFContentStream(GetResource):
        class: CGPDFContentStream
        name: '#{g[0]}'
        parameters:
            category:
                type: String
                marshaler: StringMarshalers.AsAsciiZMarshaler
            name:
                type: String
                marshaler: StringMarshalers.AsAsciiZMarshaler
    CGPDFContentStream(.*):
        class: CGPDFContentStream
        name: '#{g[0]}'

    # CGPDFContext
    CGPDFContext(Create.*):
        class: CGPDFContext
        name: '#{g[0]}'
        static: true
        return_type: CGPDFContext
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            auxiliaryInfo:
                type: CGPDFContextOptions
    CGPDFContextClose:
        class: CGPDFContext
        name: closeContext
        parameters:
            context:
                type: CGPDFContext
    CGPDFContext(BeginPage):
        class: CGPDFContext
        name: '#{g[0]}'
        parameters:
            pageInfo:
                type: CGPDFBoxOptions
    CGPDFContext(.*):
        class: CGPDFContext
        name: '#{g[0]}'
        parameters:
            context:
                type: CGPDFContext

    # CGPDFDictionary
    CGPDFDictionaryApplyFunction:
        exclude: true
    CGPDFDictionaryGetCount:
        class: CGPDFDictionary
        name: size
    CGPDFDictionary(GetBoolean):
        class: CGPDFDictionary
        name: '#{g[0]}'
        visibility: private
        parameters:
            key:
                type: String
                marshaler: StringMarshalers.AsDefaultCharsetZMarshaler
            value:
                type: BooleanPtr
    CGPDFDictionary(Get.*):
        class: CGPDFDictionary
        name: '#{g[0]}'
        visibility: private
        parameters:
            key:
                type: String
                marshaler: StringMarshalers.AsDefaultCharsetZMarshaler
    CGPDFDictionary(.*):
        class: CGPDFDictionary
        name: '#{g[0]}'

    # CGPDFDocument
    CGPDFDocument(Retain|Release):
        exclude: true
    CGPDFDocument(GetCatalog|GetInfo|GetID):
        exclude: true
    CGPDFDocument(Create).*:
        class: CGPDFDocument
        name: '#{g[0]}'
        static: true
        return_type: CGPDFDocument
        return_marshaler: CFType.NoRetainMarshaler
    CGPDFDocument(GetVersion):
        class: CGPDFDocument
        name: '#{g[0]}'
        visibility: private
    CGPDFDocument(Unlock)WithPassword:
        class: CGPDFDocument
        name: '#{g[0]}'
        parameters:
            password:
                type: String
                marshaler: StringMarshalers.AsDefaultCharsetZMarshaler
    CGPDFDocument(.*):
        class: CGPDFDocument
        name: '#{g[0]}'

    # CGPDFObject
    CGPDFObject(GetValue):
        class: CGPDFObject
        name: '#{g[0]}'
        visibility: private
    CGPDFObject(.*):
        class: CGPDFObject
        name: '#{g[0]}'

    # CGPDFOperatorTable
    CGPDFOperatorTable(Retain|Release):
        exclude: true
    CGPDFOperatorTable(SetCallback):
        class: CGPDFOperatorTable
        name: '#{g[0]}'
        visibility: private
        parameters:
            name:
                type: String
                marshaler: StringMarshalers.AsAsciiZMarshaler
    CGPDFOperatorTable(.*):
        class: CGPDFOperatorTable
        name: '#{g[0]}'

    # CGPDFPage
    CGPDFPage(Retain|Release):
        exclude: true
    CGPDFPage(.*):
        class: CGPDFPage
        name: '#{g[0]}'

    # CGPDFScanner
    CGPDFScanner(Retain|Release):
        exclude: true
    CGPDFScanner(Create):
        class: CGPDFScanner
        name: '#{g[0]}'
        visibility: private
        parameters:
            info:
                type: '@Pointer long'
    CGPDFScanner(PopBoolean):
        class: CGPDFScanner
        name: '#{g[0]}'
        visibility: private
        parameters:
            value:
                type: BooleanPtr
    CGPDFScanner(Pop.*):
        class: CGPDFScanner
        name: '#{g[0]}'
        visibility: private
    CGPDFScanner(.*):
        class: CGPDFScanner
        name: '#{g[0]}'

    # CGPDFStream
    CGPDFStreamCopy(Data):
        class: CGPDFStream
        name: 'get#{g[0]}'
        visibility: private
        return_marshaler: NSObject.NoRetainMarshaler
    CGPDFStream(.*):
        class: CGPDFStream
        name: '#{g[0]}'

    # CGPDFString
    CGPDFStringGetBytePtr:
        exclude: true
    CGPDFStringGet(Length):
        class: CGPDFString
        name: '#{g[0]}'
    CGPDFStringCopy(TextString):
        class: CGPDFString
        name: 'get#{g[0]}'
        return_marshaler: CFString.AsStringNoRetainMarshaler
    CGPDFStringCopy(Date):
        class: CGPDFString
        name: 'get#{g[0]}'
        return_type: NSDate
        return_marshaler: NSObject.NoRetainMarshaler
    CGPDFString(.*):
        class: CGPDFString
        name: '#{g[0]}'

    # CGPoint
    CGPointMake:
        exclude: true
    CGPointMakeWithDictionaryRepresentation:
        class: CGPoint
        name: fromDictionary
        visibility: private
        parameters:
            dict:
                type: 'NSDictionary<NSString, NSNumber>'
    CGPointCreateDictionaryRepresentation:
        class: CGPoint
        name: toDictionary
        return_type: 'NSDictionary<NSString, NSNumber>'
    CGPoint(Apply).*:
        class: CGPoint
        name: '#{g[0]}'
    CGPointEqualToPoint:
        class: CGPoint
        name: equalsTo
    CGPoint(.*):
        class: CGPoint
        name: '#{g[0]}'

    # CGRect
    CGRectMake:
        exclude: true
    CGRectMakeWithDictionaryRepresentation:
        class: CGRect
        name: fromDictionary
        visibility: private
        parameters:
            dict:
                type: 'NSDictionary<NSString, NSNumber>'
    CGRectCreateDictionaryRepresentation:
        class: CGRect
        name: toDictionary
        return_type: 'NSDictionary<NSString, NSNumber>'
    CGRect(Contains|Intersects|Apply).*:
        class: CGRect
        name: '#{g[0]}'
    CGRectEqualToRect:
        class: CGRect
        name: equalsTo
    CGRect(.*):
        class: CGRect
        name: '#{g[0]}'

    # CGShading
    CGShading(Retain|Release):
        exclude: true
    CGShading(Create.*):
        class: CGShading
        name: '#{g[0]}'
        static: true
        return_type: CGShading
        return_marshaler: CFType.NoRetainMarshaler
    CGShading(.*):
        class: CGShading
        name: '#{g[0]}'

    # CGSize
    CGSizeMake:
        exclude: true
    CGSizeMakeWithDictionaryRepresentation:
        class: CGSize
        name: fromDictionary
        visibility: private
        parameters:
            dict:
                type: 'NSDictionary<NSString, NSNumber>'
    CGSizeCreateDictionaryRepresentation:
        class: CGSize
        name: toDictionary
        return_type: 'NSDictionary<NSString, NSNumber>'
    CGSize(Apply).*:
        class: CGSize
        name: '#{g[0]}'
    CGSizeEqualToSize:
        class: CGSize
        name: equalsTo
    CGSize(.*):
        class: CGSize
        name: '#{g[0]}'

    # CGVector
    CGVectorMake:
        exclude: true
    CGVector(.*):
        class: CGVector
        name: '#{g[0]}'
        static: true
        visibility: protected

    (k?CG.*):
        class: CoreGraphics
        name: '#{g[0]}'

values:
    # CGPDFContext
    kCGPDFContext(.*Box):
        dictionary: CGPDFBoxOptions
        name: '#{g[0]}'
        type: CFString
        methods:
            MediaBox:
                type: CGRect
            CropBox:
                type: CGRect
            BleedBox:
                type: CGRect
            TrimBox:
                type: CGRect
            ArtBox:
                type: CGRect
    kCGPDFContext(.*):
        dictionary: CGPDFContextOptions
        name: '#{g[0]}'
        type: CFString
        methods:
            Title:
                type: String
            Author:
                type: String
            Subject:
                type: String
            Keywords:
                type: String
            Creator:
                type: String
            OwnerPassword:
                type: String
            UserPassword:
                type: String
            EncryptionKeyLength:
                type: int
            AllowsPrinting:
                type: boolean
            AllowsCopying:
                type: boolean    

    # CGAffineTransform
    CGAffineTransform(.*):
        class: CGAffineTransform
        name: '#{g[0]}'

    # CGFont
    kCGFontVariationAxis(.*):
        dictionary: CGFontVariationAxis
        name: '#{g[0]}'
        type: CFString
        methods:
            Name:
                type: String
            MinValue:
                type: double
            MaxValue:
                type: double
            DefaultValue:
                type: double
    
    # CGPoint
    CGPoint(.*):
        class: CGPoint
        name: '#{g[0]}'

    # CGRect
    CGRect(.*):
        class: CGRect
        name: '#{g[0]}'

    # CGSize
    CGSize(.*):
        class: CGSize
        name: '#{g[0]}'

    # Make sure we don't miss any values if new ones are introduced in a later CoreGraphics
    (k?CG.*):
        class: CoreGraphics
        name: '#{g[0]}'


constants:
    (CGFLOAT_IS_DOUBLE|CGFLOAT_DEFINED|CGVECTOR_DEFINED):
        exclude: true

    # CGFont
    CGGlyph(Min|Max): # deprecated
        exclude: true
    kCG(FontIndex.*):
        class: CGFont
        name: '#{g[0]}'
    kCG(GlyphMax):
        class: CGFont
        name: '#{g[0]}'

    # Make sure we don't miss any constants if new ones are introduced in a later CoreGraphics
    (k?CG.*):
        class: CoreGraphics
        name: '#{g[0]}'
