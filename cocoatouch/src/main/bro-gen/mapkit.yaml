package: org.robovm.apple.mapkit
include: [foundation.yaml, corefoundation.yaml, coregraphics.yaml, corelocation.yaml, uikit.yaml, dispatch.yaml]
library: MapKit
framework: MapKit
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/MapKit.framework/Headers/MapKit.h
    - /System/Library/Frameworks/MapKit.framework/Headers/MKFoundation.h
typedefs:
    'void (^)(NSData *, NSError *)': '@Block VoidBlock2<NSData, NSError>'
    
enums:
    MKAnnotationViewDragState: { marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    MKDirectionsTransportType: { }
    MKDistanceFormatterUnits: { marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    MKDistanceFormatterUnitStyle: { marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    MKUserTrackingMode: {}
    MKOverlayLevel: {}
    MKPinAnnotationColor: { marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    MKMapType: { marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    MKErrorCode: { marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
        
categories:
    NSValueMapKitGeometryExtensions: # DONE
        methods:
            '-MKCoordinateValue':
                name: getCoordinateValue
            '-MKCoordinateSpanValue':
                name: getCoordinateSpanValue
            '+valueWithMKCoordinate:':
                name: create
            '+valueWithMKCoordinateSpan:':
                name: create
   
classes:
    MKError:
        extends: NSError

    # Structs:
    MKCoordinateSpan: {}
    MKCoordinateRegion: {}
    MKMapPoint: {}
    MKMapSize: {}
    MKMapRect: {}
    MKTileOverlayPath: {}

    MKAnnotationView: # DONE
        methods:
            '-init.*':
                name: init
            '-setSelected:animated:':
                trim_after_first_colon: true
            '-setDragState:animated:':
                trim_after_first_colon: true
    MKCircle: # DONE
        methods:
            '+circleWithCenterCoordinate:radius:':
                name: create
            '+circleWithMapRect:':
                name: create
    MKCircleRenderer: # DONE
        methods:
            '-init.*':
                name: init
    MKCircleView: # DONE
        methods:
            '-init.*':
                name: init
    MKDirections: # DONE
        methods:
            '-init.*':
                name: init
            '-calculateDirectionsWithCompletionHandler:':
                name: calculateDirections
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<MKDirectionsResponse, NSError>'
            '-calculateETAWithCompletionHandler:':
                name: calculateETA
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<MKETAResponse, NSError>'
    MKDirectionsRequest: # DONE
        methods:
            '-source':
                property: true
            '-destination':
                property: true
            '-initWithContentsOfURL:':
                name: init
            '+isDirectionsRequestURL:':
                trim_after_first_colon: true
    MKDirectionsResponse: # DONE
        properties:
            'routes':
                type: NSArray<MKRoute>
    MKETAResponse: {} # DONE
    MKGeodesicPolyline: # DONE
        methods:
            '+polylineWithPoints:count:':
                name: create
                visibility: private
            '+polylineWithCoordinates:count:':
                name: create
                visibility: private
    MKLocalSearch: # DONE
        methods:
            '-initWithRequest:':
                name: init
            '-startWithCompletionHandler:':
                name: start
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<MKLocalSearchResponse, NSError>'
    MKLocalSearchRequest: {} # DONE
    MKLocalSearchResponse: # DONE
        properties:
            'mapItems':
                type: NSArray<MKMapItem>
    MKMapCamera: # DONE
        methods:
            '+camera':
                name: create
            '+cameraLookingAtCenterCoordinate:fromEyeCoordinate:eyeAltitude:':
                name: create
    MKMapItem: # DONE
        properties:
            'isCurrentLocation':
                name: currentLocation
        methods:
            '-initWithPlacemark:':
                name: init
            '-openInMapsWithLaunchOptions:':
                name: openInMaps
                parameters:
                    launchOptions:
                        type: MKLaunchOptions
            '+mapItemForCurrentLocation':
                name: getMapItemForCurrentLocation
            '+openMapsWithItems:launchOptions:':
                name: openMaps
                parameters:
                    mapItems:
                        type: NSArray<MKMapItem>
                    launchOptions:
                        type: MKLaunchOptions
    MKMapSnapshot: # DONE
        methods:
            '-pointForCoordinate:':
                name: convertCoordinateToPoint
    MKMapSnapshotOptions: {} # DONE
    MKMapSnapshotter: # DONE
        methods:
            '-initWithOptions:':
                name: init
            '-startWithCompletionHandler:':
                name: start
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<MKMapSnapshot, NSError>'
            '-startWithQueue:completionHandler:':
                name: start
                parameters:
                    completionHandler:
                        type: '@Block VoidBlock2<MKMapSnapshot, NSError>'            
    MKMapView: # DONE
        properties:
            'annotations':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<? extends MKAnnotation>'
            'selectedAnnotations':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<? extends MKAnnotation>'
            'overlays':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<? extends MKOverlay>'
        methods:
            '-setRegion:animated:':
                trim_after_first_colon: true
            '-setCenterCoordinate:animated:':
                trim_after_first_colon: true
            '-regionThatFits:':
                name: getRegionThatFits
            '-setVisibleMapRect:animated:':
                trim_after_first_colon: true
            '-mapRectThatFits:':
                name: getMapRectThatFits
            '-setVisibleMapRect:edgePadding:animated:':
                trim_after_first_colon: true
            '-mapRectThatFits:edgePadding:':
                name: getMapRectThatFits
            '-setCamera:animated:':
                trim_after_first_colon: true
            '-convertCoordinate:toPointToView:':
                name: convertCoordinateToPointToView
            '-convertPoint:toCoordinateFromView:':
                name: convertPointToCoordinateFromView
            '-convertRegion:toRectToView:':
                name: convertRegionToRectToView
            '-convertRect:toRegionFromView:':
                name: convertRectToRegionFromView
            '-setUserTrackingMode:animated:':
                trim_after_first_colon: true
            '-addAnnotation:':
                trim_after_first_colon: true
            '-addAnnotations:':
                trim_after_first_colon: true
                parameters:
                    annotations:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<? extends MKAnnotation>'
            '-removeAnnotation:':
                trim_after_first_colon: true
            '-removeAnnotations:':
                trim_after_first_colon: true
                parameters:
                    annotations:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<? extends MKAnnotation>'
            '-annotationsInMapRect:':
                name: getAnnotations
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSSet.AsSetMarshaler.class) Set<? extends MKAnnotation>'
            '-viewForAnnotation:':
                name: getView
            '-dequeueReusableAnnotationViewWithIdentifier:':
                name: dequeueReusableAnnotationView
            '-selectAnnotation:animated:':
                trim_after_first_colon: true
            '-deselectAnnotation:animated:':
                trim_after_first_colon: true
            '-showAnnotations:animated:':
                trim_after_first_colon: true
                parameters:
                    annotations:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<? extends MKAnnotation>'
            '-addOverlay:level:':
                trim_after_first_colon: true
            '-addOverlays:level:':
                trim_after_first_colon: true
                parameters:
                    overlays:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<? extends MKOverlay>'
            '-removeOverlay:':
                trim_after_first_colon: true
            '-removeOverlays:':
                trim_after_first_colon: true
                parameters:
                    overlays:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<? extends MKOverlay>'
            '-insertOverlay:atIndex:level:':
                trim_after_first_colon: true
            '-insertOverlay:aboveOverlay:':
                name: insertOverlayAbove
            '-insertOverlay:belowOverlay:':
                name: insertOverlayBelow
            '-exchangeOverlay:withOverlay:':
                trim_after_first_colon: true
            '-overlaysInLevel:':
                name: getOverlays
                return_type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<? extends MKOverlay>'
            '-rendererForOverlay:':
                name: getOverlayRenderer
            '-viewForOverlay:':
                name: getOverlayView
            '-addOverlay:':
                trim_after_first_colon: true
            '-addOverlays:':
                trim_after_first_colon: true
                parameters:
                    overlays:
                        type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsListMarshaler.class) List<? extends MKOverlay>'
            '-insertOverlay:atIndex:':
                trim_after_first_colon: true
            '-exchangeOverlayAtIndex:withOverlayAtIndex:':
                name: exchangeOverlay
    MKMultiPoint: # DONE
        methods:
            '-points':
                name: getPoints0
                visibility: protected
            '-getCoordinates:range:':
                name: getCoordinates0
                visibility: protected
    MKOverlayPathRenderer: # DONE
        properties:
            'lineDashPattern':
                type: NSArray<NSNumber>
        methods:
            '-applyStrokePropertiesToContext:atZoomScale:':
                name: applyStrokeProperties
            '-applyFillPropertiesToContext:atZoomScale:':
                name: applyFillProperties
            '-strokePath:inContext:':
                trim_after_first_colon: true
            '-fillPath:inContext:':
                trim_after_first_colon: true
    MKOverlayPathView: # DONE
        properties:
            'lineDashPattern':
                type: NSArray<NSNumber>
        methods:
            '-applyStrokePropertiesToContext:atZoomScale:':
                name: applyStrokeProperties
            '-applyFillPropertiesToContext:atZoomScale:':
                name: applyFillProperties
            '-strokePath:inContext:':
                trim_after_first_colon: true
            '-fillPath:inContext:':
                trim_after_first_colon: true
    MKOverlayRenderer: # DONE
        methods:
            '-initWithOverlay:':
                name: init
            '-pointForMapPoint:':
                name: getPoint
            '-mapPointForPoint:':
                name: getMapPoint
            '-rectForMapRect:':
                name: getRect
            '-mapRectForRect:':
                name: getMapRect
            '-canDrawMapRect:zoomScale:':
                name: canDraw
            '-drawMapRect:zoomScale:inContext:':
                name: draw
            '-setNeedsDisplayInMapRect:':
                name: setNeedsDisplay
            '-setNeedsDisplayInMapRect:zoomScale:':
                name: setNeedsDisplay
    MKOverlayView: # DONE
        methods:
            '-initWithOverlay:':
                name: init
            '-pointForMapPoint:':
                name: getPoint
            '-mapPointForPoint:':
                name: getMapPoint
            '-rectForMapRect:':
                name: getRect
            '-mapRectForRect:':
                name: getMapRect
            '-canDrawMapRect:zoomScale:':
                name: canDraw
            '-drawMapRect:zoomScale:inContext:':
                name: draw
            '-setNeedsDisplayInMapRect:':
                name: setNeedsDisplay
            '-setNeedsDisplayInMapRect:zoomScale:':
                name: setNeedsDisplay
    MKPinAnnotationView: {} # DONE
    MKPlacemark: # DONE
        skip_def_constructor: true
        methods:
            '-initWithCoordinate:addressDictionary:':
                name: init
                parameters:
                    addressDictionary:
                        type: org.robovm.apple.addressbook.ABPersonAddress
    MKPointAnnotation: {} # DONE
    MKPolygon: # DONE
        properties:
            'interiorPolygons':
                type: NSArray<MKPolygon>
        methods:
            '+polygonWithPoints:count:':
                name: create
                visibility: private
            '+polygonWithPoints:count:interiorPolygons:':
                name: create
                visibility: private
                parameters:
                    interiorPolygons:
                        type: NSArray<MKPolygon>
            '+polygonWithCoordinates:count:':
                name: create
                visibility: private
            '+polygonWithCoordinates:count:interiorPolygons:':
                name: create
                visibility: private
                parameters:
                    interiorPolygons:
                        type: NSArray<MKPolygon>   
    MKPolygonRenderer: # DONE
        methods:
            '-initWithPolygon:':
                name: init
    MKPolygonView: # DONE
        methods:
            '-initWithPolygon:':
                name: init
    MKPolyline: # DONE
        methods:
            '+polylineWithPoints:count:':
                name: create
                visibility: private
            '+polylineWithCoordinates:count:':
                name: create
                visibility: private
    MKPolylineRenderer: # DONE
        methods:
            '-initWithPolyline:':
                name: init
    MKPolylineView: # DONE
        methods:
            '-initWithPolyline:':
                name: init
    MKRoute: # DONE
        properties:
            'advisoryNotices':
                type: '@org.robovm.rt.bro.annotation.Marshaler(NSArray.AsStringListMarshaler.class) List<String>'
            'steps':
                type: NSArray<MKRouteStep>
    MKRouteStep: {} # DONE
    MKShape: {} # DONE
    MKTileOverlay: # DONE
        methods:
            '-initWithURLTemplate:':
                name: init
            '-URLForTilePath:':
                name: getURL
            '-loadTileAtPath:result:':
                name: loadTile
    MKTileOverlayRenderer: # DONE
        methods:
            '-initWithTileOverlay:':
                name: init
    MKUserLocation: {} # DONE
    MKUserTrackingBarButtonItem: # DONE
        methods:
            '-initWithMapView:':
                name: init

protocols:
    MKAnnotation: {} # DONE
    MKMapViewDelegate: # DONE
        methods:
            '-mapView:regionWillChangeAnimated:':
                name: willChangeRegion
            '-mapView:regionDidChangeAnimated:':
                name: didChangeRegion
            '-mapViewWillStartLoadingMap:':
                name: willStartLoadingMap
            '-mapViewDidFinishLoadingMap:':
                name: didFinishLoadingMap
            '-mapViewDidFailLoadingMap:withError:':
                name: didFailLoadingMap
            '-mapViewWillStartRenderingMap:':
                name: willStartRenderingMap
            '-mapViewDidFinishRenderingMap:fullyRendered:':
                name: didFinishRenderingMap
            '-mapView:viewForAnnotation:':
                name: getAnnotationView
            '-mapView:didAddAnnotationViews:':
                name: didAddAnnotationViews
                parameters:
                    views:
                        type: NSArray<MKAnnotationView>
            '-mapView:annotationView:calloutAccessoryControlTapped:':
                name: calloutAccessoryControlTapped
            '-mapView:didSelectAnnotationView:':
                name: didSelectAnnotationView
            '-mapView:didDeselectAnnotationView:':
                name: didDeselectAnnotationView
            '-mapViewWillStartLocatingUser:':
                name: willStartLocatingUser
            '-mapViewDidStopLocatingUser:':
                name: didStopLocatingUser
            '-mapView:didUpdateUserLocation:':
                name: didUpdateUserLocation
            '-mapView:didFailToLocateUserWithError:':
                name: didFailToLocateUser
            '-mapView:annotationView:didChangeDragState:fromOldState:':
                name: didChangeDragState
            '-mapView:didChangeUserTrackingMode:animated:':
                name: didChangeUserTrackingMode
            '-mapView:rendererForOverlay:':
                name: getOverlayRenderer
            '-mapView:didAddOverlayRenderers:':
                name: didAddOverlayRenderers
                parameters:
                    renderers:
                        type: NSArray<MKOverlayRenderer>
            '-mapView:viewForOverlay:':
                name: getOverlayView
            '-mapView:didAddOverlayViews:':
                name: didAddOverlayViews
                parameters:
                    overlayViews:
                        type: NSArray<MKOverlayView>
    MKOverlay: # DONE
        methods:
            '-intersectsMapRect:':
                name: intersects
                
functions:
    # MKCoordinateRegion
    MKCoordinateRegionMake:
        class: MKCoordinateRegion
        name: create
        static: true
    MKCoordinateRegionMakeWithDistance:
        class: MKCoordinateRegion
        name: create
        static: true
    MKCoordinateRegionForMapRect:
        class: MKCoordinateRegion
        name: create
        static: true

    # MKMapPoint
    MKMapPointForCoordinate:
        class: MKMapPoint
        name: create
        static: true
    MKCoordinateForMapPoint:
        class: MKMapPoint
        name: toCoordinate
    MKMetersPerMapPointAtLatitude:
        class: MKMapPoint
        name: getMetersPerMapPoint
        static: true 
    MKMapPointsPerMeterAtLatitude:
        class: MKMapPoint
        name: getMapPointsPerMeter
        static: true
    MKMetersBetweenMapPoints:
        class: MKMapPoint
        name: getMetersBetween
        static: true
    MKMapPointMake:
        class: MKMapPoint
        name: create
        static: true
    MKMapPointEqualToPoint:
        class: MKMapPoint
        name: equalsPoint
    MKStringFromMapPoint:
        class: MKMapPoint
        name: asString

    # MKMapRect
    MKMapRectUnion:
        class: MKMapRect
        name: union
    MKMapRectIntersection:
        class: MKMapRect
        name: intersection
    MKMapRectInset:
        class: MKMapRect
        name: inset
    MKMapRectOffset:
        class: MKMapRect
        name: offset
    MKMapRectDivide:
        class: MKMapRect
        name: divide
    MKMapRectContainsPoint:
        class: MKMapRect
        name: contains
    MKMapRectContainsRect:
        class: MKMapRect
        name: contains
    MKMapRectIntersectsRect:
        class: MKMapRect
        name: intersects
    MKMapRectSpans180thMeridian:
        class: MKMapRect
        name: isSpanning180thMeridian
    MKMapRectRemainder:
        class: MKMapRect
        name: remainder
    MKMapRectEqualToRect:
        class: MKMapRect
        name: equals
    MKMapRectIsNull:
        class: MKMapRect
        name: isNull
    MKMapRectIsEmpty:
        class: MKMapRect
        name: isEmpty
    MKMapRectGet(.*):
        class: MKMapRect
        name: 'get#{g[0]}'
    MKMapRectMake:
        class: MKMapRect
        name: create
        static: true
    MKStringFromMapRect:
        class: MKMapRect
        name: asString

    # MKCoordinateSpan
    MKCoordinateSpanMake:
        class: MKCoordinateSpan
        name: create
        static: true

    # MKOverlayRenderer
    MKRoadWidthAtZoomScale:
        class: MKOverlayRenderer
        name: getRoadWidth

    # MKMapSize
    MKMapSizeMake:
        class: MKMapSize
        name: create
        static: true   
    MKMapSizeEqualToSize:
        class: MKMapSize
        name: equalsSize 
    MKStringFromMapSize:
        class: MKMapSize
        name: asString
 
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?MK.*):
        class: MapKit
        name: 'Function__#{g[0]}'

values:
    MKMapSize(.*):
        class: MKMapSize
        name: '#{g[0]}'
      
    MKMapRect(.*):
        class: MKMapRect
        name: '#{g[0]}'
        
    MKErrorDomain:
        class: MKError
        name: getClassDomain
        readonly: true
        
    MKLaunchOptions(.*Key):
        class: MKLaunchOptions
        name: '#{g[0]}'
        type: NSString
        visibility: protected
        
    MKLaunchOptionsDirectionsMode(.*):
        class: MKDirectionsMode
        name: '#{g[0]}Value'
        type: NSString
        visibility: protected
    
    MKAnnotationCalloutInfoDidChangeNotification: # Deprecated in favor of KVO notifications
        exclude: true

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?MK.*):
        class: MapKit
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?MK.*):
        class: MapKit
        name: 'Constant__#{g[0]}'