package: org.robovm.apple.coreservices
include: [foundation.yaml, corefoundation.yaml]
library: CFNetwork
framework: CFNetwork
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/CFNetwork.framework/Headers/CFNetwork.h
    - /System/Library/Frameworks/CFNetwork.framework/Headers/CFNetworkDefs.h
typedefs:
    'CFStreamError *': CFStreamError.CFStreamErrorPtr
private_typedefs:
    '__CFString *': String
    '__CFString **': NSString.NSStringPtr
    '__CFData *': NSData
    '__CFURL *': NSURL
    '__CFArray *': NSArray<?>
    '__CFError *': NSError
    '__CFReadStream *': NSInputStream
    '__CFWriteStream *': NSOutputStream
    
enums:
    CFHostInfoType: {}
    CFNetDiagnosticStatus: { first: kCFNetDiagnosticNoErr }
    CFNetServicesError: {}
    CFNetServiceMonitorType: { prefix: kCFNetServiceMonitor }
    CFNetServiceOptions: { first: kCFNetServiceFlagNoAutoRename, prefix: kCFNetServiceFlag, bits: true, marshaler: Bits.AsMachineSizedIntMarshaler }
    CFNetServiceBrowserFlags: { first: kCFNetServiceFlagMoreComing, bits: true, marshaler: Bits.AsMachineSizedIntMarshaler }
    CFNetworkErrors: {}
    CFStreamErrorCodeType: { first: kCFStreamErrorSOCKSSubDomainNone }
    CFHTTPStreamError: { first: kCFStreamErrorHTTPParseFailure }
    CFSocketStreamError: { first: kCFStreamErrorSOCKS5BadResponseAddr, prefix: kCFStreamError }
    CFSocketStreamError2: { first: kCFStreamErrorSOCKS4RequestFailed, prefix: kCFStreamError, merge_with: CFSocketStreamError }
    CFHTTPAuthenticationError: { first: kCFStreamErrorHTTPAuthenticationTypeUnsupported }

classes:
    __CFHost:
        name: CFHost
        extends: CFType
    CFHostClientContext:
        visibility: ''
        info:
            type: '@Pointer long'
    _CFHTTPAuthentication:
        name: CFHTTPAuthentication
        extends: CFType
    __CFHTTPMessage:
        name: CFHTTPMessage
        extends: CFType
    __CFNetDiagnostic:
        name: CFNetDiagnostic
        extends: CFType
    __CFNetService:
        name: CFNetService
        extends: CFType
    CFNetServiceClientContext:
        visibility: ''
        info:
            type: '@Pointer long'
    __CFNetServiceMonitor:
        name: CFNetServiceMonitor
        extends: CFType
    __CFNetServiceBrowser:
        name: CFNetServiceBrowser
        extends: CFType
    CFHTTPStream:
        extends: NSInputStream
    
    CFNetworkError:
        extends: NSError
    CFWinSockError:
        extends: NSError

protocols: {}

functions:
    (CF.*)GetTypeID:
        class: '#{g[0]}'
        name: getClassTypeID

    # CFFTPStream
    CFReadStreamCreateWithFTPURL:
        class: CFFTPStream
        name: createReadStream
        return_marshaler: NSObject.NoRetainMarshaler
    CFFTP(CreateParsedResourceListing):
        class: CFFTPStream
        name: '#{g[0]}'
        visibility: private
        parameters:
            buffer:
                type: '@Pointer long'
            parsed:
                type: 'NSDictionary.NSDictionaryPtr'
    CFWriteStreamCreateWithFTPURL:
        class: CFFTPStream
        name: createWriteStream
        return_marshaler: NSObject.NoRetainMarshaler
    
    # CFHost
    CFHost(Create)With.*:
        class: CFHost
        name: '#{g[0]}'
        visibility: protected
        return_marshaler: CFType.NoRetainMarshaler
    CFHost(CreateCopy):
        class: CFHost
        name: '#{g[0]}'
        visibility: protected
        return_marshaler: CFType.NoRetainMarshaler
    CFHost(StartInfoResolution):
        class: CFHost
        name: '#{g[0]}'
        throws: CFStreamErrorException
    CFHost(GetAddressing):
        class: CFHost
        name: '#{g[0]}'
        return_type: NSArray<NSData>
    CFHost(GetNames):
        class: CFHost
        name: '#{g[0]}'
        return_type: List<String>
        return_marshaler: CFArray.AsStringListMarshaler
    CFHost(GetReachability):
        class: CFHost
        name: '#{g[0]}'
    CFHost(SetClient):
        class: CFHost
        name: setCallback
        visibility: private
    CFHost(Schedule)WithRunLoop:
        class: CFHost
        name: scheduleInRunLoop
    CFHost(UnscheduleFromRunLoop):
        class: CFHost
        name: '#{g[0]}'
    CFStreamCreatePairWithSocketToCFHost:
        class: CFHost
        name: createSocketStreamPair
        visibility: private
    CFHost(.*):
        class: CFHost
        name: '#{g[0]}'

    # CFHTTPAuthentication
    CFHTTPAuthentication(Create)FromResponse:
        class: CFHTTPAuthentication
        name: '#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
    CFHTTPAuthentication(IsValid):
        class: CFHTTPAuthentication
        name: '#{g[0]}'
        throws: CFStreamErrorException
    CFHTTPAuthenticationCopy(Domains):
        class: CFHTTPAuthentication
        name: 'get#{g[0]}'
        return_type: NSArray<NSURL>
        return_marshaler: NSObject.NoRetainMarshaler
    CFHTTPAuthenticationCopy(.*):
        class: CFHTTPAuthentication
        name: 'get#{g[0]}'
        return_marshaler: CFString.AsStringNoRetainMarshaler
    CFHTTPAuthentication(.*):
        class: CFHTTPAuthentication
        name: '#{g[0]}'

    # CFHTTPMessage
    CFHTTPMessage(CreateRequest):
        class: CFHTTPMessage
        name: '#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            httpVersion:
                type: CFHTTPVersion
    CFHTTPMessage(CreateResponse):
        class: CFHTTPMessage
        name: '#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
        parameters:
            httpVersion:
                type: CFHTTPVersion
    CFHTTPMessage(CreateEmpty):
        class: CFHTTPMessage
        name: '#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
    CFHTTPMessage(CreateCopy):
        class: CFHTTPMessage
        name: '#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
    CFHTTPMessageCopy(Version):
        class: CFHTTPMessage
        name: 'get#{g[0]}'
        return_type: CFHTTPVersion
    CFHTTPMessageCopy(AllHeaderFields):
        class: CFHTTPMessage
        name: 'get#{g[0]}'
        return_type: Map<String, String>
        return_marshaler: CFDictionary.AsStringStringMapMarshaler
    CFHTTPMessageCopy(HeaderFieldValue|RequestMethod|ResponseStatusLine):
        class: CFHTTPMessage
        name: 'get#{g[0]}'
        return_marshaler: CFString.AsStringNoRetainMarshaler
    CFHTTPMessageCopy(SerializedMessage|RequestURL):
        class: CFHTTPMessage
        name: 'get#{g[0]}'
        return_marshaler: NSObject.NoRetainMarshaler
    CFHTTPMessageCopy(.*):
        class: CFHTTPMessage
        name: 'get#{g[0]}'
    CFHTTPMessage(AppendBytes):
        class: CFHTTPMessage
        name: '#{g[0]}'
        visibility: private
        parameters:
            newBytes:
                type: '@Pointer long'
    CFHTTPMessage(AddAuthentication):
        class: CFHTTPMessage
        name: '#{g[0]}'
        parameters:
            authenticationScheme:
                type: CFHTTPAuthenticationScheme
    CFHTTPMessage(ApplyCredentials):
        class: CFHTTPMessage
        name: '#{g[0]}'
        throws: CFStreamErrorException
    CFHTTPMessage(ApplyCredentialDictionary):
        class: CFHTTPMessage
        name: applyCredentials
        throws: CFStreamErrorException
        parameters:
            dict:
                type: CFHTTPAuthenticationCredentials
    CFHTTPMessage(.*):
        class: CFHTTPMessage
        name: '#{g[0]}'

    # CFHTTPStream
    CFReadStream(Create).*:
        class: CFHTTPStream
        name: '#{g[0]}'
        return_marshaler: NSObject.NoRetainMarshaler
    CFHTTPReadStream(.*):
        class: CFHTTPStream
        name: '#{g[0]}'

    # CFNetDiagnostic
    CFNetDiagnostic(Create).*:
        class: CFNetDiagnostic
        name: '#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
    CFNetDiagnosticCopy(NetworkStatusPassively):
        class: CFNetDiagnostic
        name: 'get#{g[0]}'
        visibility: private
        parameters:
            description:
                type: 'NSString.NSStringPtr'
    CFNetDiagnostic(.*):
        class: CFNetDiagnostic
        name: '#{g[0]}'

    # CFNetServiceBrowser
    CFNetServiceBrowser(Create):
        class: CFNetServiceBrowser
        name: '#{g[0]}'
        visibility: private
        return_marshaler: CFType.NoRetainMarshaler
    CFNetServiceBrowser(SearchForDomains):
        class: CFNetServiceBrowser
        name: '#{g[0]}'
        throws: CFStreamErrorException
    CFNetServiceBrowser(SearchForServices):
        class: CFNetServiceBrowser
        name: '#{g[0]}'
        throws: CFStreamErrorException
    CFNetServiceBrowser(StopSearch):
        class: CFNetServiceBrowser
        name: '#{g[0]}'
        throws: CFStreamErrorException
    CFNetServiceBrowser(Schedule)WithRunLoop:
        class: CFNetServiceBrowser
        name: scheduleInRunLoop
    CFNetServiceBrowser(UnscheduleFromRunLoop):
        class: CFNetServiceBrowser
        name: '#{g[0]}'
    CFNetServiceBrowser(.*):
        class: CFNetServiceBrowser
        name: '#{g[0]}'

    # CFNetServiceMonitor
    CFNetServiceMonitor(Create):
        class: CFNetServiceMonitor
        name: '#{g[0]}'
        visibility: private
        return_marshaler: CFType.NoRetainMarshaler
    CFNetServiceMonitor(Start):
        class: CFNetServiceMonitor
        name: '#{g[0]}'
        throws: CFStreamErrorException
    CFNetServiceMonitor(Stop):
        class: CFNetServiceMonitor
        name: '#{g[0]}'
        throws: CFStreamErrorException
    CFNetServiceMonitor(Schedule)WithRunLoop:
        class: CFNetServiceMonitor
        name: scheduleInRunLoop
    CFNetServiceMonitor(UnscheduleFromRunLoop):
        class: CFNetServiceMonitor
        name: '#{g[0]}'
    CFNetServiceMonitor(.*):
        class: CFNetServiceMonitor
        name: '#{g[0]}'

    # CFNetService
    CFNetService(Register)WithOptions:
        class: CFNetService
        name: '#{g[0]}'
        throws: CFStreamErrorException
        parameters:
            options:
                type: CFNetServiceOptions
    CFNetService(Resolve)WithTimeout:
        class: CFNetService
        name: '#{g[0]}'
        throws: CFStreamErrorException
    CFNetService(GetAddressing):
        class: CFNetService
        name: '#{g[0]}'
        return_type: NSArray<NSData>
    CFNetServiceCreateDictionaryWithTXTData:
        class: CFNetService
        name: parseTXTData
        visibility: protected
        return_type: 'NSDictionary<NSString, NSData>'
    CFNetServiceCreateTXTDataWithDictionary:
        class: CFNetService
        name: createTXTData
        visibility: protected
        return_marshaler: NSObject.NoRetainMarshaler
        parameters:
            keyValuePairs:
                type: 'NSDictionary<NSString, NSData>'
    CFNetService(SetClient):
        class: CFNetService
        name: setCallback
        visibility: private
    CFNetService(Schedule)WithRunLoop:
        class: CFNetService
        name: scheduleInRunLoop
    CFNetService(UnscheduleFromRunLoop):
        class: CFNetService
        name: '#{g[0]}'
    CFStreamCreatePairWithSocketToNetService:
        class: CFNetService
        name: createSocketStreamPair
        visibility: private
    CFNetService(Create.*):
        class: CFNetService
        name: '#{g[0]}'
        return_marshaler: CFType.NoRetainMarshaler
    CFNetService(.*):
        class: CFNetService
        name: '#{g[0]}'

    # CFProxySupport
    CFNetworkCopy(SystemProxySettings):
        class: CFProxySupport
        name: 'get#{g[0]}'
        return_type: CFSystemProxySettings
    CFNetworkCopyProxiesForURL:
        exclude: true # CocoaTouch SystemConfiguration doesn't have the necessary methods.
    CFNetworkCopyProxiesForAutoConfigurationScript:
        class: CFProxySupport
        name: getProxies
        throws: NSErrorException
        return_type: List<CFProxy>
        return_marshaler: CFProxy.AsListMarshaler
    CFNetwork(ExecuteProxyAutoConfigurationScript):
        class: CFProxySupport
        name: '#{g[0]}'
        visibility: private
    CFNetwork(ExecuteProxyAutoConfigurationURL):
        class: CFProxySupport
        name: '#{g[0]}'
        visibility: private

    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?CF.*):
        class: CoreServices
        name: 'Function__#{g[0]}'

values:
    # CFError
    kCFErrorDomainCFNetwork:
        class: CFNetworkError
        name: getClassDomain
    kCFErrorDomainWinSock:
        class: CFWinSockError
        name: getClassDomain

    # CFHTTPMessage
    kCFHTTP(Version.*):
        enum: CFHTTPVersion
        name: '#{g[0]}'
        type: CFString
    kCFHTTPAuthenticationScheme(.*):
        enum: CFHTTPAuthenticationScheme
        name: '#{g[0]}'
        type: CFString
    kCFHTTPAuthentication(.*):
        dictionary: CFHTTPAuthenticationCredentials
        name: '#{g[0]}'
        type: CFString
        methods:
            Username:
                type: String
            Password:
                type: String
            AccountDomain:
                type: String

    # CFProxy
    kCFNetworkProxies(.*):
        dictionary: CFSystemProxySettings
        name: '#{g[0]}'
        type: CFString
        mutable: false
        methods:
            HTTPEnable:
                name: isHTTPProxyEnabled
                type: boolean
            HTTPPort:
                name: HTTPProxyPort
                type: int
            HTTPProxy:
                name: HTTPProxyHost
                type: String
            ProxyAutoConfigEnable:
                name: isAutoConfigurationEnabled
                type: boolean
            ProxyAutoConfigURLString:
                name: AutoConfigurationURL
                type: String
            ProxyAutoConfigJavaScript:
                name: AutoConfigurationJavaScript
                type: String
    kCFProxy(Type)Key:
        dictionary: CFProxy
        name: '#{g[0]}'
        type: CFString
        mutable: false
        methods:
            Type:
                type: CFProxyType
            HostName:
                name: Host
                type: String
            PortNumber:
                name: Port
                type: int
            AutoConfigurationURL:
                type: NSURL
            AutoConfigurationJavaScript:
                type: String
            Username:
                type: String
            Password:
                type: String
            AutoConfigurationHTTPResponse:
                type: CFHTTPMessage
    kCFProxyType(.*):
        enum: CFProxyType
        name: '#{g[0]}'
        type: CFString
    kCFProxy(.*)Key:
        dictionary: CFProxy
        name: '#{g[0]}'
        type: CFString

    # CFStream
    kCFStreamErrorDomain(.*):
        enum: CFStreamErrorDomain
        name: '#{g[0]}'
        type: Integer
    kCFStreamPropertyFTP(.*):
        enum: CFFTPStreamProperty
        name: '#{g[0]}'
        type: CFString
    kCFFTPResource(.*):
        dictionary: CFFTPResource
        name: '#{g[0]}'
        type: CFString
        mutable: false
        methods:
            Mode:
                type: long
            Name:
                type: String
            Owner:
                type: String
            Group:
                type: String
            Link:
                type: String
            Size:
                type: long
            Type:
                type: long
            ModeDate:
                type: NSDate
    kCFStreamProperty(SOCKSProxy):
        enum: CFSocketStreamProperty
        name: '#{g[0]}'
        type: CFString
    kCFStream(NetworkServiceType):
        enum: CFSocketStreamProperty
        name: '#{g[0]}'
        type: CFString
    kCFStreamSocketSOCKSVersion(4|5):
        enum: CFStreamSocketSOCKSVersion
        name: '#{g[0]}'
        type: CFString
    kCFStreamPropertySOCKS(.*):
        dictionary: CFStreamSocketSOCKSProxy
        name: '#{g[0]}'
        type: CFString
        methods:
            ProxyHost:
                name: Host
                type: String
            ProxyPort:
                name: Port
                type: int
            Version:
                type: CFStreamSocketSOCKSVersion
            User:
                type: String
            Password:
                type: String
    kCFStreamProperty(.*):
        enum: CFSocketStreamProperty
        name: '#{g[0]}'
        type: CFString
    kCFStreamNetworkServiceType(.*):
        enum: CFStreamNetworkServiceType
        name: '#{g[0]}'
        type: CFString
    kCFStreamSocketSecurityLevel(.*):
        enum: CFStreamSocketSecurityLevel
        name: '#{g[0]}'
        type: CFString
    kCFStreamSSL(.*):
        dictionary: CFStreamSSLSettings
        name: '#{g[0]}'
        type: CFString
        methods:
            ValidatesCertificateChain:
                type: boolean
            Level:
                name: SecurityLevel
                type: CFStreamSocketSecurityLevel
            PeerName:
                type: String
            Certificates:
                type: NSArray<?> # TODO
            IsServer:
                type: boolean

    # CFError
    kCF(.*)Key:
        enum: CFNetworkErrorUserInfoKey
        name: '#{g[0]}'
        type: NSString
        extends: NSErrorUserInfoKey
    
    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?CF.*):
        class: CoreServices
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?CF.*):
        class: CoreServices
        name: 'Constant__#{g[0]}'
