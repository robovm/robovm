package: org.robovm.apple.addressbook
include: [foundation.yaml, corefoundation.yaml]
library: AddressBook
framework: AddressBook
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/AddressBook.framework/Headers/AddressBook.h
    - /System/Library/Frameworks/AddressBook.framework/Headers/AddressBookDefines.h
typedefs:
    ABAddressBookRef: ABAddressBook
    ABRecordRef: ABRecord
    ABMultiValueRef: ABMultiValue
    ABMutableMultiValueRef: ABMutableMultiValue

private_typedefs:
    '__CFString *': String
    '__CFString **': 'NSString.NSStringPtr'
    '__CFData *': NSData
    '__CFURL *': NSURL
    '__CFDictionary *': 'NSDictionary<?, ?>'
    '__CFArray *': 'NSArray<?>'
    '__CFError': NSError

enums:
    ABAddressBookErrorCode: { first: kABOperationNotPermittedByStoreError, suffix: Error }
    ABAuthorizationStatus: {}
    ABRecordType: { first: kABPersonType, prefix: kAB, suffix: Type, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    ABPropertyType: { first: kABInvalidPropertyType, bits: true, suffix: PropertyType, marshaler: Bits.AsMachineSizedIntMarshaler }
    ABPersonSortOrdering: { first: kABPersonSortByFirstName, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    ABPersonCompositeNameFormat: { first: kABPersonCompositeNameFormatFirstNameFirst, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    ABPersonImageFormat: { first: kABPersonImageFormatThumbnail }
    ABSourceType: { first: kABSourceTypeLocal }
    
classes:
    ABAddressBookError:
        extends: NSError

    # Opaque Types
    ABAddressBook:
        extends: CFType
    ABMultiValue:
        extends: CFType
    ABMutableMultiValue:
        extends: ABMultiValue
    ABRecord:
        extends: CFType
        
    ABGroup:
        extends: ABRecord
    ABPerson:
        extends: ABRecord
    ABSource:
        extends: ABRecord
        
    ABProperty: {}
    ABPersonProperty:
        extends: ABProperty
    ABGroupProperty:
        extends: ABProperty
    ABSourceProperty:
        extends: ABProperty
        
    ABPropertyLabel: {}
    ABPersonPhoneLabel:
        extends: ABPropertyLabel
    ABPersonDateLabel:
        extends: ABPropertyLabel
    ABPersonURLLabel:
        extends: ABPropertyLabel
    ABPersonRelatedNameLabel:
        extends: ABPropertyLabel

functions:
    # ABAddressBook
    ABAddressBook(Create)WithOptions:
        class: ABAddressBook
        name: '#{g[0]}'
        parameters:
            options:
                type: 'NSDictionary<NSString, ?>'
        visibility: protected
    ABAddressBook(RequestAccess)WithCompletion:
        class: ABAddressBook
        name: '#{g[0]}'
        parameters:
            completion:
                type: '@Block RequestAccessCompletionHandler'
    ABAddressBook(Save|AddRecord|RemoveRecord):
        class: ABAddressBook
        name: '#{g[0]}'
        visibility: protected
    ABAddressBookCopy(LocalizedLabel):
        class: ABAddressBook
        name: 'get#{g[0]}'
    ABAddressBookCopy(DefaultSource):
        class: ABAddressBook
        name: 'get#{g[0]}'
        return_type: ABSource
    ABAddressBook(RegisterExternalChangeCallback|UnregisterExternalChangeCallback):
        class: ABAddressBook
        name: '#{g[0]}'
        visibility: protected
        parameters:
            context:
                type: '@Pointer long'
    ABAddressBook(GetSource)WithRecordID:
        class: ABAddressBook
        name: '#{g[0]}'
        return_type: ABSource
    ABAddressBook(GetPerson)WithRecordID:
        class: ABAddressBook
        name: '#{g[0]}'
        return_type: ABPerson
    ABAddressBookCopyArrayOf(AllSources):
        class: ABAddressBook
        name: 'get#{g[0]}'
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(ABSource.AsListMarshaler.class) List<ABSource>'
    ABAddressBookCopyArrayOf(AllPeople):
        class: ABAddressBook
        name: 'get#{g[0]}'
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(ABPerson.AsListMarshaler.class) List<ABPerson>'
    ABAddressBookCopyArrayOf(AllPeopleInSource).*:
        class: ABAddressBook
        name: 'get#{g[0]}'
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(ABPerson.AsListMarshaler.class) List<ABPerson>'
        parameters:
            source:
                type: ABSource
    ABAddressBookCopy(People)WithName:
        class: ABAddressBook
        name: 'get#{g[0]}'
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(ABPerson.AsListMarshaler.class) List<ABPerson>'
    ABAddressBook(GetGroup)WithRecordID:
        class: ABAddressBook
        name: '#{g[0]}'
        return_type: ABGroup
    ABAddressBookCopyArrayOf(AllGroups):
        class: ABAddressBook
        name: 'get#{g[0]}'
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(ABGroup.AsListMarshaler.class) List<ABGroup>'
    ABAddressBookCopyArrayOf(AllGroupsInSource).*:
        class: ABAddressBook
        name: 'get#{g[0]}'
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(ABGroup.AsListMarshaler.class) List<ABGroup>'
        parameters:
            source:
                type: ABSource
    ABAddressBook(.*):
        class: ABAddressBook
        name: '#{g[0]}'

    # ABRecord
    ABRecordCopyValue:
        class: ABRecord
        name: getValue
        visibility: protected
    ABRecord(SetValue): 
        class: ABRecord
        name: '#{g[0]}'
        visibility: protected
    ABRecord(RemoveValue):
        class: ABRecord
        name: '#{g[0]}'
        visibility: protected
    ABRecordCopy(CompositeName):
        class: ABRecord
        name: 'get#{g[0]}'
    ABRecord(.*):
        class: ABRecord
        name: '#{g[0]}'

    # ABGroup
    ABGroup(Create).*:
        class: ABGroup
        name: '#{g[0]}'
        return_type: ABGroup
        parameters:
            source:
                type: ABSource
    ABGroupCopy(Source):
        class: ABGroup
        name: '#{g[0]}'
        return_type: ABSource
        parameters:
            group:
                type: ABGroup
    ABGroupCopyArrayOf(AllMembers).*:
        class: ABGroup
        name: 'get#{g[0]}'
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(ABPerson.AsListMarshaler.class) List<ABPerson>'
        parameters:
            group:
                type: ABGroup
    ABGroup(AddMember|RemoveMember):
        class: ABGroup
        name: '#{g[0]}'
        visibility: protected # throws NSErrorException
        parameters:
            group:
                type: ABGroup
            member:
                type: ABPerson
            person:
                type: ABPerson
    ABGroup(.*):
        class: ABGroup
        name: '#{g[0]}'

    # ABMultiValue
    ABMultiValueCopyValueAtIndex:
        class: ABMultiValue
        name: getValue
    ABMultiValueCopyArrayOfAllValues:
        class: ABMultiValue
        name: getAllValues
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(CFArray.AsListMarshaler.class) List<CFType>'
    ABMultiValueCopyLabelAtIndex:
        class: ABMultiValue
        name: getLabel
        return_type: CFString
    ABMultiValue(GetIndex)ForIdentifier:
        class: ABMultiValue
        name: indexOf
    ABMultiValue(GetIdentifier)AtIndex:
        class: ABMultiValue
        name: '#{g[0]}'
    ABMultiValueGetFirstIndexOfValue:
        class: ABMultiValue
        name: indexOf
    ABMultiValue(Create)Mutable.*:
        class: ABMutableMultiValue
        name: '#{g[0]}'
    ABMultiValue(AddValueAndLabel):
        class: ABMutableMultiValue
        name: '#{g[0]}'
        visibility: protected
        parameters:
            label:
                type: CFString
    ABMultiValue(InsertValueAndLabel)AtIndex:
        class: ABMutableMultiValue
        name: '#{g[0]}'
        visibility: protected
        parameters:
            label:
                type: CFString
    ABMultiValue(RemoveValueAndLabel)AtIndex:
        class: ABMutableMultiValue
        name: '#{g[0]}'
        parameters:
            label:
                type: CFString
    ABMultiValue(ReplaceValue)AtIndex:
        class: ABMutableMultiValue
        name: '#{g[0]}'
    ABMultiValue(ReplaceLabel)AtIndex:
        class: ABMutableMultiValue
        name: '#{g[0]}'
        visibility: protected
        parameters:
            label:
                type: CFString
    ABMultiValue(.*):
        class: ABMultiValue
        name: '#{g[0]}'

    # ABPerson
    ABPerson(Create):
        class: ABPerson
        name: '#{g[0]}'
        return_type: ABPerson
    ABPerson(Create)InSource:
        class: ABPerson
        name: '#{g[0]}'
        return_type: ABPerson
        parameters:
            source:
                type: ABSource
    ABPersonCopy(Source):
        class: ABPerson
        name: 'get#{g[0]}'
        return_type: ABSource
        parameters:
            person:
                type: ABPerson
    ABPersonCopyArrayOf(AllLinkedPeople):
        class: ABPerson
        name: 'get#{g[0]}'
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(ABPerson.AsListMarshaler.class) List<ABPerson>'
        parameters:
            person:
                type: ABPerson
    ABPersonGetTypeOfProperty:
        class: ABPersonProperty
        name: getType
        visibility: protected
    ABPersonCopy(LocalizedPropertyName):
        class: ABPersonProperty
        name: 'get#{g[0]}'
        visibility: protected
    ABPersonGet(CompositeNameFormat):
        class: ABPerson
        name: 'getConstant#{g[0]}'
    ABPerson(GetCompositeNameFormat)ForRecord:
        class: ABPerson
        name: '#{g[0]}'
        parameters:
            record:
                type: ABPerson
    ABPersonCopy(CompositeNameDelimiter)ForRecord:
        class: ABPerson
        name: 'get#{g[0]}'
        parameters:
            record:
                type: ABPerson
    ABPerson(SetImageData):
        class: ABPerson
        name: '#{g[0]}'
        visibility: protected # throws NSErrorException
        parameters:
            person:
                type: ABPerson
    ABPersonCopy(ImageData).*:
        class: ABPerson
        name: 'get#{g[0]}'
        parameters:
            person:
                type: ABPerson
    ABPerson(HasImageData):
        class: ABPerson
        name: '#{g[0]}'
        parameters:
            person:
                type: ABPerson
    ABPerson(RemoveImageData):
        class: ABPerson
        name: '#{g[0]}'
        visibility: protected # throws NSErrorException
        parameters:
            person:
                type: ABPerson
    ABPersonComparePeopleByName:
        class: ABPerson
        name: compareTo
        parameters:
            person1:
                type: ABPerson
    ABPerson(CreatePeopleInSource)WithVCardRepresentation:
        class: ABPerson
        name: '#{g[0]}'
        return_type: '@org.robovm.rt.bro.annotation.Marshaler(ABPerson.AsListMarshaler.class) List<ABPerson>'
        parameters:
            source:
                type: ABSource
    ABPerson(CreateVCardRepresentation)WithPeople:
        class: ABPerson
        name: '#{g[0]}'
        parameters:
            people:
                type: '@org.robovm.rt.bro.annotation.Marshaler(ABPerson.AsListMarshaler.class) List<ABPerson>'
    ABPerson(.*):
        class: ABPerson
        name: '#{g[0]}'

    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?AB.*):
        class: AddressBook
        name: 'Function__#{g[0]}'

values:
    ABAddressBookErrorDomain:
        class: ABAddressBookError
        name: getClassDomain

    # Properties
    kABPerson(.*)Property:
        class: ABPersonProperty
        name: '#{g[0]}Value'
        visibility: protected
    kABGroup(.*)Property:
        class: ABGroupProperty
        name: '#{g[0]}Value'
        visibility: protected
    kABSource(.*)Property:
        class: ABSourceProperty
        name: '#{g[0]}Value'
        visibility: protected

    # Keys
    kABPersonAddress(.*)Key:
        class: ABPersonAddressPart
        name: '#{g[0]}Value'
        visibility: protected
        type: CFString
    kABPersonInstantMessage(.*Key):
        class: ABPersonInstantMessageAccount
        name: '#{g[0]}'
        visibility: protected
        type: CFString
    kABPersonSocialProfile(.*Key):
        class: ABPersonSocialProfile
        name: '#{g[0]}'
        visibility: protected
        type: CFString
    kABPersonAlternateBirthday(.*Key):
        class: ABPersonAlternateBirthday
        name: '#{g[0]}'
        visibility: protected
        type: CFString
        
    kABPersonKind(.*):
        class: ABPersonKind
        name: '#{g[0]}Value'
        visibility: protected
        type: CFNumber    
    kABPersonInstantMessageService(.*):
        class: ABPersonInstantMessageService
        name: '#{g[0]}Value'
        visibility: protected
        type: CFString
    kABPersonSocialProfileService(.*):
        class: ABPersonSocialProfileService
        name: '#{g[0]}Value'
        visibility: protected
        type: CFString
    
    # Labels
    # Generic labels
    kAB(WorkLabel):
        class: ABPropertyLabel
        name: '#{g[0]}'
        visibility: protected
        type: CFString
    kAB(HomeLabel):
        class: ABPropertyLabel
        name: '#{g[0]}'
        visibility: protected
        type: CFString
    kAB(OtherLabel):
        class: ABPropertyLabel
        name: '#{g[0]}'
        visibility: protected
        type: CFString
    # Specific labels
    kABPersonPhone(.*Label):
        class: ABPersonPhoneLabel
        name: '#{g[0]}'
        visibility: protected
        type: CFString
    kABPerson(AnniversaryLabel):
        class: ABPersonDateLabel
        name: '#{g[0]}'
        visibility: protected
        type: CFString
    kABPerson(HomePageLabel):
        class: ABPersonURLLabel
        name: '#{g[0]}'
        visibility: protected
        type: CFString
    kABPerson(.*Label):
        class: ABPersonRelatedNameLabel
        name: '#{g[0]}'
        visibility: protected
        type: CFString

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?AB.*):
        class: AddressBook
        name: 'Value__#{g[0]}'

constants:
    kABRecord(InvalidID):
        class: ABRecord
        name: '#{g[0]}'
    kABProperty(InvalidID):
        class: ABProperty
        name: '#{g[0]}'
    kABSourceTypeSearchableMask:
        exclude: true
    kABMultiValue(.*):
        class: ABMultiValue
        name: '#{g[0]}'

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?AB.*):
        class: AddressBook
        name: 'Constant__#{g[0]}'
