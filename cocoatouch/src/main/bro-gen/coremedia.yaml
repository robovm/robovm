package: org.robovm.apple.coremedia
include: [foundation.yaml, corefoundation.yaml, dispatch.yaml, coreaudio.yaml, coreanimation.yaml, coregraphics.yaml, corevideo.yaml, audiotoolbox.yaml]
library: CoreMedia
framework: CoreMedia
clang_args: ['-x', 'objective-c']
headers:
    - /System/Library/Frameworks/CoreMedia.framework/Headers/CoreMedia.h
    - /System/Library/Frameworks/CoreMedia.framework/Headers/CMBase.h
typedefs:
    CMTimeCodeFormatDescriptionRef: CMTimeCodeFormatDescription
    CMAudioFormatDescriptionRef: CMAudioFormatDescription
    CMVideoFormatDescriptionRef: CMVideoFormatDescription
    CMTextFormatDescriptionRef: CMTextFormatDescription
    OS_dispatch_source: DispatchSource
private_typedefs:
    '__CFString *': String
    "__CFString **": "NSString.NSStringPtr"
    "__CFData *": NSData
    "__CFURL *": NSURL
    "__CFDictionary *": "NSDictionary<?, ?>"
    "__CFArray *": "NSArray<?>"

enums:
    CMAttachmentMode: { first: kCMAttachmentMode_ShouldNotPropagate, prefix: kCMAttachmentMode_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMClockError: { first: kCMClockError_MissingRequiredParameter, prefix: kCMClockError_ }
    CMTimebaseError: { first: kCMTimebaseError_MissingRequiredParameter, prefix: kCMTimebaseError_ }
    CMSyncError: { first: kCMSyncError_MissingRequiredParameter, prefix: kCMSyncError_ }
    CMBlockBufferError: { first: kCMBlockBufferNoErr, prefix: kCMBlockBuffer, suffix: Err }
    CMBlockBufferFlag: { first: kCMBlockBufferAssureMemoryNowFlag, prefix: kCMBlockBuffer, suffix: Flag, bits: true, marshaler: Bits.AsMachineSizedIntMarshaler }
    CMBufferQueueError: { first: kCMBufferQueueError_AllocationFailed, prefix: kCMBufferQueueError_ }
    CMBufferQueueTriggerCondition: { first: kCMBufferQueueTrigger_WhenDurationBecomesLessThan, prefix: kCMBufferQueueTrigger_ }
    CMFormatDescriptionError: { first: kCMFormatDescriptionError_InvalidParameter, prefix: kCMFormatDescriptionError_ }
    CMMediaType: { first: kCMMediaType_Video, prefix: kCMMediaType_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMAudioCodecType: { first: kCMAudioCodecType_AAC_LCProtected, prefix: kCMAudioCodecType_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMAudioFormatDescriptionMask: { first: kCMAudioFormatDescriptionMask_StreamBasicDescription, prefix: kCMAudioFormatDescriptionMask_, bits: true, marshaler: Bits.AsMachineSizedIntMarshaler }
    CMPixelFormatType: { first: kCMPixelFormat_32ARGB, prefix: kCMPixelFormat_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMVideoCodecType: { first: kCMVideoCodecType_422YpCbCr8, prefix: kCMVideoCodecType_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMMPEG2VideoProfile: { first: kCMMPEG2VideoProfile_HDV_720p30, prefix: kCMMPEG2VideoProfile_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMMuxedStreamType: { first: kCMMuxedStreamType_MPEG1System, prefix: kCMMuxedStreamType_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMClosedCaptionFormatType: { first: kCMClosedCaptionFormatType_CEA608, prefix: kCMClosedCaptionFormatType, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMTextFormatType: { first: kCMTextFormatType_QTText, prefix: kCMTextFormatType_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMTextDisplayFlag: { first: kCMTextDisplayFlag_scrollIn, prefix: kCMTextDisplayFlag_, bits: true, marshaler: Bits.AsMachineSizedIntMarshaler }
    CMTextJustification: { first: kCMTextJustification_left_top, prefix: kCMTextJustification_, kCMTextJustification_left_top: LeftTop, kCMTextJustification_centered: Centered, kCMTextJustification_bottom_right: BottomRight }
    CMSubtitleFormatType: { first: kCMSubtitleFormatType_3GText, prefix: kCMSubtitleFormatType_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMTimeCodeFormatType: { first: kCMTimeCodeFormatType_TimeCode32, prefix: kCMTimeCodeFormatType_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMTimeCodeFlag: { first: kCMTimeCodeFlag_DropFrame, prefix: kCMTimeCodeFlag_, bits: true, marshaler: Bits.AsMachineSizedIntMarshaler }
    CMMetadataFormatType: { first: kCMMetadataFormatType_ICY, prefix: kCMMetadataFormatType_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMSampleBufferError: { first: kCMSampleBufferError_AllocationFailed, prefix: kCMSampleBufferError_ }
    CMSampleBufferFlag: { first: kCMSampleBufferFlag_AudioBufferList_Assure16ByteAlignment, prefix: kCMSampleBufferFlag_, bits: true, marshaler: Bits.AsMachineSizedIntMarshaler }
    CMSimpleQueueError: { first: kCMSimpleQueueError_AllocationFailed, prefix: kCMSimpleQueueError_ }
    CMTimeFlags: { first: kCMTimeFlags_Valid, prefix: kCMTimeFlags_, bits: true, marshaler: Bits.AsMachineSizedIntMarshaler }
    CMTimeRoundingMethod: { first: kCMTimeRoundingMethod_RoundHalfAwayFromZero, prefix: kCMTimeRoundingMethod_, marshaler: ValuedEnum.AsMachineSizedUIntMarshaler }
    CMFormatDescriptionBridgeError: { first: kCMFormatDescriptionBridgeError_InvalidParameter }
    CMMetadataIdentifierError: { first: kCMMetadataIdentifierError_AllocationFailed }
    CMMetadataDataTypeRegistryError: { first: kCMMetadataDataTypeRegistryError_AllocationFailed }

classes:
    CoreMedia:
        annotations: ['@Marshaler(NSString.AsStringMarshaler.class)']

    # Opaque Types
    #CMAttachmentBearer:
    #    extends: CFType
    #CMAttachmentBearerRef:
    #    name: "CMAttachmentBearer"
    #    extends: CFType
    CMBlockBuffer:
        extends: CFType
    OpaqueCMBlockBuffer:
        name: CMBlockBuffer
        extends: CFType
    CMBufferQueue:
        extends: CFType
    opaqueCMBufferQueue:
        name: CMBufferQueue
        extends: CFType
    CMClockOrTimebase:
        extends: CFType
    CMClock:
        extends: CMClockOrTimebase
    OpaqueCMClock:
        name: CMClock
        extends: CMClockOrTimebase
    CMFormatDescription:
        extends: CFType
    opaqueCMFormatDescription:
        name: CMFormatDescription
        extends: CFType
    CMAudioFormatDescription:
        extends: CMFormatDescription
        add_ptr: true
    CMClosedCaptionFormatDescription:
        extends: CMFormatDescription
        add_ptr: true
    CMMetadataFormatDescription:
        extends: CMFormatDescription
        add_ptr: true
    CMMuxedFormatDescription:
        extends: CMFormatDescription
        add_ptr: true
    CMTextFormatDescription:
        extends: CMFormatDescription
        add_ptr: true
    CMTimeCodeFormatDescription:
        extends: CMFormatDescription
        add_ptr: true
    CMVideoFormatDescription:
        extends: CMFormatDescription
        add_ptr: true
    CMSampleBuffer:
        extends: CFType
        implements: CMBuffer
    opaqueCMSampleBuffer:
        name: CMSampleBuffer
        extends: CFType
        implements: CMBuffer
    CMTime:
        extends: CFType
    CMTimebase:
        extends: CMClockOrTimebase
    OpaqueCMTimebase:
        name: CMTimebase
        extends: CMClockOrTimebase
    CMTimeRange:
        extends: CFType
    CMMemoryPool:
        extends: CFType
    OpaqueCMMemoryPool:
        name: CMMemoryPool
        extends: CFType
    CMSimpleQueue:
        extends: CFType
    opaqueCMSimpleQueue:
        name: CMSimpleQueue
        extends: CFType

    # Structs
    CMBlockBufferCustomBlockSource: {}
    CMBufferCallbacks:
        name: CMBufferCallbacksStruct
        refcon:
            type: '@Pointer long'
        visibility: ''
    CMBufferQueueTriggerToken: {}
    opaqueCMBufferQueueTriggerToken:
        name: CMBufferQueueTriggerToken
    CMVideoDimensions: {}
    CMSampleTimingInfo: {}
    CMTime:
        add_ptr: true
    CMTimeRange: {}
    CMTimeMapping: {}

protocols: {}

functions:
    (CM.*)GetTypeID:
        class: '#{g[0]}'
        name: getClassTypeID

    # CMAttachment
    #CMCopyDictionaryOfAttachments:
    #    class: CMAttachmentBearer
    #    name: "copyDictionaryOfAttachments"
    #    visibility: protected
    #CMGetAttachment:
    #    class: CMAttachmentBearer
    #    name: "getAttachment"
    #    visibility: protected
    #CMSetAttachments: 
    #    class: CMAttachmentBearer
    #    name: "setAttachment"
    CM(.*Attachment.?):
        exclude: true
    #    class: CMAttachmentBearer
    #    name: "#{g[0]}"

    # CMClock
    CMClock(GetHostTimeClock):
        class: CMClock
        name: '#{g[0]}'
    CMClock(ConvertHostTimeToSystemUnits):
        class: CMClock
        name: '#{g[0]}'
    CMClockMakeHostTimeFromSystemUnits:
        class: CMClock
        name: createHostTimeFromSystemUnits
    CMClock(GetAnchorTime):
        class: CMClock
        name: '#{g[0]}'
        visibility: protected
        parameters:
            outClockTime:
                type: CMTime.CMTimePtr
            outReferenceClockTime:
                type: CMTime.CMTimePtr
    CMClock(.*):
        class: CMClock
        name: '#{g[0]}'

    # CMAudioClock
    CMAudioClockCreate:
        class: CMClock
        name: createAudioClock
        visibility: protected

    # CMTimebase
    CMTimebaseCreateWithMasterClock:
        class: CMTimebase
        name: "create"
        visibility: protected
    CMTimebaseCreateWithMasterTimebase:
        class: CMTimebase
        name: "create"
        visibility: protected
    CMTimebase(GetTime)WithTimeScale:
        class: CMTimebase
        name: "#{g[0]}"
    CMTimebaseGetTimeAndRate:
        exclude: true
    CMTimebase(GetMaster):
        class: CMTimebase
        name: "#{g[0]}"
        return_type: "CMTimebase"
    CMTimebase(Get.*):
        class: CMTimebase
        name: "#{g[0]}"
    CMTimebase(.*):
        class: CMTimebase
        name: "#{g[0]}"
        return_type: CMTimebaseError

    # CMSync
    CMSync(GetRelativeRateAndAnchorTime):
        class: CMClockOrTimebase
        name: "#{g[0]}"
        visibility: protected
        parameters:
            ofClockOrTimebase:
                type: "CMClockOrTimebase"
            relativeToClockOrTimebase:
                type: "CMClockOrTimebase"
            outOfClockOrTimebaseAnchorTime:
                type: "CMTime.CMTimePtr"
            outRelativeToClockOrTimebaseAnchorTime:
                type: "CMTime.CMTimePtr"
    CMSync(GetTime):
        class: CMClockOrTimebase
        name: "#{g[0]}"
        parameters:
            clockOrTimebase:
                type: "CMClockOrTimebase"
    CMSync(MightDrift):
        class: CMClockOrTimebase
        name: "#{g[0]}"
        parameters:
            clockOrTimebase1:
                type: "CMClockOrTimebase"
            clockOrTimebase2:
                type: "CMClockOrTimebase"
    CMSync(GetRelativeRate):
        class: CMClockOrTimebase
        name: "#{g[0]}"
        parameters:
            ofClockOrTimebase:
                type: "CMClockOrTimebase"
            relativeToClockOrTimebase:
                type: "CMClockOrTimebase"
    CMSync(ConvertTime):
        class: CMClockOrTimebase
        name: "#{g[0]}"
        parameters:
            fromClockOrTimebase:
                type: "CMClockOrTimebase"
            toClockOrTimebase:
                type: "CMClockOrTimebase"
        visibility: protected
    CMSync(.*):
        class: CMClockOrTimebase
        name: "#{g[0]}"

    # CMBlockBuffer
    CMBlockBufferCreate.*:
        class: CMBlockBuffer
        name: "create"
        visibility: protected
    CMBlockBuffer(ReplaceDataBytes):
        class: CMBlockBuffer
        name: "#{g[0]}"
        static: true
        visibility: protected
        return_type: CMBlockBufferError
    CMBlockBuffer(FillDataBytes):
        class: CMBlockBuffer
        name: "#{g[0]}"
        static: true
        visibility: protected
        return_type: CMBlockBufferError
    CMBlockBuffer(GetDataPointer):
        class: CMBlockBuffer
        name: "#{g[0]}"
        visibility: protected
        return_type: CMBlockBufferError
    CMBlockBuffer(Get.*): 
        class: CMBlockBuffer
        name: "#{g[0]}"
    CMBlockBuffer(Is.*):
        class: CMBlockBuffer
        name: "#{g[0]}"
    CMBlockBuffer(.*):
        class: CMBlockBuffer
        name: "#{g[0]}"
        return_type: CMBlockBufferError

    # CMBufferQueue
    CMBufferQueue(GetCallbacks.*):
        class: CMBufferQueue
        name: "#{g[0]}"
        exclude: true
    CMBufferQueueCreate:
        class: CMBufferQueue
        name: "create"
        visibility: protected
        return_type: CMBufferQueueError
    CMBufferQueue(Enqueue|MarkEndOfData|Reset|RemoveTrigger):
        class: CMBufferQueue
        name: "#{g[0]}"
        return_type: CMBufferQueueError
    CMBufferQueue(Reset)WithCallback:
        class: CMBufferQueue
        name: "#{g[0]}"
        return_type: CMBufferQueueError
        visibility: protected
        parameters:
            refcon:
                type: "@Pointer long"
    CMBufferQueue(InstallTrigger).*:
        class: CMBufferQueue
        name: "#{g[0]}"
        return_type: CMBufferQueueError
        visibility: protected
        parameters:
            triggerRefcon:
                type: "@Pointer long"
    CMBufferQueue(CallForEachBuffer):
        class: CMBufferQueue
        name: "#{g[0]}"
        return_type: CMBufferQueueError
        visibility: protected
        parameters:
            refcon:
                type: "@Pointer long"
    CMBufferQueue(SetValidationCallback):
        class: CMBufferQueue
        name: "#{g[0]}"
        return_type: CMBufferQueueError
        visibility: protected
        parameters:
            validationRefCon:
                type: "@Pointer long"
    CMBufferQueue(.*):
        class: CMBufferQueue
        name: "#{g[0]}"

    # CMFormatDescription
    CMFormatDescriptionCreate:
        class: CMFormatDescription
        name: "create"
        visibility: protected
        parameters:
            extensions:
                type: "NSDictionary<NSString, ?>"
    CMFormatDescription(GetExtensions):
        class: CMFormatDescription
        name: "#{g[0]}"
        return_type: "NSDictionary<NSString, ?>"
    CMFormatDescriptionEqual.*:
        class: CMFormatDescription
        name: "equals"
    CMFormatDescription(.*):
        class: CMFormatDescription
        name: "#{g[0]}"

    # CMAudioFormatDescription
    CMAudioFormatDescriptionCreate:
        class: CMAudioFormatDescription
        name: "create"
        visibility: protected
        parameters:
            extensions:
                type: "NSDictionary<NSString, ?>"
    CMAudioFormatDescription(CreateSummary):
        class: CMAudioFormatDescription
        name: "#{g[0]}"
        visibility: protected
    CMAudioFormatDescription(GetChannelLayout|GetFormatList|GetMagicCookie):
        class: CMAudioFormatDescription
        name: "#{g[0]}"
        visibility: protected
    CMAudioFormatDescriptionEqual:
        class: CMAudioFormatDescription
        name: "equals"
        visibility: protected
    CMAudioFormatDescription(.*):
        class: CMAudioFormatDescription
        name: "#{g[0]}"

    # CMVideoFormatDescription
    CMVideoFormatDescriptionCreate.*:
        class: CMVideoFormatDescription
        name: "create"
        visibility: protected
        parameters:
            extensions:
                type: "NSDictionary<NSString, ?>"
    CMVideoFormatDescription(GetH264ParameterSetAtIndex):
        class: CMVideoFormatDescription
        name: "#{g[0]}"
        visibility: protected
    CMVideoFormatDescription(.*):
        class: CMVideoFormatDescription
        name: "#{g[0]}"

    # CMMuxedFormatDescription
    CMMuxedFormatDescriptionCreate:
        class: CMMuxedFormatDescription
        name: "create"
        visibility: protected
        parameters:
            extensions:
                type: "NSDictionary<NSString, ?>"

    # CMTextFormatDescription
    CMTextFormatDescription(GetDefaultTextBox):
        class: CMTextFormatDescription
        name: "#{g[0]}"
        visibility: protected
        parameters:
            desc:
                type: "CMTextFormatDescription"
            outDefaultTextBox:
                type: "CGRect.CGRectPtr"
    CMTextFormatDescription(GetFontName):
        class: CMTextFormatDescription
        name: "#{g[0]}"
        visibility: protected
        parameters:
            desc:
                type: "CMTextFormatDescription"
            outFontName:
                type: "CFString.CFStringPtr"
    CMTextFormatDescription(Get.*):
        class: CMTextFormatDescription
        name: "#{g[0]}"
        visibility: protected
        parameters:
            desc:
                type: "CMTextFormatDescription"
    CMTextFormatDescription(.*):
        class: CMTextFormatDescription
        name: "#{g[0]}"
  
    # CMTimeCodeFormatDescription
    CMTimeCodeFormatDescriptionCreate:
        class: CMTimeCodeFormatDescription
        name: "create"
        visibility: protected
        parameters:
            extensions:
                type: "NSDictionary<NSString, ?>"
    CMTimeCodeFormatDescription(GetTimeCodeFlags):
        class: CMTimeCodeFormatDescription
        name: "#{g[0]}"
        return_type: CMTimeCodeFlag
    CMTimeCodeFormatDescription(.*):
        class: CMTimeCodeFormatDescription
        name: "#{g[0]}"

    # CMMetadataFormatDescription
    CMMetadataFormatDescriptionCreateWithKeys:
        class: CMMetadataFormatDescription
        name: "create"
        visibility: protected
    CMMetadataFormatDescription(.*):
        class: CMMetadataFormatDescription
        name: "#{g[0]}"
   
    # CMMemoryPool
    CMMemoryPool(.*):
        class: CMMemoryPool
        name: "#{g[0]}"

    # CMSampleBuffer
    CMSampleBuffer(Create.*):
        class: CMSampleBuffer
        name: "#{g[0]}"
        visibility: protected
        parameters:
            makeDataReadyRefcon:
                type: "@Pointer long"
        return_type: CMSampleBufferError
    CMAudioSampleBufferCreateWithPacketDescriptions:
        class: CMSampleBuffer
        name: "createAudioSampleBuffer"
        visibility: protected
        parameters:
            makeDataReadyRefcon:
                type: "@Pointer long"
        return_type: CMSampleBufferError
    CMSampleBuffer(CopySampleBuffer)ForRange:
        class: CMSampleBuffer
        name: "#{g[0]}"
        visibility: protected
        return_type: CMSampleBufferError
    CMSampleBuffer(SetDataBuffer)FromAudioBufferList:
        class: CMSampleBuffer
        name: "#{g[0]}"
        visibility: protected
        return_type: CMSampleBufferError
        parameters:
            flags:
                type: "CMSampleBufferFlag"
    CMSampleBuffer(GetAudioBufferList)WithRetainedBlockBuffer:
        class: CMSampleBuffer
        name: "#{g[0]}"
        visibility: protected
        return_type: CMSampleBufferError
        parameters:
            flags:
                type: "CMSampleBufferFlag"
    CMSampleBuffer(GetAudioStreamPacketDescriptions):
        class: CMSampleBuffer
        name: "#{g[0]}"
        visibility: protected
        return_type: CMSampleBufferError
    CMSampleBufferDataIsReady:
        class: CMSampleBuffer
        name: "isDataReady"
    CMSampleBufferGetAudioStreamPacketDescriptionsPtr:
        exclude: true
    CMSampleBuffer(CopyPCMDataIntoAudioBufferList|SetDataReady|MakeDataReady|TrackDataReadiness|Invalidate|SetOutputPresentationTimeStamp):
        class: CMSampleBuffer
        name: "#{g[0]}"
        return_type: CMSampleBufferError
    CMSampleBuffer(SetInvalidateCallback):
        class: CMSampleBuffer
        name: "#{g[0]}"
        return_type: CMSampleBufferError
        visibility: protected
    CMSampleBuffer(GetSampleTimingInfoArray|GetOutputSampleTimingInfoArray|GetSampleTimingInfo|GetSampleSizeArray): # TODO wrap
        class: CMSampleBuffer
        name: "#{g[0]}"
        visibility: protected
        return_type: CMSampleBufferError
    CMSampleBuffer(CallForEachSample):
        class: CMSampleBuffer
        name: "#{g[0]}"
        visibility: protected
        return_type: CMSampleBufferError
        parameters:
            refcon:
                type: "@Pointer long"
    CMSampleBuffer(.*):
        class: CMSampleBuffer
        name: "#{g[0]}"

    # CMSimpleQueue
    CMSimpleQueueCreate:
        class: CMSimpleQueue
        name: "create"
        visibility: protected
    CMSimpleQueue(Enqueue):
        class: CMSimpleQueue
        name: "#{g[0]}"
        return_type: CMSimpleQueueError
    CMSimpleQueue(.*):
        class: CMSimpleQueue
        name: "#{g[0]}"

    # CMTimeRange
    CMTimeRangeMake.*:
        class: CMTimeRange
        name: create
    CMTimeRangeGetUnion:
        class: CMTimeRange
        name: union
    CMTimeRangeGetIntersection:
        class: CMTimeRange
        name: intersection
    CMTimeRangeEqual:
        class: CMTimeRange
        name: equals
    CMTimeRange(.*):
        class: CMTimeRange
        name: '#{g[0]}'

    # CMTime
    CMTimeMake.*:
        class: CMTime
        name: create
    CMTimeCopy(Description):
        class: CMTime
        name: 'get#{g[0]}'
        visibility: protected
    CMTimeShow:
        class: CMTime
        name: print
    CMTimeCopy(AsDictionary):
        class: CMTime
        name: '#{g[0]}'
    CMTime(.*):
        class: CMTime
        name: '#{g[0]}'

    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?CM.*):
        class: CoreMedia
        name: 'Function__#{g[0]}'

values:
    # CMMetadata
    kCMMetadata.*DataType_(.*):
        class: CMMetadataDataType
        name: '#{g[0]}Value'
        type: CFString
        visibility: protected
    kCMMetadataKeySpace_(.*):
        class: CMMetadataKeySpace
        name: '#{g[0]}Value'
        type: CFString
        visibility: protected

    # CMTextMarkup
    kCMTextMarkupAlignmentType_(.*):
        class: CMTextMarkupAlignmentType
        name: '#{g[0]}Value'
        type: CFString
        visibility: protected
    kCMTextVerticalLayout_(.*):
        class: CMTextVerticalLayout
        name: '#{g[0]}Value'
        type: CFString
        visibility: protected
    kCMTextMarkupGenericFontName_(.*):
        class: CMTextMarkupGenericFontName
        name: '#{g[0]}Value'
        type: CFString
        visibility: protected
    kCMTextMarkupCharacterEdgeStyle_(.*):
        class: CMTextMarkupCharacterEdgeStyle
        name: '#{g[0]}Value'
        type: CFString
        visibility: protected
    
    kCMTextMarkupAttribute_(.*):
        class: CoreMedia
        name: "CMTextMarkupAttribute#{g[0]}"

    kCMTimebaseNotificationKey_(.*):
        class: CoreMedia
        name: "CMTimebaseNotificationKey#{g[0]}"
    kCMTimebaseNotification_(.*):
        class: CoreMedia
        name: "CMTimebaseNotification#{g[0]}"
    kCMTimebase(.*):
        class: CoreMedia
        name: "CMTimebase#{g[0]}"
        
    kCMTime(.*):
        class: CoreMedia
        name: "CMTime#{g[0]}"  
        
    kCMTimeRange(.*):
        class: CoreMedia
        name: "CMTimeRange#{g[0]}"
        
    kCMFormatDescriptionExtension_(.*):
        class: CoreMedia
        name: "CMFormatDescriptionExtension#{g[0]}"
    kCMFormatDescriptionKey_(.*):
        class: CoreMedia
        name: "CMFormatDescriptionKey#{g[0]}"
    kCMFormatDescriptionColorPrimaries_(.*):
        class: CoreMedia
        name: "CMFormatDescriptionColorPrimaries#{g[0]}"
    kCMFormatDescriptionVendor_(.*):
        class: CoreMedia
        name: "CMFormatDescriptionVendor#{g[0]}"
    kCMFormatDescriptionExtensionKey_(.*):
        class: CoreMedia
        name: "CMFormatDescriptionExtensionKey#{g[0]}"
        
    kCMTextFormatDescriptionExtension_(.*):
        class: CoreMedia
        name: "CMTextFormatDescriptionExtension#{g[0]}"
    kCMTextFormatDescriptionRect_(.*):
        class: CoreMedia
        name: "CMTextFormatDescriptionRect#{g[0]}"
    kCMTextFormatDescriptionStyle_(.*):
        class: CoreMedia
        name: "CMTextFormatDescriptionStyle#{g[0]}"
    kCMTextFormatDescriptionColor_(.*):
        class: CoreMedia
        name: "CMTextFormatDescriptionColor#{g[0]}"
        
    kCMMetadataFormatDescriptionKey_(.*):
        class: CoreMedia
        name: "CMMetadataFormatDescriptionKey#{g[0]}"     
    kCMFormatDescription(.*):
        class: CoreMedia
        name: "CMMetadataFormatDescription#{g[0]}"
        
    kCM(TimingInfoInvalid):
        class: CoreMedia
        name: "CMSampleTimingInfo#{g[0]}"
        
    kCMSampleBufferNotification_(.*):
        class: CoreMedia
        name: "CMSampleBufferNotification#{g[0]}"    
    kCMSampleBufferConduitNotification_(.*):
        class: CoreMedia
        name: "CMSampleBufferConduitNotification#{g[0]}"
    kCMSampleBufferConduitNotificationParameter_(.*):
        class: CoreMedia
        name: "CMSampleBufferConduitNotificationParameter#{g[0]}"
    kCMSampleBufferConsumerNotification_(.*):
        class: CoreMedia
        name: "CMSampleBufferConsumerNotification#{g[0]}"
    kCMSampleAttachmentKey_(.*):
        class: CoreMedia
        name: "CMSampleBufferSampleAttachmentKey#{g[0]}"
    kCMSampleBufferAttachmentKey_(.*):
        class: CoreMedia
        name: "CMSampleBufferSampleBufferAttachmentKey#{g[0]}"
    kCMSampleBufferDroppedFrameReason_(.*):
        class: CoreMedia
        name: "CMSampleBufferDroppedFrameReason#{g[0]}"
    kCMSampleBufferDroppedFrameReasonInfo_(.*):
        class: CoreMedia
        name: "CMSampleBufferDroppedFrameReasonInfo#{g[0]}"
    
    kCMMemoryPoolOption_(.*):
        class: CoreMedia
        name: "CMMemoryPoolOption#{g[0]}"

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?CM.*):
        class: CoreMedia
        name: 'Value__#{g[0]}'

constants:
    # CMTime
    kCMTime(MaxTimescale):
        class: CMTime
        name: 'get#{g[0]}'

    # CMBlockBuffer
    kCMBlockBuffer(CustomBlockSourceVersion):
        class: CMBlockBuffer
        name: 'get#{g[0]}'

    kCMPersistentTrackID_Invalid:
        class: CoreMedia
        name: "PersistentTrackIDInvalid"

    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?CM.*):
        class: CoreMedia
        name: 'Constant__#{g[0]}'
