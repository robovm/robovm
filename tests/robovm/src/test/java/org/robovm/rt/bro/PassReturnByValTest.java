/*
 * Copyright (C) 2015 RoboVM AB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.robovm.rt.bro;

import static org.junit.Assert.*;

import org.junit.Test;
import org.robovm.rt.*;
import org.robovm.rt.bro.*;
import org.robovm.rt.bro.annotation.*;

/**
 * Autogenerated test that tests passing and returning structs {@link ByVal}.
 */
@SuppressWarnings("unused")
@Library(Library.INTERNAL)
public class PassReturnByValTest {
    static { Bro.bind(PassReturnByValTest.class); }

    private static void assertEquals(float expected, float actual) {
        org.junit.Assert.assertEquals(expected, actual, 0.0f);
    }
    private static void assertEquals(double expected, double actual) {
        org.junit.Assert.assertEquals(expected, actual, 0.0);
    }
    static class S1_0 extends Struct<S1_0> {
        @StructMember(0) public native byte m0_0(); @StructMember(0) public native S1_0 m0_0(byte v);
    }
    static class S1_1 extends Struct<S1_1> {
        @StructMember(0) public native short m0_0(); @StructMember(0) public native S1_1 m0_0(short v);
    }
    static class S1_2 extends Struct<S1_2> {
        @StructMember(0) public native int m0_0(); @StructMember(0) public native S1_2 m0_0(int v);
    }
    static class S1_3 extends Struct<S1_3> {
        @StructMember(0) public native long m0_0(); @StructMember(0) public native S1_3 m0_0(long v);
    }
    static class S1_4 extends Struct<S1_4> {
        @StructMember(0) public native float m0_0(); @StructMember(0) public native S1_4 m0_0(float v);
    }
    static class S1_5 extends Struct<S1_5> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S1_5 m0_0(double v);
    }
    static class S1_6 extends Struct<S1_6> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S1_6 m0_0(double v);
        @StructMember(1) public native byte m0_1(); @StructMember(1) public native S1_6 m0_1(byte v);
    }
    static class S2_0 extends Struct<S2_0> {
        @StructMember(0) public native byte m0_0(); @StructMember(0) public native S2_0 m0_0(byte v);
        @StructMember(1) public native byte m1_0(); @StructMember(1) public native S2_0 m1_0(byte v);
    }
    static class S2_1 extends Struct<S2_1> {
        @StructMember(0) public native short m0_0(); @StructMember(0) public native S2_1 m0_0(short v);
        @StructMember(1) public native short m1_0(); @StructMember(1) public native S2_1 m1_0(short v);
    }
    static class S2_2 extends Struct<S2_2> {
        @StructMember(0) public native int m0_0(); @StructMember(0) public native S2_2 m0_0(int v);
        @StructMember(1) public native int m1_0(); @StructMember(1) public native S2_2 m1_0(int v);
    }
    static class S2_3 extends Struct<S2_3> {
        @StructMember(0) public native long m0_0(); @StructMember(0) public native S2_3 m0_0(long v);
        @StructMember(1) public native long m1_0(); @StructMember(1) public native S2_3 m1_0(long v);
    }
    static class S2_4 extends Struct<S2_4> {
        @StructMember(0) public native float m0_0(); @StructMember(0) public native S2_4 m0_0(float v);
        @StructMember(1) public native float m1_0(); @StructMember(1) public native S2_4 m1_0(float v);
    }
    static class S2_5 extends Struct<S2_5> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S2_5 m0_0(double v);
        @StructMember(1) public native double m1_0(); @StructMember(1) public native S2_5 m1_0(double v);
    }
    static class S2_6 extends Struct<S2_6> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S2_6 m0_0(double v);
        @StructMember(1) public native byte m0_1(); @StructMember(1) public native S2_6 m0_1(byte v);
        @StructMember(2) public native double m1_0(); @StructMember(2) public native S2_6 m1_0(double v);
        @StructMember(3) public native byte m1_1(); @StructMember(3) public native S2_6 m1_1(byte v);
    }
    static class S3_0 extends Struct<S3_0> {
        @StructMember(0) public native byte m0_0(); @StructMember(0) public native S3_0 m0_0(byte v);
        @StructMember(1) public native byte m1_0(); @StructMember(1) public native S3_0 m1_0(byte v);
        @StructMember(2) public native byte m2_0(); @StructMember(2) public native S3_0 m2_0(byte v);
    }
    static class S3_1 extends Struct<S3_1> {
        @StructMember(0) public native short m0_0(); @StructMember(0) public native S3_1 m0_0(short v);
        @StructMember(1) public native short m1_0(); @StructMember(1) public native S3_1 m1_0(short v);
        @StructMember(2) public native short m2_0(); @StructMember(2) public native S3_1 m2_0(short v);
    }
    static class S3_2 extends Struct<S3_2> {
        @StructMember(0) public native int m0_0(); @StructMember(0) public native S3_2 m0_0(int v);
        @StructMember(1) public native int m1_0(); @StructMember(1) public native S3_2 m1_0(int v);
        @StructMember(2) public native int m2_0(); @StructMember(2) public native S3_2 m2_0(int v);
    }
    static class S3_3 extends Struct<S3_3> {
        @StructMember(0) public native long m0_0(); @StructMember(0) public native S3_3 m0_0(long v);
        @StructMember(1) public native long m1_0(); @StructMember(1) public native S3_3 m1_0(long v);
        @StructMember(2) public native long m2_0(); @StructMember(2) public native S3_3 m2_0(long v);
    }
    static class S3_4 extends Struct<S3_4> {
        @StructMember(0) public native float m0_0(); @StructMember(0) public native S3_4 m0_0(float v);
        @StructMember(1) public native float m1_0(); @StructMember(1) public native S3_4 m1_0(float v);
        @StructMember(2) public native float m2_0(); @StructMember(2) public native S3_4 m2_0(float v);
    }
    static class S3_5 extends Struct<S3_5> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S3_5 m0_0(double v);
        @StructMember(1) public native double m1_0(); @StructMember(1) public native S3_5 m1_0(double v);
        @StructMember(2) public native double m2_0(); @StructMember(2) public native S3_5 m2_0(double v);
    }
    static class S3_6 extends Struct<S3_6> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S3_6 m0_0(double v);
        @StructMember(1) public native byte m0_1(); @StructMember(1) public native S3_6 m0_1(byte v);
        @StructMember(2) public native double m1_0(); @StructMember(2) public native S3_6 m1_0(double v);
        @StructMember(3) public native byte m1_1(); @StructMember(3) public native S3_6 m1_1(byte v);
        @StructMember(4) public native double m2_0(); @StructMember(4) public native S3_6 m2_0(double v);
        @StructMember(5) public native byte m2_1(); @StructMember(5) public native S3_6 m2_1(byte v);
    }
    static class S4_0 extends Struct<S4_0> {
        @StructMember(0) public native byte m0_0(); @StructMember(0) public native S4_0 m0_0(byte v);
        @StructMember(1) public native byte m1_0(); @StructMember(1) public native S4_0 m1_0(byte v);
        @StructMember(2) public native byte m2_0(); @StructMember(2) public native S4_0 m2_0(byte v);
        @StructMember(3) public native byte m3_0(); @StructMember(3) public native S4_0 m3_0(byte v);
    }
    static class S4_1 extends Struct<S4_1> {
        @StructMember(0) public native short m0_0(); @StructMember(0) public native S4_1 m0_0(short v);
        @StructMember(1) public native short m1_0(); @StructMember(1) public native S4_1 m1_0(short v);
        @StructMember(2) public native short m2_0(); @StructMember(2) public native S4_1 m2_0(short v);
        @StructMember(3) public native short m3_0(); @StructMember(3) public native S4_1 m3_0(short v);
    }
    static class S4_2 extends Struct<S4_2> {
        @StructMember(0) public native int m0_0(); @StructMember(0) public native S4_2 m0_0(int v);
        @StructMember(1) public native int m1_0(); @StructMember(1) public native S4_2 m1_0(int v);
        @StructMember(2) public native int m2_0(); @StructMember(2) public native S4_2 m2_0(int v);
        @StructMember(3) public native int m3_0(); @StructMember(3) public native S4_2 m3_0(int v);
    }
    static class S4_3 extends Struct<S4_3> {
        @StructMember(0) public native long m0_0(); @StructMember(0) public native S4_3 m0_0(long v);
        @StructMember(1) public native long m1_0(); @StructMember(1) public native S4_3 m1_0(long v);
        @StructMember(2) public native long m2_0(); @StructMember(2) public native S4_3 m2_0(long v);
        @StructMember(3) public native long m3_0(); @StructMember(3) public native S4_3 m3_0(long v);
    }
    static class S4_4 extends Struct<S4_4> {
        @StructMember(0) public native float m0_0(); @StructMember(0) public native S4_4 m0_0(float v);
        @StructMember(1) public native float m1_0(); @StructMember(1) public native S4_4 m1_0(float v);
        @StructMember(2) public native float m2_0(); @StructMember(2) public native S4_4 m2_0(float v);
        @StructMember(3) public native float m3_0(); @StructMember(3) public native S4_4 m3_0(float v);
    }
    static class S4_5 extends Struct<S4_5> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S4_5 m0_0(double v);
        @StructMember(1) public native double m1_0(); @StructMember(1) public native S4_5 m1_0(double v);
        @StructMember(2) public native double m2_0(); @StructMember(2) public native S4_5 m2_0(double v);
        @StructMember(3) public native double m3_0(); @StructMember(3) public native S4_5 m3_0(double v);
    }
    static class S4_6 extends Struct<S4_6> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S4_6 m0_0(double v);
        @StructMember(1) public native byte m0_1(); @StructMember(1) public native S4_6 m0_1(byte v);
        @StructMember(2) public native double m1_0(); @StructMember(2) public native S4_6 m1_0(double v);
        @StructMember(3) public native byte m1_1(); @StructMember(3) public native S4_6 m1_1(byte v);
        @StructMember(4) public native double m2_0(); @StructMember(4) public native S4_6 m2_0(double v);
        @StructMember(5) public native byte m2_1(); @StructMember(5) public native S4_6 m2_1(byte v);
        @StructMember(6) public native double m3_0(); @StructMember(6) public native S4_6 m3_0(double v);
        @StructMember(7) public native byte m3_1(); @StructMember(7) public native S4_6 m3_1(byte v);
    }
    static class S5_0 extends Struct<S5_0> {
        @StructMember(0) public native byte m0_0(); @StructMember(0) public native S5_0 m0_0(byte v);
        @StructMember(1) public native byte m1_0(); @StructMember(1) public native S5_0 m1_0(byte v);
        @StructMember(2) public native byte m2_0(); @StructMember(2) public native S5_0 m2_0(byte v);
        @StructMember(3) public native byte m3_0(); @StructMember(3) public native S5_0 m3_0(byte v);
        @StructMember(4) public native byte m4_0(); @StructMember(4) public native S5_0 m4_0(byte v);
    }
    static class S5_1 extends Struct<S5_1> {
        @StructMember(0) public native short m0_0(); @StructMember(0) public native S5_1 m0_0(short v);
        @StructMember(1) public native short m1_0(); @StructMember(1) public native S5_1 m1_0(short v);
        @StructMember(2) public native short m2_0(); @StructMember(2) public native S5_1 m2_0(short v);
        @StructMember(3) public native short m3_0(); @StructMember(3) public native S5_1 m3_0(short v);
        @StructMember(4) public native short m4_0(); @StructMember(4) public native S5_1 m4_0(short v);
    }
    static class S5_2 extends Struct<S5_2> {
        @StructMember(0) public native int m0_0(); @StructMember(0) public native S5_2 m0_0(int v);
        @StructMember(1) public native int m1_0(); @StructMember(1) public native S5_2 m1_0(int v);
        @StructMember(2) public native int m2_0(); @StructMember(2) public native S5_2 m2_0(int v);
        @StructMember(3) public native int m3_0(); @StructMember(3) public native S5_2 m3_0(int v);
        @StructMember(4) public native int m4_0(); @StructMember(4) public native S5_2 m4_0(int v);
    }
    static class S5_3 extends Struct<S5_3> {
        @StructMember(0) public native long m0_0(); @StructMember(0) public native S5_3 m0_0(long v);
        @StructMember(1) public native long m1_0(); @StructMember(1) public native S5_3 m1_0(long v);
        @StructMember(2) public native long m2_0(); @StructMember(2) public native S5_3 m2_0(long v);
        @StructMember(3) public native long m3_0(); @StructMember(3) public native S5_3 m3_0(long v);
        @StructMember(4) public native long m4_0(); @StructMember(4) public native S5_3 m4_0(long v);
    }
    static class S5_4 extends Struct<S5_4> {
        @StructMember(0) public native float m0_0(); @StructMember(0) public native S5_4 m0_0(float v);
        @StructMember(1) public native float m1_0(); @StructMember(1) public native S5_4 m1_0(float v);
        @StructMember(2) public native float m2_0(); @StructMember(2) public native S5_4 m2_0(float v);
        @StructMember(3) public native float m3_0(); @StructMember(3) public native S5_4 m3_0(float v);
        @StructMember(4) public native float m4_0(); @StructMember(4) public native S5_4 m4_0(float v);
    }
    static class S5_5 extends Struct<S5_5> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S5_5 m0_0(double v);
        @StructMember(1) public native double m1_0(); @StructMember(1) public native S5_5 m1_0(double v);
        @StructMember(2) public native double m2_0(); @StructMember(2) public native S5_5 m2_0(double v);
        @StructMember(3) public native double m3_0(); @StructMember(3) public native S5_5 m3_0(double v);
        @StructMember(4) public native double m4_0(); @StructMember(4) public native S5_5 m4_0(double v);
    }
    static class S5_6 extends Struct<S5_6> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S5_6 m0_0(double v);
        @StructMember(1) public native byte m0_1(); @StructMember(1) public native S5_6 m0_1(byte v);
        @StructMember(2) public native double m1_0(); @StructMember(2) public native S5_6 m1_0(double v);
        @StructMember(3) public native byte m1_1(); @StructMember(3) public native S5_6 m1_1(byte v);
        @StructMember(4) public native double m2_0(); @StructMember(4) public native S5_6 m2_0(double v);
        @StructMember(5) public native byte m2_1(); @StructMember(5) public native S5_6 m2_1(byte v);
        @StructMember(6) public native double m3_0(); @StructMember(6) public native S5_6 m3_0(double v);
        @StructMember(7) public native byte m3_1(); @StructMember(7) public native S5_6 m3_1(byte v);
        @StructMember(8) public native double m4_0(); @StructMember(8) public native S5_6 m4_0(double v);
        @StructMember(9) public native byte m4_1(); @StructMember(9) public native S5_6 m4_1(byte v);
    }
    static class S6_0 extends Struct<S6_0> {
        @StructMember(0) public native byte m0_0(); @StructMember(0) public native S6_0 m0_0(byte v);
        @StructMember(1) public native byte m1_0(); @StructMember(1) public native S6_0 m1_0(byte v);
        @StructMember(2) public native byte m2_0(); @StructMember(2) public native S6_0 m2_0(byte v);
        @StructMember(3) public native byte m3_0(); @StructMember(3) public native S6_0 m3_0(byte v);
        @StructMember(4) public native byte m4_0(); @StructMember(4) public native S6_0 m4_0(byte v);
        @StructMember(5) public native byte m5_0(); @StructMember(5) public native S6_0 m5_0(byte v);
    }
    static class S6_1 extends Struct<S6_1> {
        @StructMember(0) public native short m0_0(); @StructMember(0) public native S6_1 m0_0(short v);
        @StructMember(1) public native short m1_0(); @StructMember(1) public native S6_1 m1_0(short v);
        @StructMember(2) public native short m2_0(); @StructMember(2) public native S6_1 m2_0(short v);
        @StructMember(3) public native short m3_0(); @StructMember(3) public native S6_1 m3_0(short v);
        @StructMember(4) public native short m4_0(); @StructMember(4) public native S6_1 m4_0(short v);
        @StructMember(5) public native short m5_0(); @StructMember(5) public native S6_1 m5_0(short v);
    }
    static class S6_2 extends Struct<S6_2> {
        @StructMember(0) public native int m0_0(); @StructMember(0) public native S6_2 m0_0(int v);
        @StructMember(1) public native int m1_0(); @StructMember(1) public native S6_2 m1_0(int v);
        @StructMember(2) public native int m2_0(); @StructMember(2) public native S6_2 m2_0(int v);
        @StructMember(3) public native int m3_0(); @StructMember(3) public native S6_2 m3_0(int v);
        @StructMember(4) public native int m4_0(); @StructMember(4) public native S6_2 m4_0(int v);
        @StructMember(5) public native int m5_0(); @StructMember(5) public native S6_2 m5_0(int v);
    }
    static class S6_3 extends Struct<S6_3> {
        @StructMember(0) public native long m0_0(); @StructMember(0) public native S6_3 m0_0(long v);
        @StructMember(1) public native long m1_0(); @StructMember(1) public native S6_3 m1_0(long v);
        @StructMember(2) public native long m2_0(); @StructMember(2) public native S6_3 m2_0(long v);
        @StructMember(3) public native long m3_0(); @StructMember(3) public native S6_3 m3_0(long v);
        @StructMember(4) public native long m4_0(); @StructMember(4) public native S6_3 m4_0(long v);
        @StructMember(5) public native long m5_0(); @StructMember(5) public native S6_3 m5_0(long v);
    }
    static class S6_4 extends Struct<S6_4> {
        @StructMember(0) public native float m0_0(); @StructMember(0) public native S6_4 m0_0(float v);
        @StructMember(1) public native float m1_0(); @StructMember(1) public native S6_4 m1_0(float v);
        @StructMember(2) public native float m2_0(); @StructMember(2) public native S6_4 m2_0(float v);
        @StructMember(3) public native float m3_0(); @StructMember(3) public native S6_4 m3_0(float v);
        @StructMember(4) public native float m4_0(); @StructMember(4) public native S6_4 m4_0(float v);
        @StructMember(5) public native float m5_0(); @StructMember(5) public native S6_4 m5_0(float v);
    }
    static class S6_5 extends Struct<S6_5> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S6_5 m0_0(double v);
        @StructMember(1) public native double m1_0(); @StructMember(1) public native S6_5 m1_0(double v);
        @StructMember(2) public native double m2_0(); @StructMember(2) public native S6_5 m2_0(double v);
        @StructMember(3) public native double m3_0(); @StructMember(3) public native S6_5 m3_0(double v);
        @StructMember(4) public native double m4_0(); @StructMember(4) public native S6_5 m4_0(double v);
        @StructMember(5) public native double m5_0(); @StructMember(5) public native S6_5 m5_0(double v);
    }
    static class S6_6 extends Struct<S6_6> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S6_6 m0_0(double v);
        @StructMember(1) public native byte m0_1(); @StructMember(1) public native S6_6 m0_1(byte v);
        @StructMember(2) public native double m1_0(); @StructMember(2) public native S6_6 m1_0(double v);
        @StructMember(3) public native byte m1_1(); @StructMember(3) public native S6_6 m1_1(byte v);
        @StructMember(4) public native double m2_0(); @StructMember(4) public native S6_6 m2_0(double v);
        @StructMember(5) public native byte m2_1(); @StructMember(5) public native S6_6 m2_1(byte v);
        @StructMember(6) public native double m3_0(); @StructMember(6) public native S6_6 m3_0(double v);
        @StructMember(7) public native byte m3_1(); @StructMember(7) public native S6_6 m3_1(byte v);
        @StructMember(8) public native double m4_0(); @StructMember(8) public native S6_6 m4_0(double v);
        @StructMember(9) public native byte m4_1(); @StructMember(9) public native S6_6 m4_1(byte v);
        @StructMember(10) public native double m5_0(); @StructMember(10) public native S6_6 m5_0(double v);
        @StructMember(11) public native byte m5_1(); @StructMember(11) public native S6_6 m5_1(byte v);
    }
    static class S7_0 extends Struct<S7_0> {
        @StructMember(0) public native byte m0_0(); @StructMember(0) public native S7_0 m0_0(byte v);
        @StructMember(1) public native byte m1_0(); @StructMember(1) public native S7_0 m1_0(byte v);
        @StructMember(2) public native byte m2_0(); @StructMember(2) public native S7_0 m2_0(byte v);
        @StructMember(3) public native byte m3_0(); @StructMember(3) public native S7_0 m3_0(byte v);
        @StructMember(4) public native byte m4_0(); @StructMember(4) public native S7_0 m4_0(byte v);
        @StructMember(5) public native byte m5_0(); @StructMember(5) public native S7_0 m5_0(byte v);
        @StructMember(6) public native byte m6_0(); @StructMember(6) public native S7_0 m6_0(byte v);
    }
    static class S7_1 extends Struct<S7_1> {
        @StructMember(0) public native short m0_0(); @StructMember(0) public native S7_1 m0_0(short v);
        @StructMember(1) public native short m1_0(); @StructMember(1) public native S7_1 m1_0(short v);
        @StructMember(2) public native short m2_0(); @StructMember(2) public native S7_1 m2_0(short v);
        @StructMember(3) public native short m3_0(); @StructMember(3) public native S7_1 m3_0(short v);
        @StructMember(4) public native short m4_0(); @StructMember(4) public native S7_1 m4_0(short v);
        @StructMember(5) public native short m5_0(); @StructMember(5) public native S7_1 m5_0(short v);
        @StructMember(6) public native short m6_0(); @StructMember(6) public native S7_1 m6_0(short v);
    }
    static class S7_2 extends Struct<S7_2> {
        @StructMember(0) public native int m0_0(); @StructMember(0) public native S7_2 m0_0(int v);
        @StructMember(1) public native int m1_0(); @StructMember(1) public native S7_2 m1_0(int v);
        @StructMember(2) public native int m2_0(); @StructMember(2) public native S7_2 m2_0(int v);
        @StructMember(3) public native int m3_0(); @StructMember(3) public native S7_2 m3_0(int v);
        @StructMember(4) public native int m4_0(); @StructMember(4) public native S7_2 m4_0(int v);
        @StructMember(5) public native int m5_0(); @StructMember(5) public native S7_2 m5_0(int v);
        @StructMember(6) public native int m6_0(); @StructMember(6) public native S7_2 m6_0(int v);
    }
    static class S7_3 extends Struct<S7_3> {
        @StructMember(0) public native long m0_0(); @StructMember(0) public native S7_3 m0_0(long v);
        @StructMember(1) public native long m1_0(); @StructMember(1) public native S7_3 m1_0(long v);
        @StructMember(2) public native long m2_0(); @StructMember(2) public native S7_3 m2_0(long v);
        @StructMember(3) public native long m3_0(); @StructMember(3) public native S7_3 m3_0(long v);
        @StructMember(4) public native long m4_0(); @StructMember(4) public native S7_3 m4_0(long v);
        @StructMember(5) public native long m5_0(); @StructMember(5) public native S7_3 m5_0(long v);
        @StructMember(6) public native long m6_0(); @StructMember(6) public native S7_3 m6_0(long v);
    }
    static class S7_4 extends Struct<S7_4> {
        @StructMember(0) public native float m0_0(); @StructMember(0) public native S7_4 m0_0(float v);
        @StructMember(1) public native float m1_0(); @StructMember(1) public native S7_4 m1_0(float v);
        @StructMember(2) public native float m2_0(); @StructMember(2) public native S7_4 m2_0(float v);
        @StructMember(3) public native float m3_0(); @StructMember(3) public native S7_4 m3_0(float v);
        @StructMember(4) public native float m4_0(); @StructMember(4) public native S7_4 m4_0(float v);
        @StructMember(5) public native float m5_0(); @StructMember(5) public native S7_4 m5_0(float v);
        @StructMember(6) public native float m6_0(); @StructMember(6) public native S7_4 m6_0(float v);
    }
    static class S7_5 extends Struct<S7_5> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S7_5 m0_0(double v);
        @StructMember(1) public native double m1_0(); @StructMember(1) public native S7_5 m1_0(double v);
        @StructMember(2) public native double m2_0(); @StructMember(2) public native S7_5 m2_0(double v);
        @StructMember(3) public native double m3_0(); @StructMember(3) public native S7_5 m3_0(double v);
        @StructMember(4) public native double m4_0(); @StructMember(4) public native S7_5 m4_0(double v);
        @StructMember(5) public native double m5_0(); @StructMember(5) public native S7_5 m5_0(double v);
        @StructMember(6) public native double m6_0(); @StructMember(6) public native S7_5 m6_0(double v);
    }
    static class S7_6 extends Struct<S7_6> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S7_6 m0_0(double v);
        @StructMember(1) public native byte m0_1(); @StructMember(1) public native S7_6 m0_1(byte v);
        @StructMember(2) public native double m1_0(); @StructMember(2) public native S7_6 m1_0(double v);
        @StructMember(3) public native byte m1_1(); @StructMember(3) public native S7_6 m1_1(byte v);
        @StructMember(4) public native double m2_0(); @StructMember(4) public native S7_6 m2_0(double v);
        @StructMember(5) public native byte m2_1(); @StructMember(5) public native S7_6 m2_1(byte v);
        @StructMember(6) public native double m3_0(); @StructMember(6) public native S7_6 m3_0(double v);
        @StructMember(7) public native byte m3_1(); @StructMember(7) public native S7_6 m3_1(byte v);
        @StructMember(8) public native double m4_0(); @StructMember(8) public native S7_6 m4_0(double v);
        @StructMember(9) public native byte m4_1(); @StructMember(9) public native S7_6 m4_1(byte v);
        @StructMember(10) public native double m5_0(); @StructMember(10) public native S7_6 m5_0(double v);
        @StructMember(11) public native byte m5_1(); @StructMember(11) public native S7_6 m5_1(byte v);
        @StructMember(12) public native double m6_0(); @StructMember(12) public native S7_6 m6_0(double v);
        @StructMember(13) public native byte m6_1(); @StructMember(13) public native S7_6 m6_1(byte v);
    }
    static class S8_0 extends Struct<S8_0> {
        @StructMember(0) public native byte m0_0(); @StructMember(0) public native S8_0 m0_0(byte v);
        @StructMember(1) public native byte m1_0(); @StructMember(1) public native S8_0 m1_0(byte v);
        @StructMember(2) public native byte m2_0(); @StructMember(2) public native S8_0 m2_0(byte v);
        @StructMember(3) public native byte m3_0(); @StructMember(3) public native S8_0 m3_0(byte v);
        @StructMember(4) public native byte m4_0(); @StructMember(4) public native S8_0 m4_0(byte v);
        @StructMember(5) public native byte m5_0(); @StructMember(5) public native S8_0 m5_0(byte v);
        @StructMember(6) public native byte m6_0(); @StructMember(6) public native S8_0 m6_0(byte v);
        @StructMember(7) public native byte m7_0(); @StructMember(7) public native S8_0 m7_0(byte v);
    }
    static class S8_1 extends Struct<S8_1> {
        @StructMember(0) public native short m0_0(); @StructMember(0) public native S8_1 m0_0(short v);
        @StructMember(1) public native short m1_0(); @StructMember(1) public native S8_1 m1_0(short v);
        @StructMember(2) public native short m2_0(); @StructMember(2) public native S8_1 m2_0(short v);
        @StructMember(3) public native short m3_0(); @StructMember(3) public native S8_1 m3_0(short v);
        @StructMember(4) public native short m4_0(); @StructMember(4) public native S8_1 m4_0(short v);
        @StructMember(5) public native short m5_0(); @StructMember(5) public native S8_1 m5_0(short v);
        @StructMember(6) public native short m6_0(); @StructMember(6) public native S8_1 m6_0(short v);
        @StructMember(7) public native short m7_0(); @StructMember(7) public native S8_1 m7_0(short v);
    }
    static class S8_2 extends Struct<S8_2> {
        @StructMember(0) public native int m0_0(); @StructMember(0) public native S8_2 m0_0(int v);
        @StructMember(1) public native int m1_0(); @StructMember(1) public native S8_2 m1_0(int v);
        @StructMember(2) public native int m2_0(); @StructMember(2) public native S8_2 m2_0(int v);
        @StructMember(3) public native int m3_0(); @StructMember(3) public native S8_2 m3_0(int v);
        @StructMember(4) public native int m4_0(); @StructMember(4) public native S8_2 m4_0(int v);
        @StructMember(5) public native int m5_0(); @StructMember(5) public native S8_2 m5_0(int v);
        @StructMember(6) public native int m6_0(); @StructMember(6) public native S8_2 m6_0(int v);
        @StructMember(7) public native int m7_0(); @StructMember(7) public native S8_2 m7_0(int v);
    }
    static class S8_3 extends Struct<S8_3> {
        @StructMember(0) public native long m0_0(); @StructMember(0) public native S8_3 m0_0(long v);
        @StructMember(1) public native long m1_0(); @StructMember(1) public native S8_3 m1_0(long v);
        @StructMember(2) public native long m2_0(); @StructMember(2) public native S8_3 m2_0(long v);
        @StructMember(3) public native long m3_0(); @StructMember(3) public native S8_3 m3_0(long v);
        @StructMember(4) public native long m4_0(); @StructMember(4) public native S8_3 m4_0(long v);
        @StructMember(5) public native long m5_0(); @StructMember(5) public native S8_3 m5_0(long v);
        @StructMember(6) public native long m6_0(); @StructMember(6) public native S8_3 m6_0(long v);
        @StructMember(7) public native long m7_0(); @StructMember(7) public native S8_3 m7_0(long v);
    }
    static class S8_4 extends Struct<S8_4> {
        @StructMember(0) public native float m0_0(); @StructMember(0) public native S8_4 m0_0(float v);
        @StructMember(1) public native float m1_0(); @StructMember(1) public native S8_4 m1_0(float v);
        @StructMember(2) public native float m2_0(); @StructMember(2) public native S8_4 m2_0(float v);
        @StructMember(3) public native float m3_0(); @StructMember(3) public native S8_4 m3_0(float v);
        @StructMember(4) public native float m4_0(); @StructMember(4) public native S8_4 m4_0(float v);
        @StructMember(5) public native float m5_0(); @StructMember(5) public native S8_4 m5_0(float v);
        @StructMember(6) public native float m6_0(); @StructMember(6) public native S8_4 m6_0(float v);
        @StructMember(7) public native float m7_0(); @StructMember(7) public native S8_4 m7_0(float v);
    }
    static class S8_5 extends Struct<S8_5> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S8_5 m0_0(double v);
        @StructMember(1) public native double m1_0(); @StructMember(1) public native S8_5 m1_0(double v);
        @StructMember(2) public native double m2_0(); @StructMember(2) public native S8_5 m2_0(double v);
        @StructMember(3) public native double m3_0(); @StructMember(3) public native S8_5 m3_0(double v);
        @StructMember(4) public native double m4_0(); @StructMember(4) public native S8_5 m4_0(double v);
        @StructMember(5) public native double m5_0(); @StructMember(5) public native S8_5 m5_0(double v);
        @StructMember(6) public native double m6_0(); @StructMember(6) public native S8_5 m6_0(double v);
        @StructMember(7) public native double m7_0(); @StructMember(7) public native S8_5 m7_0(double v);
    }
    static class S8_6 extends Struct<S8_6> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S8_6 m0_0(double v);
        @StructMember(1) public native byte m0_1(); @StructMember(1) public native S8_6 m0_1(byte v);
        @StructMember(2) public native double m1_0(); @StructMember(2) public native S8_6 m1_0(double v);
        @StructMember(3) public native byte m1_1(); @StructMember(3) public native S8_6 m1_1(byte v);
        @StructMember(4) public native double m2_0(); @StructMember(4) public native S8_6 m2_0(double v);
        @StructMember(5) public native byte m2_1(); @StructMember(5) public native S8_6 m2_1(byte v);
        @StructMember(6) public native double m3_0(); @StructMember(6) public native S8_6 m3_0(double v);
        @StructMember(7) public native byte m3_1(); @StructMember(7) public native S8_6 m3_1(byte v);
        @StructMember(8) public native double m4_0(); @StructMember(8) public native S8_6 m4_0(double v);
        @StructMember(9) public native byte m4_1(); @StructMember(9) public native S8_6 m4_1(byte v);
        @StructMember(10) public native double m5_0(); @StructMember(10) public native S8_6 m5_0(double v);
        @StructMember(11) public native byte m5_1(); @StructMember(11) public native S8_6 m5_1(byte v);
        @StructMember(12) public native double m6_0(); @StructMember(12) public native S8_6 m6_0(double v);
        @StructMember(13) public native byte m6_1(); @StructMember(13) public native S8_6 m6_1(byte v);
        @StructMember(14) public native double m7_0(); @StructMember(14) public native S8_6 m7_0(double v);
        @StructMember(15) public native byte m7_1(); @StructMember(15) public native S8_6 m7_1(byte v);
    }
    static class S9_0 extends Struct<S9_0> {
        @StructMember(0) public native byte m0_0(); @StructMember(0) public native S9_0 m0_0(byte v);
        @StructMember(1) public native byte m1_0(); @StructMember(1) public native S9_0 m1_0(byte v);
        @StructMember(2) public native byte m2_0(); @StructMember(2) public native S9_0 m2_0(byte v);
        @StructMember(3) public native byte m3_0(); @StructMember(3) public native S9_0 m3_0(byte v);
        @StructMember(4) public native byte m4_0(); @StructMember(4) public native S9_0 m4_0(byte v);
        @StructMember(5) public native byte m5_0(); @StructMember(5) public native S9_0 m5_0(byte v);
        @StructMember(6) public native byte m6_0(); @StructMember(6) public native S9_0 m6_0(byte v);
        @StructMember(7) public native byte m7_0(); @StructMember(7) public native S9_0 m7_0(byte v);
        @StructMember(8) public native byte m8_0(); @StructMember(8) public native S9_0 m8_0(byte v);
    }
    static class S9_1 extends Struct<S9_1> {
        @StructMember(0) public native short m0_0(); @StructMember(0) public native S9_1 m0_0(short v);
        @StructMember(1) public native short m1_0(); @StructMember(1) public native S9_1 m1_0(short v);
        @StructMember(2) public native short m2_0(); @StructMember(2) public native S9_1 m2_0(short v);
        @StructMember(3) public native short m3_0(); @StructMember(3) public native S9_1 m3_0(short v);
        @StructMember(4) public native short m4_0(); @StructMember(4) public native S9_1 m4_0(short v);
        @StructMember(5) public native short m5_0(); @StructMember(5) public native S9_1 m5_0(short v);
        @StructMember(6) public native short m6_0(); @StructMember(6) public native S9_1 m6_0(short v);
        @StructMember(7) public native short m7_0(); @StructMember(7) public native S9_1 m7_0(short v);
        @StructMember(8) public native short m8_0(); @StructMember(8) public native S9_1 m8_0(short v);
    }
    static class S9_2 extends Struct<S9_2> {
        @StructMember(0) public native int m0_0(); @StructMember(0) public native S9_2 m0_0(int v);
        @StructMember(1) public native int m1_0(); @StructMember(1) public native S9_2 m1_0(int v);
        @StructMember(2) public native int m2_0(); @StructMember(2) public native S9_2 m2_0(int v);
        @StructMember(3) public native int m3_0(); @StructMember(3) public native S9_2 m3_0(int v);
        @StructMember(4) public native int m4_0(); @StructMember(4) public native S9_2 m4_0(int v);
        @StructMember(5) public native int m5_0(); @StructMember(5) public native S9_2 m5_0(int v);
        @StructMember(6) public native int m6_0(); @StructMember(6) public native S9_2 m6_0(int v);
        @StructMember(7) public native int m7_0(); @StructMember(7) public native S9_2 m7_0(int v);
        @StructMember(8) public native int m8_0(); @StructMember(8) public native S9_2 m8_0(int v);
    }
    static class S9_3 extends Struct<S9_3> {
        @StructMember(0) public native long m0_0(); @StructMember(0) public native S9_3 m0_0(long v);
        @StructMember(1) public native long m1_0(); @StructMember(1) public native S9_3 m1_0(long v);
        @StructMember(2) public native long m2_0(); @StructMember(2) public native S9_3 m2_0(long v);
        @StructMember(3) public native long m3_0(); @StructMember(3) public native S9_3 m3_0(long v);
        @StructMember(4) public native long m4_0(); @StructMember(4) public native S9_3 m4_0(long v);
        @StructMember(5) public native long m5_0(); @StructMember(5) public native S9_3 m5_0(long v);
        @StructMember(6) public native long m6_0(); @StructMember(6) public native S9_3 m6_0(long v);
        @StructMember(7) public native long m7_0(); @StructMember(7) public native S9_3 m7_0(long v);
        @StructMember(8) public native long m8_0(); @StructMember(8) public native S9_3 m8_0(long v);
    }
    static class S9_4 extends Struct<S9_4> {
        @StructMember(0) public native float m0_0(); @StructMember(0) public native S9_4 m0_0(float v);
        @StructMember(1) public native float m1_0(); @StructMember(1) public native S9_4 m1_0(float v);
        @StructMember(2) public native float m2_0(); @StructMember(2) public native S9_4 m2_0(float v);
        @StructMember(3) public native float m3_0(); @StructMember(3) public native S9_4 m3_0(float v);
        @StructMember(4) public native float m4_0(); @StructMember(4) public native S9_4 m4_0(float v);
        @StructMember(5) public native float m5_0(); @StructMember(5) public native S9_4 m5_0(float v);
        @StructMember(6) public native float m6_0(); @StructMember(6) public native S9_4 m6_0(float v);
        @StructMember(7) public native float m7_0(); @StructMember(7) public native S9_4 m7_0(float v);
        @StructMember(8) public native float m8_0(); @StructMember(8) public native S9_4 m8_0(float v);
    }
    static class S9_5 extends Struct<S9_5> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S9_5 m0_0(double v);
        @StructMember(1) public native double m1_0(); @StructMember(1) public native S9_5 m1_0(double v);
        @StructMember(2) public native double m2_0(); @StructMember(2) public native S9_5 m2_0(double v);
        @StructMember(3) public native double m3_0(); @StructMember(3) public native S9_5 m3_0(double v);
        @StructMember(4) public native double m4_0(); @StructMember(4) public native S9_5 m4_0(double v);
        @StructMember(5) public native double m5_0(); @StructMember(5) public native S9_5 m5_0(double v);
        @StructMember(6) public native double m6_0(); @StructMember(6) public native S9_5 m6_0(double v);
        @StructMember(7) public native double m7_0(); @StructMember(7) public native S9_5 m7_0(double v);
        @StructMember(8) public native double m8_0(); @StructMember(8) public native S9_5 m8_0(double v);
    }
    static class S9_6 extends Struct<S9_6> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S9_6 m0_0(double v);
        @StructMember(1) public native byte m0_1(); @StructMember(1) public native S9_6 m0_1(byte v);
        @StructMember(2) public native double m1_0(); @StructMember(2) public native S9_6 m1_0(double v);
        @StructMember(3) public native byte m1_1(); @StructMember(3) public native S9_6 m1_1(byte v);
        @StructMember(4) public native double m2_0(); @StructMember(4) public native S9_6 m2_0(double v);
        @StructMember(5) public native byte m2_1(); @StructMember(5) public native S9_6 m2_1(byte v);
        @StructMember(6) public native double m3_0(); @StructMember(6) public native S9_6 m3_0(double v);
        @StructMember(7) public native byte m3_1(); @StructMember(7) public native S9_6 m3_1(byte v);
        @StructMember(8) public native double m4_0(); @StructMember(8) public native S9_6 m4_0(double v);
        @StructMember(9) public native byte m4_1(); @StructMember(9) public native S9_6 m4_1(byte v);
        @StructMember(10) public native double m5_0(); @StructMember(10) public native S9_6 m5_0(double v);
        @StructMember(11) public native byte m5_1(); @StructMember(11) public native S9_6 m5_1(byte v);
        @StructMember(12) public native double m6_0(); @StructMember(12) public native S9_6 m6_0(double v);
        @StructMember(13) public native byte m6_1(); @StructMember(13) public native S9_6 m6_1(byte v);
        @StructMember(14) public native double m7_0(); @StructMember(14) public native S9_6 m7_0(double v);
        @StructMember(15) public native byte m7_1(); @StructMember(15) public native S9_6 m7_1(byte v);
        @StructMember(16) public native double m8_0(); @StructMember(16) public native S9_6 m8_0(double v);
        @StructMember(17) public native byte m8_1(); @StructMember(17) public native S9_6 m8_1(byte v);
    }
    static class S10_0 extends Struct<S10_0> {
        @StructMember(0) public native byte m0_0(); @StructMember(0) public native S10_0 m0_0(byte v);
        @StructMember(1) public native byte m1_0(); @StructMember(1) public native S10_0 m1_0(byte v);
        @StructMember(2) public native byte m2_0(); @StructMember(2) public native S10_0 m2_0(byte v);
        @StructMember(3) public native byte m3_0(); @StructMember(3) public native S10_0 m3_0(byte v);
        @StructMember(4) public native byte m4_0(); @StructMember(4) public native S10_0 m4_0(byte v);
        @StructMember(5) public native byte m5_0(); @StructMember(5) public native S10_0 m5_0(byte v);
        @StructMember(6) public native byte m6_0(); @StructMember(6) public native S10_0 m6_0(byte v);
        @StructMember(7) public native byte m7_0(); @StructMember(7) public native S10_0 m7_0(byte v);
        @StructMember(8) public native byte m8_0(); @StructMember(8) public native S10_0 m8_0(byte v);
        @StructMember(9) public native byte m9_0(); @StructMember(9) public native S10_0 m9_0(byte v);
    }
    static class S10_1 extends Struct<S10_1> {
        @StructMember(0) public native short m0_0(); @StructMember(0) public native S10_1 m0_0(short v);
        @StructMember(1) public native short m1_0(); @StructMember(1) public native S10_1 m1_0(short v);
        @StructMember(2) public native short m2_0(); @StructMember(2) public native S10_1 m2_0(short v);
        @StructMember(3) public native short m3_0(); @StructMember(3) public native S10_1 m3_0(short v);
        @StructMember(4) public native short m4_0(); @StructMember(4) public native S10_1 m4_0(short v);
        @StructMember(5) public native short m5_0(); @StructMember(5) public native S10_1 m5_0(short v);
        @StructMember(6) public native short m6_0(); @StructMember(6) public native S10_1 m6_0(short v);
        @StructMember(7) public native short m7_0(); @StructMember(7) public native S10_1 m7_0(short v);
        @StructMember(8) public native short m8_0(); @StructMember(8) public native S10_1 m8_0(short v);
        @StructMember(9) public native short m9_0(); @StructMember(9) public native S10_1 m9_0(short v);
    }
    static class S10_2 extends Struct<S10_2> {
        @StructMember(0) public native int m0_0(); @StructMember(0) public native S10_2 m0_0(int v);
        @StructMember(1) public native int m1_0(); @StructMember(1) public native S10_2 m1_0(int v);
        @StructMember(2) public native int m2_0(); @StructMember(2) public native S10_2 m2_0(int v);
        @StructMember(3) public native int m3_0(); @StructMember(3) public native S10_2 m3_0(int v);
        @StructMember(4) public native int m4_0(); @StructMember(4) public native S10_2 m4_0(int v);
        @StructMember(5) public native int m5_0(); @StructMember(5) public native S10_2 m5_0(int v);
        @StructMember(6) public native int m6_0(); @StructMember(6) public native S10_2 m6_0(int v);
        @StructMember(7) public native int m7_0(); @StructMember(7) public native S10_2 m7_0(int v);
        @StructMember(8) public native int m8_0(); @StructMember(8) public native S10_2 m8_0(int v);
        @StructMember(9) public native int m9_0(); @StructMember(9) public native S10_2 m9_0(int v);
    }
    static class S10_3 extends Struct<S10_3> {
        @StructMember(0) public native long m0_0(); @StructMember(0) public native S10_3 m0_0(long v);
        @StructMember(1) public native long m1_0(); @StructMember(1) public native S10_3 m1_0(long v);
        @StructMember(2) public native long m2_0(); @StructMember(2) public native S10_3 m2_0(long v);
        @StructMember(3) public native long m3_0(); @StructMember(3) public native S10_3 m3_0(long v);
        @StructMember(4) public native long m4_0(); @StructMember(4) public native S10_3 m4_0(long v);
        @StructMember(5) public native long m5_0(); @StructMember(5) public native S10_3 m5_0(long v);
        @StructMember(6) public native long m6_0(); @StructMember(6) public native S10_3 m6_0(long v);
        @StructMember(7) public native long m7_0(); @StructMember(7) public native S10_3 m7_0(long v);
        @StructMember(8) public native long m8_0(); @StructMember(8) public native S10_3 m8_0(long v);
        @StructMember(9) public native long m9_0(); @StructMember(9) public native S10_3 m9_0(long v);
    }
    static class S10_4 extends Struct<S10_4> {
        @StructMember(0) public native float m0_0(); @StructMember(0) public native S10_4 m0_0(float v);
        @StructMember(1) public native float m1_0(); @StructMember(1) public native S10_4 m1_0(float v);
        @StructMember(2) public native float m2_0(); @StructMember(2) public native S10_4 m2_0(float v);
        @StructMember(3) public native float m3_0(); @StructMember(3) public native S10_4 m3_0(float v);
        @StructMember(4) public native float m4_0(); @StructMember(4) public native S10_4 m4_0(float v);
        @StructMember(5) public native float m5_0(); @StructMember(5) public native S10_4 m5_0(float v);
        @StructMember(6) public native float m6_0(); @StructMember(6) public native S10_4 m6_0(float v);
        @StructMember(7) public native float m7_0(); @StructMember(7) public native S10_4 m7_0(float v);
        @StructMember(8) public native float m8_0(); @StructMember(8) public native S10_4 m8_0(float v);
        @StructMember(9) public native float m9_0(); @StructMember(9) public native S10_4 m9_0(float v);
    }
    static class S10_5 extends Struct<S10_5> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S10_5 m0_0(double v);
        @StructMember(1) public native double m1_0(); @StructMember(1) public native S10_5 m1_0(double v);
        @StructMember(2) public native double m2_0(); @StructMember(2) public native S10_5 m2_0(double v);
        @StructMember(3) public native double m3_0(); @StructMember(3) public native S10_5 m3_0(double v);
        @StructMember(4) public native double m4_0(); @StructMember(4) public native S10_5 m4_0(double v);
        @StructMember(5) public native double m5_0(); @StructMember(5) public native S10_5 m5_0(double v);
        @StructMember(6) public native double m6_0(); @StructMember(6) public native S10_5 m6_0(double v);
        @StructMember(7) public native double m7_0(); @StructMember(7) public native S10_5 m7_0(double v);
        @StructMember(8) public native double m8_0(); @StructMember(8) public native S10_5 m8_0(double v);
        @StructMember(9) public native double m9_0(); @StructMember(9) public native S10_5 m9_0(double v);
    }
    static class S10_6 extends Struct<S10_6> {
        @StructMember(0) public native double m0_0(); @StructMember(0) public native S10_6 m0_0(double v);
        @StructMember(1) public native byte m0_1(); @StructMember(1) public native S10_6 m0_1(byte v);
        @StructMember(2) public native double m1_0(); @StructMember(2) public native S10_6 m1_0(double v);
        @StructMember(3) public native byte m1_1(); @StructMember(3) public native S10_6 m1_1(byte v);
        @StructMember(4) public native double m2_0(); @StructMember(4) public native S10_6 m2_0(double v);
        @StructMember(5) public native byte m2_1(); @StructMember(5) public native S10_6 m2_1(byte v);
        @StructMember(6) public native double m3_0(); @StructMember(6) public native S10_6 m3_0(double v);
        @StructMember(7) public native byte m3_1(); @StructMember(7) public native S10_6 m3_1(byte v);
        @StructMember(8) public native double m4_0(); @StructMember(8) public native S10_6 m4_0(double v);
        @StructMember(9) public native byte m4_1(); @StructMember(9) public native S10_6 m4_1(byte v);
        @StructMember(10) public native double m5_0(); @StructMember(10) public native S10_6 m5_0(double v);
        @StructMember(11) public native byte m5_1(); @StructMember(11) public native S10_6 m5_1(byte v);
        @StructMember(12) public native double m6_0(); @StructMember(12) public native S10_6 m6_0(double v);
        @StructMember(13) public native byte m6_1(); @StructMember(13) public native S10_6 m6_1(byte v);
        @StructMember(14) public native double m7_0(); @StructMember(14) public native S10_6 m7_0(double v);
        @StructMember(15) public native byte m7_1(); @StructMember(15) public native S10_6 m7_1(byte v);
        @StructMember(16) public native double m8_0(); @StructMember(16) public native S10_6 m8_0(double v);
        @StructMember(17) public native byte m8_1(); @StructMember(17) public native S10_6 m8_1(byte v);
        @StructMember(18) public native double m9_0(); @StructMember(18) public native S10_6 m9_0(double v);
        @StructMember(19) public native byte m9_1(); @StructMember(19) public native S10_6 m9_1(byte v);
    }

    @Bridge public static native @MachineSizedUInt long native_sizeof_S1_0();
    @Bridge public static native @ByVal S1_0 native_new_S1_0(byte m0_0);
    @Bridge public static native byte native_get_S1_0_m0_0(@ByVal S1_0 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S1_1();
    @Bridge public static native @ByVal S1_1 native_new_S1_1(short m0_0);
    @Bridge public static native short native_get_S1_1_m0_0(@ByVal S1_1 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S1_2();
    @Bridge public static native @ByVal S1_2 native_new_S1_2(int m0_0);
    @Bridge public static native int native_get_S1_2_m0_0(@ByVal S1_2 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S1_3();
    @Bridge public static native @ByVal S1_3 native_new_S1_3(long m0_0);
    @Bridge public static native long native_get_S1_3_m0_0(@ByVal S1_3 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S1_4();
    @Bridge public static native @ByVal S1_4 native_new_S1_4(float m0_0);
    @Bridge public static native float native_get_S1_4_m0_0(@ByVal S1_4 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S1_5();
    @Bridge public static native @ByVal S1_5 native_new_S1_5(double m0_0);
    @Bridge public static native double native_get_S1_5_m0_0(@ByVal S1_5 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S1_6();
    @Bridge public static native @ByVal S1_6 native_new_S1_6(double m0_0, byte m0_1);
    @Bridge public static native double native_get_S1_6_m0_0(@ByVal S1_6 s);
    @Bridge public static native byte native_get_S1_6_m0_1(@ByVal S1_6 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S2_0();
    @Bridge public static native @ByVal S2_0 native_new_S2_0(byte m0_0, byte m1_0);
    @Bridge public static native byte native_get_S2_0_m0_0(@ByVal S2_0 s);
    @Bridge public static native byte native_get_S2_0_m1_0(@ByVal S2_0 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S2_1();
    @Bridge public static native @ByVal S2_1 native_new_S2_1(short m0_0, short m1_0);
    @Bridge public static native short native_get_S2_1_m0_0(@ByVal S2_1 s);
    @Bridge public static native short native_get_S2_1_m1_0(@ByVal S2_1 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S2_2();
    @Bridge public static native @ByVal S2_2 native_new_S2_2(int m0_0, int m1_0);
    @Bridge public static native int native_get_S2_2_m0_0(@ByVal S2_2 s);
    @Bridge public static native int native_get_S2_2_m1_0(@ByVal S2_2 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S2_3();
    @Bridge public static native @ByVal S2_3 native_new_S2_3(long m0_0, long m1_0);
    @Bridge public static native long native_get_S2_3_m0_0(@ByVal S2_3 s);
    @Bridge public static native long native_get_S2_3_m1_0(@ByVal S2_3 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S2_4();
    @Bridge public static native @ByVal S2_4 native_new_S2_4(float m0_0, float m1_0);
    @Bridge public static native float native_get_S2_4_m0_0(@ByVal S2_4 s);
    @Bridge public static native float native_get_S2_4_m1_0(@ByVal S2_4 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S2_5();
    @Bridge public static native @ByVal S2_5 native_new_S2_5(double m0_0, double m1_0);
    @Bridge public static native double native_get_S2_5_m0_0(@ByVal S2_5 s);
    @Bridge public static native double native_get_S2_5_m1_0(@ByVal S2_5 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S2_6();
    @Bridge public static native @ByVal S2_6 native_new_S2_6(double m0_0, byte m0_1, double m1_0, byte m1_1);
    @Bridge public static native double native_get_S2_6_m0_0(@ByVal S2_6 s);
    @Bridge public static native byte native_get_S2_6_m0_1(@ByVal S2_6 s);
    @Bridge public static native double native_get_S2_6_m1_0(@ByVal S2_6 s);
    @Bridge public static native byte native_get_S2_6_m1_1(@ByVal S2_6 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S3_0();
    @Bridge public static native @ByVal S3_0 native_new_S3_0(byte m0_0, byte m1_0, byte m2_0);
    @Bridge public static native byte native_get_S3_0_m0_0(@ByVal S3_0 s);
    @Bridge public static native byte native_get_S3_0_m1_0(@ByVal S3_0 s);
    @Bridge public static native byte native_get_S3_0_m2_0(@ByVal S3_0 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S3_1();
    @Bridge public static native @ByVal S3_1 native_new_S3_1(short m0_0, short m1_0, short m2_0);
    @Bridge public static native short native_get_S3_1_m0_0(@ByVal S3_1 s);
    @Bridge public static native short native_get_S3_1_m1_0(@ByVal S3_1 s);
    @Bridge public static native short native_get_S3_1_m2_0(@ByVal S3_1 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S3_2();
    @Bridge public static native @ByVal S3_2 native_new_S3_2(int m0_0, int m1_0, int m2_0);
    @Bridge public static native int native_get_S3_2_m0_0(@ByVal S3_2 s);
    @Bridge public static native int native_get_S3_2_m1_0(@ByVal S3_2 s);
    @Bridge public static native int native_get_S3_2_m2_0(@ByVal S3_2 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S3_3();
    @Bridge public static native @ByVal S3_3 native_new_S3_3(long m0_0, long m1_0, long m2_0);
    @Bridge public static native long native_get_S3_3_m0_0(@ByVal S3_3 s);
    @Bridge public static native long native_get_S3_3_m1_0(@ByVal S3_3 s);
    @Bridge public static native long native_get_S3_3_m2_0(@ByVal S3_3 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S3_4();
    @Bridge public static native @ByVal S3_4 native_new_S3_4(float m0_0, float m1_0, float m2_0);
    @Bridge public static native float native_get_S3_4_m0_0(@ByVal S3_4 s);
    @Bridge public static native float native_get_S3_4_m1_0(@ByVal S3_4 s);
    @Bridge public static native float native_get_S3_4_m2_0(@ByVal S3_4 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S3_5();
    @Bridge public static native @ByVal S3_5 native_new_S3_5(double m0_0, double m1_0, double m2_0);
    @Bridge public static native double native_get_S3_5_m0_0(@ByVal S3_5 s);
    @Bridge public static native double native_get_S3_5_m1_0(@ByVal S3_5 s);
    @Bridge public static native double native_get_S3_5_m2_0(@ByVal S3_5 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S3_6();
    @Bridge public static native @ByVal S3_6 native_new_S3_6(double m0_0, byte m0_1, double m1_0, byte m1_1, double m2_0, byte m2_1);
    @Bridge public static native double native_get_S3_6_m0_0(@ByVal S3_6 s);
    @Bridge public static native byte native_get_S3_6_m0_1(@ByVal S3_6 s);
    @Bridge public static native double native_get_S3_6_m1_0(@ByVal S3_6 s);
    @Bridge public static native byte native_get_S3_6_m1_1(@ByVal S3_6 s);
    @Bridge public static native double native_get_S3_6_m2_0(@ByVal S3_6 s);
    @Bridge public static native byte native_get_S3_6_m2_1(@ByVal S3_6 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S4_0();
    @Bridge public static native @ByVal S4_0 native_new_S4_0(byte m0_0, byte m1_0, byte m2_0, byte m3_0);
    @Bridge public static native byte native_get_S4_0_m0_0(@ByVal S4_0 s);
    @Bridge public static native byte native_get_S4_0_m1_0(@ByVal S4_0 s);
    @Bridge public static native byte native_get_S4_0_m2_0(@ByVal S4_0 s);
    @Bridge public static native byte native_get_S4_0_m3_0(@ByVal S4_0 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S4_1();
    @Bridge public static native @ByVal S4_1 native_new_S4_1(short m0_0, short m1_0, short m2_0, short m3_0);
    @Bridge public static native short native_get_S4_1_m0_0(@ByVal S4_1 s);
    @Bridge public static native short native_get_S4_1_m1_0(@ByVal S4_1 s);
    @Bridge public static native short native_get_S4_1_m2_0(@ByVal S4_1 s);
    @Bridge public static native short native_get_S4_1_m3_0(@ByVal S4_1 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S4_2();
    @Bridge public static native @ByVal S4_2 native_new_S4_2(int m0_0, int m1_0, int m2_0, int m3_0);
    @Bridge public static native int native_get_S4_2_m0_0(@ByVal S4_2 s);
    @Bridge public static native int native_get_S4_2_m1_0(@ByVal S4_2 s);
    @Bridge public static native int native_get_S4_2_m2_0(@ByVal S4_2 s);
    @Bridge public static native int native_get_S4_2_m3_0(@ByVal S4_2 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S4_3();
    @Bridge public static native @ByVal S4_3 native_new_S4_3(long m0_0, long m1_0, long m2_0, long m3_0);
    @Bridge public static native long native_get_S4_3_m0_0(@ByVal S4_3 s);
    @Bridge public static native long native_get_S4_3_m1_0(@ByVal S4_3 s);
    @Bridge public static native long native_get_S4_3_m2_0(@ByVal S4_3 s);
    @Bridge public static native long native_get_S4_3_m3_0(@ByVal S4_3 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S4_4();
    @Bridge public static native @ByVal S4_4 native_new_S4_4(float m0_0, float m1_0, float m2_0, float m3_0);
    @Bridge public static native float native_get_S4_4_m0_0(@ByVal S4_4 s);
    @Bridge public static native float native_get_S4_4_m1_0(@ByVal S4_4 s);
    @Bridge public static native float native_get_S4_4_m2_0(@ByVal S4_4 s);
    @Bridge public static native float native_get_S4_4_m3_0(@ByVal S4_4 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S4_5();
    @Bridge public static native @ByVal S4_5 native_new_S4_5(double m0_0, double m1_0, double m2_0, double m3_0);
    @Bridge public static native double native_get_S4_5_m0_0(@ByVal S4_5 s);
    @Bridge public static native double native_get_S4_5_m1_0(@ByVal S4_5 s);
    @Bridge public static native double native_get_S4_5_m2_0(@ByVal S4_5 s);
    @Bridge public static native double native_get_S4_5_m3_0(@ByVal S4_5 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S4_6();
    @Bridge public static native @ByVal S4_6 native_new_S4_6(double m0_0, byte m0_1, double m1_0, byte m1_1, double m2_0, byte m2_1, double m3_0, byte m3_1);
    @Bridge public static native double native_get_S4_6_m0_0(@ByVal S4_6 s);
    @Bridge public static native byte native_get_S4_6_m0_1(@ByVal S4_6 s);
    @Bridge public static native double native_get_S4_6_m1_0(@ByVal S4_6 s);
    @Bridge public static native byte native_get_S4_6_m1_1(@ByVal S4_6 s);
    @Bridge public static native double native_get_S4_6_m2_0(@ByVal S4_6 s);
    @Bridge public static native byte native_get_S4_6_m2_1(@ByVal S4_6 s);
    @Bridge public static native double native_get_S4_6_m3_0(@ByVal S4_6 s);
    @Bridge public static native byte native_get_S4_6_m3_1(@ByVal S4_6 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S5_0();
    @Bridge public static native @ByVal S5_0 native_new_S5_0(byte m0_0, byte m1_0, byte m2_0, byte m3_0, byte m4_0);
    @Bridge public static native byte native_get_S5_0_m0_0(@ByVal S5_0 s);
    @Bridge public static native byte native_get_S5_0_m1_0(@ByVal S5_0 s);
    @Bridge public static native byte native_get_S5_0_m2_0(@ByVal S5_0 s);
    @Bridge public static native byte native_get_S5_0_m3_0(@ByVal S5_0 s);
    @Bridge public static native byte native_get_S5_0_m4_0(@ByVal S5_0 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S5_1();
    @Bridge public static native @ByVal S5_1 native_new_S5_1(short m0_0, short m1_0, short m2_0, short m3_0, short m4_0);
    @Bridge public static native short native_get_S5_1_m0_0(@ByVal S5_1 s);
    @Bridge public static native short native_get_S5_1_m1_0(@ByVal S5_1 s);
    @Bridge public static native short native_get_S5_1_m2_0(@ByVal S5_1 s);
    @Bridge public static native short native_get_S5_1_m3_0(@ByVal S5_1 s);
    @Bridge public static native short native_get_S5_1_m4_0(@ByVal S5_1 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S5_2();
    @Bridge public static native @ByVal S5_2 native_new_S5_2(int m0_0, int m1_0, int m2_0, int m3_0, int m4_0);
    @Bridge public static native int native_get_S5_2_m0_0(@ByVal S5_2 s);
    @Bridge public static native int native_get_S5_2_m1_0(@ByVal S5_2 s);
    @Bridge public static native int native_get_S5_2_m2_0(@ByVal S5_2 s);
    @Bridge public static native int native_get_S5_2_m3_0(@ByVal S5_2 s);
    @Bridge public static native int native_get_S5_2_m4_0(@ByVal S5_2 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S5_3();
    @Bridge public static native @ByVal S5_3 native_new_S5_3(long m0_0, long m1_0, long m2_0, long m3_0, long m4_0);
    @Bridge public static native long native_get_S5_3_m0_0(@ByVal S5_3 s);
    @Bridge public static native long native_get_S5_3_m1_0(@ByVal S5_3 s);
    @Bridge public static native long native_get_S5_3_m2_0(@ByVal S5_3 s);
    @Bridge public static native long native_get_S5_3_m3_0(@ByVal S5_3 s);
    @Bridge public static native long native_get_S5_3_m4_0(@ByVal S5_3 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S5_4();
    @Bridge public static native @ByVal S5_4 native_new_S5_4(float m0_0, float m1_0, float m2_0, float m3_0, float m4_0);
    @Bridge public static native float native_get_S5_4_m0_0(@ByVal S5_4 s);
    @Bridge public static native float native_get_S5_4_m1_0(@ByVal S5_4 s);
    @Bridge public static native float native_get_S5_4_m2_0(@ByVal S5_4 s);
    @Bridge public static native float native_get_S5_4_m3_0(@ByVal S5_4 s);
    @Bridge public static native float native_get_S5_4_m4_0(@ByVal S5_4 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S5_5();
    @Bridge public static native @ByVal S5_5 native_new_S5_5(double m0_0, double m1_0, double m2_0, double m3_0, double m4_0);
    @Bridge public static native double native_get_S5_5_m0_0(@ByVal S5_5 s);
    @Bridge public static native double native_get_S5_5_m1_0(@ByVal S5_5 s);
    @Bridge public static native double native_get_S5_5_m2_0(@ByVal S5_5 s);
    @Bridge public static native double native_get_S5_5_m3_0(@ByVal S5_5 s);
    @Bridge public static native double native_get_S5_5_m4_0(@ByVal S5_5 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S5_6();
    @Bridge public static native @ByVal S5_6 native_new_S5_6(double m0_0, byte m0_1, double m1_0, byte m1_1, double m2_0, byte m2_1, double m3_0, byte m3_1, double m4_0, byte m4_1);
    @Bridge public static native double native_get_S5_6_m0_0(@ByVal S5_6 s);
    @Bridge public static native byte native_get_S5_6_m0_1(@ByVal S5_6 s);
    @Bridge public static native double native_get_S5_6_m1_0(@ByVal S5_6 s);
    @Bridge public static native byte native_get_S5_6_m1_1(@ByVal S5_6 s);
    @Bridge public static native double native_get_S5_6_m2_0(@ByVal S5_6 s);
    @Bridge public static native byte native_get_S5_6_m2_1(@ByVal S5_6 s);
    @Bridge public static native double native_get_S5_6_m3_0(@ByVal S5_6 s);
    @Bridge public static native byte native_get_S5_6_m3_1(@ByVal S5_6 s);
    @Bridge public static native double native_get_S5_6_m4_0(@ByVal S5_6 s);
    @Bridge public static native byte native_get_S5_6_m4_1(@ByVal S5_6 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S6_0();
    @Bridge public static native @ByVal S6_0 native_new_S6_0(byte m0_0, byte m1_0, byte m2_0, byte m3_0, byte m4_0, byte m5_0);
    @Bridge public static native byte native_get_S6_0_m0_0(@ByVal S6_0 s);
    @Bridge public static native byte native_get_S6_0_m1_0(@ByVal S6_0 s);
    @Bridge public static native byte native_get_S6_0_m2_0(@ByVal S6_0 s);
    @Bridge public static native byte native_get_S6_0_m3_0(@ByVal S6_0 s);
    @Bridge public static native byte native_get_S6_0_m4_0(@ByVal S6_0 s);
    @Bridge public static native byte native_get_S6_0_m5_0(@ByVal S6_0 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S6_1();
    @Bridge public static native @ByVal S6_1 native_new_S6_1(short m0_0, short m1_0, short m2_0, short m3_0, short m4_0, short m5_0);
    @Bridge public static native short native_get_S6_1_m0_0(@ByVal S6_1 s);
    @Bridge public static native short native_get_S6_1_m1_0(@ByVal S6_1 s);
    @Bridge public static native short native_get_S6_1_m2_0(@ByVal S6_1 s);
    @Bridge public static native short native_get_S6_1_m3_0(@ByVal S6_1 s);
    @Bridge public static native short native_get_S6_1_m4_0(@ByVal S6_1 s);
    @Bridge public static native short native_get_S6_1_m5_0(@ByVal S6_1 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S6_2();
    @Bridge public static native @ByVal S6_2 native_new_S6_2(int m0_0, int m1_0, int m2_0, int m3_0, int m4_0, int m5_0);
    @Bridge public static native int native_get_S6_2_m0_0(@ByVal S6_2 s);
    @Bridge public static native int native_get_S6_2_m1_0(@ByVal S6_2 s);
    @Bridge public static native int native_get_S6_2_m2_0(@ByVal S6_2 s);
    @Bridge public static native int native_get_S6_2_m3_0(@ByVal S6_2 s);
    @Bridge public static native int native_get_S6_2_m4_0(@ByVal S6_2 s);
    @Bridge public static native int native_get_S6_2_m5_0(@ByVal S6_2 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S6_3();
    @Bridge public static native @ByVal S6_3 native_new_S6_3(long m0_0, long m1_0, long m2_0, long m3_0, long m4_0, long m5_0);
    @Bridge public static native long native_get_S6_3_m0_0(@ByVal S6_3 s);
    @Bridge public static native long native_get_S6_3_m1_0(@ByVal S6_3 s);
    @Bridge public static native long native_get_S6_3_m2_0(@ByVal S6_3 s);
    @Bridge public static native long native_get_S6_3_m3_0(@ByVal S6_3 s);
    @Bridge public static native long native_get_S6_3_m4_0(@ByVal S6_3 s);
    @Bridge public static native long native_get_S6_3_m5_0(@ByVal S6_3 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S6_4();
    @Bridge public static native @ByVal S6_4 native_new_S6_4(float m0_0, float m1_0, float m2_0, float m3_0, float m4_0, float m5_0);
    @Bridge public static native float native_get_S6_4_m0_0(@ByVal S6_4 s);
    @Bridge public static native float native_get_S6_4_m1_0(@ByVal S6_4 s);
    @Bridge public static native float native_get_S6_4_m2_0(@ByVal S6_4 s);
    @Bridge public static native float native_get_S6_4_m3_0(@ByVal S6_4 s);
    @Bridge public static native float native_get_S6_4_m4_0(@ByVal S6_4 s);
    @Bridge public static native float native_get_S6_4_m5_0(@ByVal S6_4 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S6_5();
    @Bridge public static native @ByVal S6_5 native_new_S6_5(double m0_0, double m1_0, double m2_0, double m3_0, double m4_0, double m5_0);
    @Bridge public static native double native_get_S6_5_m0_0(@ByVal S6_5 s);
    @Bridge public static native double native_get_S6_5_m1_0(@ByVal S6_5 s);
    @Bridge public static native double native_get_S6_5_m2_0(@ByVal S6_5 s);
    @Bridge public static native double native_get_S6_5_m3_0(@ByVal S6_5 s);
    @Bridge public static native double native_get_S6_5_m4_0(@ByVal S6_5 s);
    @Bridge public static native double native_get_S6_5_m5_0(@ByVal S6_5 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S6_6();
    @Bridge public static native @ByVal S6_6 native_new_S6_6(double m0_0, byte m0_1, double m1_0, byte m1_1, double m2_0, byte m2_1, double m3_0, byte m3_1, double m4_0, byte m4_1, double m5_0, byte m5_1);
    @Bridge public static native double native_get_S6_6_m0_0(@ByVal S6_6 s);
    @Bridge public static native byte native_get_S6_6_m0_1(@ByVal S6_6 s);
    @Bridge public static native double native_get_S6_6_m1_0(@ByVal S6_6 s);
    @Bridge public static native byte native_get_S6_6_m1_1(@ByVal S6_6 s);
    @Bridge public static native double native_get_S6_6_m2_0(@ByVal S6_6 s);
    @Bridge public static native byte native_get_S6_6_m2_1(@ByVal S6_6 s);
    @Bridge public static native double native_get_S6_6_m3_0(@ByVal S6_6 s);
    @Bridge public static native byte native_get_S6_6_m3_1(@ByVal S6_6 s);
    @Bridge public static native double native_get_S6_6_m4_0(@ByVal S6_6 s);
    @Bridge public static native byte native_get_S6_6_m4_1(@ByVal S6_6 s);
    @Bridge public static native double native_get_S6_6_m5_0(@ByVal S6_6 s);
    @Bridge public static native byte native_get_S6_6_m5_1(@ByVal S6_6 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S7_0();
    @Bridge public static native @ByVal S7_0 native_new_S7_0(byte m0_0, byte m1_0, byte m2_0, byte m3_0, byte m4_0, byte m5_0, byte m6_0);
    @Bridge public static native byte native_get_S7_0_m0_0(@ByVal S7_0 s);
    @Bridge public static native byte native_get_S7_0_m1_0(@ByVal S7_0 s);
    @Bridge public static native byte native_get_S7_0_m2_0(@ByVal S7_0 s);
    @Bridge public static native byte native_get_S7_0_m3_0(@ByVal S7_0 s);
    @Bridge public static native byte native_get_S7_0_m4_0(@ByVal S7_0 s);
    @Bridge public static native byte native_get_S7_0_m5_0(@ByVal S7_0 s);
    @Bridge public static native byte native_get_S7_0_m6_0(@ByVal S7_0 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S7_1();
    @Bridge public static native @ByVal S7_1 native_new_S7_1(short m0_0, short m1_0, short m2_0, short m3_0, short m4_0, short m5_0, short m6_0);
    @Bridge public static native short native_get_S7_1_m0_0(@ByVal S7_1 s);
    @Bridge public static native short native_get_S7_1_m1_0(@ByVal S7_1 s);
    @Bridge public static native short native_get_S7_1_m2_0(@ByVal S7_1 s);
    @Bridge public static native short native_get_S7_1_m3_0(@ByVal S7_1 s);
    @Bridge public static native short native_get_S7_1_m4_0(@ByVal S7_1 s);
    @Bridge public static native short native_get_S7_1_m5_0(@ByVal S7_1 s);
    @Bridge public static native short native_get_S7_1_m6_0(@ByVal S7_1 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S7_2();
    @Bridge public static native @ByVal S7_2 native_new_S7_2(int m0_0, int m1_0, int m2_0, int m3_0, int m4_0, int m5_0, int m6_0);
    @Bridge public static native int native_get_S7_2_m0_0(@ByVal S7_2 s);
    @Bridge public static native int native_get_S7_2_m1_0(@ByVal S7_2 s);
    @Bridge public static native int native_get_S7_2_m2_0(@ByVal S7_2 s);
    @Bridge public static native int native_get_S7_2_m3_0(@ByVal S7_2 s);
    @Bridge public static native int native_get_S7_2_m4_0(@ByVal S7_2 s);
    @Bridge public static native int native_get_S7_2_m5_0(@ByVal S7_2 s);
    @Bridge public static native int native_get_S7_2_m6_0(@ByVal S7_2 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S7_3();
    @Bridge public static native @ByVal S7_3 native_new_S7_3(long m0_0, long m1_0, long m2_0, long m3_0, long m4_0, long m5_0, long m6_0);
    @Bridge public static native long native_get_S7_3_m0_0(@ByVal S7_3 s);
    @Bridge public static native long native_get_S7_3_m1_0(@ByVal S7_3 s);
    @Bridge public static native long native_get_S7_3_m2_0(@ByVal S7_3 s);
    @Bridge public static native long native_get_S7_3_m3_0(@ByVal S7_3 s);
    @Bridge public static native long native_get_S7_3_m4_0(@ByVal S7_3 s);
    @Bridge public static native long native_get_S7_3_m5_0(@ByVal S7_3 s);
    @Bridge public static native long native_get_S7_3_m6_0(@ByVal S7_3 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S7_4();
    @Bridge public static native @ByVal S7_4 native_new_S7_4(float m0_0, float m1_0, float m2_0, float m3_0, float m4_0, float m5_0, float m6_0);
    @Bridge public static native float native_get_S7_4_m0_0(@ByVal S7_4 s);
    @Bridge public static native float native_get_S7_4_m1_0(@ByVal S7_4 s);
    @Bridge public static native float native_get_S7_4_m2_0(@ByVal S7_4 s);
    @Bridge public static native float native_get_S7_4_m3_0(@ByVal S7_4 s);
    @Bridge public static native float native_get_S7_4_m4_0(@ByVal S7_4 s);
    @Bridge public static native float native_get_S7_4_m5_0(@ByVal S7_4 s);
    @Bridge public static native float native_get_S7_4_m6_0(@ByVal S7_4 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S7_5();
    @Bridge public static native @ByVal S7_5 native_new_S7_5(double m0_0, double m1_0, double m2_0, double m3_0, double m4_0, double m5_0, double m6_0);
    @Bridge public static native double native_get_S7_5_m0_0(@ByVal S7_5 s);
    @Bridge public static native double native_get_S7_5_m1_0(@ByVal S7_5 s);
    @Bridge public static native double native_get_S7_5_m2_0(@ByVal S7_5 s);
    @Bridge public static native double native_get_S7_5_m3_0(@ByVal S7_5 s);
    @Bridge public static native double native_get_S7_5_m4_0(@ByVal S7_5 s);
    @Bridge public static native double native_get_S7_5_m5_0(@ByVal S7_5 s);
    @Bridge public static native double native_get_S7_5_m6_0(@ByVal S7_5 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S7_6();
    @Bridge public static native @ByVal S7_6 native_new_S7_6(double m0_0, byte m0_1, double m1_0, byte m1_1, double m2_0, byte m2_1, double m3_0, byte m3_1, double m4_0, byte m4_1, double m5_0, byte m5_1, double m6_0, byte m6_1);
    @Bridge public static native double native_get_S7_6_m0_0(@ByVal S7_6 s);
    @Bridge public static native byte native_get_S7_6_m0_1(@ByVal S7_6 s);
    @Bridge public static native double native_get_S7_6_m1_0(@ByVal S7_6 s);
    @Bridge public static native byte native_get_S7_6_m1_1(@ByVal S7_6 s);
    @Bridge public static native double native_get_S7_6_m2_0(@ByVal S7_6 s);
    @Bridge public static native byte native_get_S7_6_m2_1(@ByVal S7_6 s);
    @Bridge public static native double native_get_S7_6_m3_0(@ByVal S7_6 s);
    @Bridge public static native byte native_get_S7_6_m3_1(@ByVal S7_6 s);
    @Bridge public static native double native_get_S7_6_m4_0(@ByVal S7_6 s);
    @Bridge public static native byte native_get_S7_6_m4_1(@ByVal S7_6 s);
    @Bridge public static native double native_get_S7_6_m5_0(@ByVal S7_6 s);
    @Bridge public static native byte native_get_S7_6_m5_1(@ByVal S7_6 s);
    @Bridge public static native double native_get_S7_6_m6_0(@ByVal S7_6 s);
    @Bridge public static native byte native_get_S7_6_m6_1(@ByVal S7_6 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S8_0();
    @Bridge public static native @ByVal S8_0 native_new_S8_0(byte m0_0, byte m1_0, byte m2_0, byte m3_0, byte m4_0, byte m5_0, byte m6_0, byte m7_0);
    @Bridge public static native byte native_get_S8_0_m0_0(@ByVal S8_0 s);
    @Bridge public static native byte native_get_S8_0_m1_0(@ByVal S8_0 s);
    @Bridge public static native byte native_get_S8_0_m2_0(@ByVal S8_0 s);
    @Bridge public static native byte native_get_S8_0_m3_0(@ByVal S8_0 s);
    @Bridge public static native byte native_get_S8_0_m4_0(@ByVal S8_0 s);
    @Bridge public static native byte native_get_S8_0_m5_0(@ByVal S8_0 s);
    @Bridge public static native byte native_get_S8_0_m6_0(@ByVal S8_0 s);
    @Bridge public static native byte native_get_S8_0_m7_0(@ByVal S8_0 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S8_1();
    @Bridge public static native @ByVal S8_1 native_new_S8_1(short m0_0, short m1_0, short m2_0, short m3_0, short m4_0, short m5_0, short m6_0, short m7_0);
    @Bridge public static native short native_get_S8_1_m0_0(@ByVal S8_1 s);
    @Bridge public static native short native_get_S8_1_m1_0(@ByVal S8_1 s);
    @Bridge public static native short native_get_S8_1_m2_0(@ByVal S8_1 s);
    @Bridge public static native short native_get_S8_1_m3_0(@ByVal S8_1 s);
    @Bridge public static native short native_get_S8_1_m4_0(@ByVal S8_1 s);
    @Bridge public static native short native_get_S8_1_m5_0(@ByVal S8_1 s);
    @Bridge public static native short native_get_S8_1_m6_0(@ByVal S8_1 s);
    @Bridge public static native short native_get_S8_1_m7_0(@ByVal S8_1 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S8_2();
    @Bridge public static native @ByVal S8_2 native_new_S8_2(int m0_0, int m1_0, int m2_0, int m3_0, int m4_0, int m5_0, int m6_0, int m7_0);
    @Bridge public static native int native_get_S8_2_m0_0(@ByVal S8_2 s);
    @Bridge public static native int native_get_S8_2_m1_0(@ByVal S8_2 s);
    @Bridge public static native int native_get_S8_2_m2_0(@ByVal S8_2 s);
    @Bridge public static native int native_get_S8_2_m3_0(@ByVal S8_2 s);
    @Bridge public static native int native_get_S8_2_m4_0(@ByVal S8_2 s);
    @Bridge public static native int native_get_S8_2_m5_0(@ByVal S8_2 s);
    @Bridge public static native int native_get_S8_2_m6_0(@ByVal S8_2 s);
    @Bridge public static native int native_get_S8_2_m7_0(@ByVal S8_2 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S8_3();
    @Bridge public static native @ByVal S8_3 native_new_S8_3(long m0_0, long m1_0, long m2_0, long m3_0, long m4_0, long m5_0, long m6_0, long m7_0);
    @Bridge public static native long native_get_S8_3_m0_0(@ByVal S8_3 s);
    @Bridge public static native long native_get_S8_3_m1_0(@ByVal S8_3 s);
    @Bridge public static native long native_get_S8_3_m2_0(@ByVal S8_3 s);
    @Bridge public static native long native_get_S8_3_m3_0(@ByVal S8_3 s);
    @Bridge public static native long native_get_S8_3_m4_0(@ByVal S8_3 s);
    @Bridge public static native long native_get_S8_3_m5_0(@ByVal S8_3 s);
    @Bridge public static native long native_get_S8_3_m6_0(@ByVal S8_3 s);
    @Bridge public static native long native_get_S8_3_m7_0(@ByVal S8_3 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S8_4();
    @Bridge public static native @ByVal S8_4 native_new_S8_4(float m0_0, float m1_0, float m2_0, float m3_0, float m4_0, float m5_0, float m6_0, float m7_0);
    @Bridge public static native float native_get_S8_4_m0_0(@ByVal S8_4 s);
    @Bridge public static native float native_get_S8_4_m1_0(@ByVal S8_4 s);
    @Bridge public static native float native_get_S8_4_m2_0(@ByVal S8_4 s);
    @Bridge public static native float native_get_S8_4_m3_0(@ByVal S8_4 s);
    @Bridge public static native float native_get_S8_4_m4_0(@ByVal S8_4 s);
    @Bridge public static native float native_get_S8_4_m5_0(@ByVal S8_4 s);
    @Bridge public static native float native_get_S8_4_m6_0(@ByVal S8_4 s);
    @Bridge public static native float native_get_S8_4_m7_0(@ByVal S8_4 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S8_5();
    @Bridge public static native @ByVal S8_5 native_new_S8_5(double m0_0, double m1_0, double m2_0, double m3_0, double m4_0, double m5_0, double m6_0, double m7_0);
    @Bridge public static native double native_get_S8_5_m0_0(@ByVal S8_5 s);
    @Bridge public static native double native_get_S8_5_m1_0(@ByVal S8_5 s);
    @Bridge public static native double native_get_S8_5_m2_0(@ByVal S8_5 s);
    @Bridge public static native double native_get_S8_5_m3_0(@ByVal S8_5 s);
    @Bridge public static native double native_get_S8_5_m4_0(@ByVal S8_5 s);
    @Bridge public static native double native_get_S8_5_m5_0(@ByVal S8_5 s);
    @Bridge public static native double native_get_S8_5_m6_0(@ByVal S8_5 s);
    @Bridge public static native double native_get_S8_5_m7_0(@ByVal S8_5 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S8_6();
    @Bridge public static native @ByVal S8_6 native_new_S8_6(double m0_0, byte m0_1, double m1_0, byte m1_1, double m2_0, byte m2_1, double m3_0, byte m3_1, double m4_0, byte m4_1, double m5_0, byte m5_1, double m6_0, byte m6_1, double m7_0, byte m7_1);
    @Bridge public static native double native_get_S8_6_m0_0(@ByVal S8_6 s);
    @Bridge public static native byte native_get_S8_6_m0_1(@ByVal S8_6 s);
    @Bridge public static native double native_get_S8_6_m1_0(@ByVal S8_6 s);
    @Bridge public static native byte native_get_S8_6_m1_1(@ByVal S8_6 s);
    @Bridge public static native double native_get_S8_6_m2_0(@ByVal S8_6 s);
    @Bridge public static native byte native_get_S8_6_m2_1(@ByVal S8_6 s);
    @Bridge public static native double native_get_S8_6_m3_0(@ByVal S8_6 s);
    @Bridge public static native byte native_get_S8_6_m3_1(@ByVal S8_6 s);
    @Bridge public static native double native_get_S8_6_m4_0(@ByVal S8_6 s);
    @Bridge public static native byte native_get_S8_6_m4_1(@ByVal S8_6 s);
    @Bridge public static native double native_get_S8_6_m5_0(@ByVal S8_6 s);
    @Bridge public static native byte native_get_S8_6_m5_1(@ByVal S8_6 s);
    @Bridge public static native double native_get_S8_6_m6_0(@ByVal S8_6 s);
    @Bridge public static native byte native_get_S8_6_m6_1(@ByVal S8_6 s);
    @Bridge public static native double native_get_S8_6_m7_0(@ByVal S8_6 s);
    @Bridge public static native byte native_get_S8_6_m7_1(@ByVal S8_6 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S9_0();
    @Bridge public static native @ByVal S9_0 native_new_S9_0(byte m0_0, byte m1_0, byte m2_0, byte m3_0, byte m4_0, byte m5_0, byte m6_0, byte m7_0, byte m8_0);
    @Bridge public static native byte native_get_S9_0_m0_0(@ByVal S9_0 s);
    @Bridge public static native byte native_get_S9_0_m1_0(@ByVal S9_0 s);
    @Bridge public static native byte native_get_S9_0_m2_0(@ByVal S9_0 s);
    @Bridge public static native byte native_get_S9_0_m3_0(@ByVal S9_0 s);
    @Bridge public static native byte native_get_S9_0_m4_0(@ByVal S9_0 s);
    @Bridge public static native byte native_get_S9_0_m5_0(@ByVal S9_0 s);
    @Bridge public static native byte native_get_S9_0_m6_0(@ByVal S9_0 s);
    @Bridge public static native byte native_get_S9_0_m7_0(@ByVal S9_0 s);
    @Bridge public static native byte native_get_S9_0_m8_0(@ByVal S9_0 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S9_1();
    @Bridge public static native @ByVal S9_1 native_new_S9_1(short m0_0, short m1_0, short m2_0, short m3_0, short m4_0, short m5_0, short m6_0, short m7_0, short m8_0);
    @Bridge public static native short native_get_S9_1_m0_0(@ByVal S9_1 s);
    @Bridge public static native short native_get_S9_1_m1_0(@ByVal S9_1 s);
    @Bridge public static native short native_get_S9_1_m2_0(@ByVal S9_1 s);
    @Bridge public static native short native_get_S9_1_m3_0(@ByVal S9_1 s);
    @Bridge public static native short native_get_S9_1_m4_0(@ByVal S9_1 s);
    @Bridge public static native short native_get_S9_1_m5_0(@ByVal S9_1 s);
    @Bridge public static native short native_get_S9_1_m6_0(@ByVal S9_1 s);
    @Bridge public static native short native_get_S9_1_m7_0(@ByVal S9_1 s);
    @Bridge public static native short native_get_S9_1_m8_0(@ByVal S9_1 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S9_2();
    @Bridge public static native @ByVal S9_2 native_new_S9_2(int m0_0, int m1_0, int m2_0, int m3_0, int m4_0, int m5_0, int m6_0, int m7_0, int m8_0);
    @Bridge public static native int native_get_S9_2_m0_0(@ByVal S9_2 s);
    @Bridge public static native int native_get_S9_2_m1_0(@ByVal S9_2 s);
    @Bridge public static native int native_get_S9_2_m2_0(@ByVal S9_2 s);
    @Bridge public static native int native_get_S9_2_m3_0(@ByVal S9_2 s);
    @Bridge public static native int native_get_S9_2_m4_0(@ByVal S9_2 s);
    @Bridge public static native int native_get_S9_2_m5_0(@ByVal S9_2 s);
    @Bridge public static native int native_get_S9_2_m6_0(@ByVal S9_2 s);
    @Bridge public static native int native_get_S9_2_m7_0(@ByVal S9_2 s);
    @Bridge public static native int native_get_S9_2_m8_0(@ByVal S9_2 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S9_3();
    @Bridge public static native @ByVal S9_3 native_new_S9_3(long m0_0, long m1_0, long m2_0, long m3_0, long m4_0, long m5_0, long m6_0, long m7_0, long m8_0);
    @Bridge public static native long native_get_S9_3_m0_0(@ByVal S9_3 s);
    @Bridge public static native long native_get_S9_3_m1_0(@ByVal S9_3 s);
    @Bridge public static native long native_get_S9_3_m2_0(@ByVal S9_3 s);
    @Bridge public static native long native_get_S9_3_m3_0(@ByVal S9_3 s);
    @Bridge public static native long native_get_S9_3_m4_0(@ByVal S9_3 s);
    @Bridge public static native long native_get_S9_3_m5_0(@ByVal S9_3 s);
    @Bridge public static native long native_get_S9_3_m6_0(@ByVal S9_3 s);
    @Bridge public static native long native_get_S9_3_m7_0(@ByVal S9_3 s);
    @Bridge public static native long native_get_S9_3_m8_0(@ByVal S9_3 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S9_4();
    @Bridge public static native @ByVal S9_4 native_new_S9_4(float m0_0, float m1_0, float m2_0, float m3_0, float m4_0, float m5_0, float m6_0, float m7_0, float m8_0);
    @Bridge public static native float native_get_S9_4_m0_0(@ByVal S9_4 s);
    @Bridge public static native float native_get_S9_4_m1_0(@ByVal S9_4 s);
    @Bridge public static native float native_get_S9_4_m2_0(@ByVal S9_4 s);
    @Bridge public static native float native_get_S9_4_m3_0(@ByVal S9_4 s);
    @Bridge public static native float native_get_S9_4_m4_0(@ByVal S9_4 s);
    @Bridge public static native float native_get_S9_4_m5_0(@ByVal S9_4 s);
    @Bridge public static native float native_get_S9_4_m6_0(@ByVal S9_4 s);
    @Bridge public static native float native_get_S9_4_m7_0(@ByVal S9_4 s);
    @Bridge public static native float native_get_S9_4_m8_0(@ByVal S9_4 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S9_5();
    @Bridge public static native @ByVal S9_5 native_new_S9_5(double m0_0, double m1_0, double m2_0, double m3_0, double m4_0, double m5_0, double m6_0, double m7_0, double m8_0);
    @Bridge public static native double native_get_S9_5_m0_0(@ByVal S9_5 s);
    @Bridge public static native double native_get_S9_5_m1_0(@ByVal S9_5 s);
    @Bridge public static native double native_get_S9_5_m2_0(@ByVal S9_5 s);
    @Bridge public static native double native_get_S9_5_m3_0(@ByVal S9_5 s);
    @Bridge public static native double native_get_S9_5_m4_0(@ByVal S9_5 s);
    @Bridge public static native double native_get_S9_5_m5_0(@ByVal S9_5 s);
    @Bridge public static native double native_get_S9_5_m6_0(@ByVal S9_5 s);
    @Bridge public static native double native_get_S9_5_m7_0(@ByVal S9_5 s);
    @Bridge public static native double native_get_S9_5_m8_0(@ByVal S9_5 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S9_6();
    @Bridge public static native @ByVal S9_6 native_new_S9_6(double m0_0, byte m0_1, double m1_0, byte m1_1, double m2_0, byte m2_1, double m3_0, byte m3_1, double m4_0, byte m4_1, double m5_0, byte m5_1, double m6_0, byte m6_1, double m7_0, byte m7_1, double m8_0, byte m8_1);
    @Bridge public static native double native_get_S9_6_m0_0(@ByVal S9_6 s);
    @Bridge public static native byte native_get_S9_6_m0_1(@ByVal S9_6 s);
    @Bridge public static native double native_get_S9_6_m1_0(@ByVal S9_6 s);
    @Bridge public static native byte native_get_S9_6_m1_1(@ByVal S9_6 s);
    @Bridge public static native double native_get_S9_6_m2_0(@ByVal S9_6 s);
    @Bridge public static native byte native_get_S9_6_m2_1(@ByVal S9_6 s);
    @Bridge public static native double native_get_S9_6_m3_0(@ByVal S9_6 s);
    @Bridge public static native byte native_get_S9_6_m3_1(@ByVal S9_6 s);
    @Bridge public static native double native_get_S9_6_m4_0(@ByVal S9_6 s);
    @Bridge public static native byte native_get_S9_6_m4_1(@ByVal S9_6 s);
    @Bridge public static native double native_get_S9_6_m5_0(@ByVal S9_6 s);
    @Bridge public static native byte native_get_S9_6_m5_1(@ByVal S9_6 s);
    @Bridge public static native double native_get_S9_6_m6_0(@ByVal S9_6 s);
    @Bridge public static native byte native_get_S9_6_m6_1(@ByVal S9_6 s);
    @Bridge public static native double native_get_S9_6_m7_0(@ByVal S9_6 s);
    @Bridge public static native byte native_get_S9_6_m7_1(@ByVal S9_6 s);
    @Bridge public static native double native_get_S9_6_m8_0(@ByVal S9_6 s);
    @Bridge public static native byte native_get_S9_6_m8_1(@ByVal S9_6 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S10_0();
    @Bridge public static native @ByVal S10_0 native_new_S10_0(byte m0_0, byte m1_0, byte m2_0, byte m3_0, byte m4_0, byte m5_0, byte m6_0, byte m7_0, byte m8_0, byte m9_0);
    @Bridge public static native byte native_get_S10_0_m0_0(@ByVal S10_0 s);
    @Bridge public static native byte native_get_S10_0_m1_0(@ByVal S10_0 s);
    @Bridge public static native byte native_get_S10_0_m2_0(@ByVal S10_0 s);
    @Bridge public static native byte native_get_S10_0_m3_0(@ByVal S10_0 s);
    @Bridge public static native byte native_get_S10_0_m4_0(@ByVal S10_0 s);
    @Bridge public static native byte native_get_S10_0_m5_0(@ByVal S10_0 s);
    @Bridge public static native byte native_get_S10_0_m6_0(@ByVal S10_0 s);
    @Bridge public static native byte native_get_S10_0_m7_0(@ByVal S10_0 s);
    @Bridge public static native byte native_get_S10_0_m8_0(@ByVal S10_0 s);
    @Bridge public static native byte native_get_S10_0_m9_0(@ByVal S10_0 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S10_1();
    @Bridge public static native @ByVal S10_1 native_new_S10_1(short m0_0, short m1_0, short m2_0, short m3_0, short m4_0, short m5_0, short m6_0, short m7_0, short m8_0, short m9_0);
    @Bridge public static native short native_get_S10_1_m0_0(@ByVal S10_1 s);
    @Bridge public static native short native_get_S10_1_m1_0(@ByVal S10_1 s);
    @Bridge public static native short native_get_S10_1_m2_0(@ByVal S10_1 s);
    @Bridge public static native short native_get_S10_1_m3_0(@ByVal S10_1 s);
    @Bridge public static native short native_get_S10_1_m4_0(@ByVal S10_1 s);
    @Bridge public static native short native_get_S10_1_m5_0(@ByVal S10_1 s);
    @Bridge public static native short native_get_S10_1_m6_0(@ByVal S10_1 s);
    @Bridge public static native short native_get_S10_1_m7_0(@ByVal S10_1 s);
    @Bridge public static native short native_get_S10_1_m8_0(@ByVal S10_1 s);
    @Bridge public static native short native_get_S10_1_m9_0(@ByVal S10_1 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S10_2();
    @Bridge public static native @ByVal S10_2 native_new_S10_2(int m0_0, int m1_0, int m2_0, int m3_0, int m4_0, int m5_0, int m6_0, int m7_0, int m8_0, int m9_0);
    @Bridge public static native int native_get_S10_2_m0_0(@ByVal S10_2 s);
    @Bridge public static native int native_get_S10_2_m1_0(@ByVal S10_2 s);
    @Bridge public static native int native_get_S10_2_m2_0(@ByVal S10_2 s);
    @Bridge public static native int native_get_S10_2_m3_0(@ByVal S10_2 s);
    @Bridge public static native int native_get_S10_2_m4_0(@ByVal S10_2 s);
    @Bridge public static native int native_get_S10_2_m5_0(@ByVal S10_2 s);
    @Bridge public static native int native_get_S10_2_m6_0(@ByVal S10_2 s);
    @Bridge public static native int native_get_S10_2_m7_0(@ByVal S10_2 s);
    @Bridge public static native int native_get_S10_2_m8_0(@ByVal S10_2 s);
    @Bridge public static native int native_get_S10_2_m9_0(@ByVal S10_2 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S10_3();
    @Bridge public static native @ByVal S10_3 native_new_S10_3(long m0_0, long m1_0, long m2_0, long m3_0, long m4_0, long m5_0, long m6_0, long m7_0, long m8_0, long m9_0);
    @Bridge public static native long native_get_S10_3_m0_0(@ByVal S10_3 s);
    @Bridge public static native long native_get_S10_3_m1_0(@ByVal S10_3 s);
    @Bridge public static native long native_get_S10_3_m2_0(@ByVal S10_3 s);
    @Bridge public static native long native_get_S10_3_m3_0(@ByVal S10_3 s);
    @Bridge public static native long native_get_S10_3_m4_0(@ByVal S10_3 s);
    @Bridge public static native long native_get_S10_3_m5_0(@ByVal S10_3 s);
    @Bridge public static native long native_get_S10_3_m6_0(@ByVal S10_3 s);
    @Bridge public static native long native_get_S10_3_m7_0(@ByVal S10_3 s);
    @Bridge public static native long native_get_S10_3_m8_0(@ByVal S10_3 s);
    @Bridge public static native long native_get_S10_3_m9_0(@ByVal S10_3 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S10_4();
    @Bridge public static native @ByVal S10_4 native_new_S10_4(float m0_0, float m1_0, float m2_0, float m3_0, float m4_0, float m5_0, float m6_0, float m7_0, float m8_0, float m9_0);
    @Bridge public static native float native_get_S10_4_m0_0(@ByVal S10_4 s);
    @Bridge public static native float native_get_S10_4_m1_0(@ByVal S10_4 s);
    @Bridge public static native float native_get_S10_4_m2_0(@ByVal S10_4 s);
    @Bridge public static native float native_get_S10_4_m3_0(@ByVal S10_4 s);
    @Bridge public static native float native_get_S10_4_m4_0(@ByVal S10_4 s);
    @Bridge public static native float native_get_S10_4_m5_0(@ByVal S10_4 s);
    @Bridge public static native float native_get_S10_4_m6_0(@ByVal S10_4 s);
    @Bridge public static native float native_get_S10_4_m7_0(@ByVal S10_4 s);
    @Bridge public static native float native_get_S10_4_m8_0(@ByVal S10_4 s);
    @Bridge public static native float native_get_S10_4_m9_0(@ByVal S10_4 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S10_5();
    @Bridge public static native @ByVal S10_5 native_new_S10_5(double m0_0, double m1_0, double m2_0, double m3_0, double m4_0, double m5_0, double m6_0, double m7_0, double m8_0, double m9_0);
    @Bridge public static native double native_get_S10_5_m0_0(@ByVal S10_5 s);
    @Bridge public static native double native_get_S10_5_m1_0(@ByVal S10_5 s);
    @Bridge public static native double native_get_S10_5_m2_0(@ByVal S10_5 s);
    @Bridge public static native double native_get_S10_5_m3_0(@ByVal S10_5 s);
    @Bridge public static native double native_get_S10_5_m4_0(@ByVal S10_5 s);
    @Bridge public static native double native_get_S10_5_m5_0(@ByVal S10_5 s);
    @Bridge public static native double native_get_S10_5_m6_0(@ByVal S10_5 s);
    @Bridge public static native double native_get_S10_5_m7_0(@ByVal S10_5 s);
    @Bridge public static native double native_get_S10_5_m8_0(@ByVal S10_5 s);
    @Bridge public static native double native_get_S10_5_m9_0(@ByVal S10_5 s);
    @Bridge public static native @MachineSizedUInt long native_sizeof_S10_6();
    @Bridge public static native @ByVal S10_6 native_new_S10_6(double m0_0, byte m0_1, double m1_0, byte m1_1, double m2_0, byte m2_1, double m3_0, byte m3_1, double m4_0, byte m4_1, double m5_0, byte m5_1, double m6_0, byte m6_1, double m7_0, byte m7_1, double m8_0, byte m8_1, double m9_0, byte m9_1);
    @Bridge public static native double native_get_S10_6_m0_0(@ByVal S10_6 s);
    @Bridge public static native byte native_get_S10_6_m0_1(@ByVal S10_6 s);
    @Bridge public static native double native_get_S10_6_m1_0(@ByVal S10_6 s);
    @Bridge public static native byte native_get_S10_6_m1_1(@ByVal S10_6 s);
    @Bridge public static native double native_get_S10_6_m2_0(@ByVal S10_6 s);
    @Bridge public static native byte native_get_S10_6_m2_1(@ByVal S10_6 s);
    @Bridge public static native double native_get_S10_6_m3_0(@ByVal S10_6 s);
    @Bridge public static native byte native_get_S10_6_m3_1(@ByVal S10_6 s);
    @Bridge public static native double native_get_S10_6_m4_0(@ByVal S10_6 s);
    @Bridge public static native byte native_get_S10_6_m4_1(@ByVal S10_6 s);
    @Bridge public static native double native_get_S10_6_m5_0(@ByVal S10_6 s);
    @Bridge public static native byte native_get_S10_6_m5_1(@ByVal S10_6 s);
    @Bridge public static native double native_get_S10_6_m6_0(@ByVal S10_6 s);
    @Bridge public static native byte native_get_S10_6_m6_1(@ByVal S10_6 s);
    @Bridge public static native double native_get_S10_6_m7_0(@ByVal S10_6 s);
    @Bridge public static native byte native_get_S10_6_m7_1(@ByVal S10_6 s);
    @Bridge public static native double native_get_S10_6_m8_0(@ByVal S10_6 s);
    @Bridge public static native byte native_get_S10_6_m8_1(@ByVal S10_6 s);
    @Bridge public static native double native_get_S10_6_m9_0(@ByVal S10_6 s);
    @Bridge public static native byte native_get_S10_6_m9_1(@ByVal S10_6 s);

    @Test public void testSizeOf_S1_0() {
        assertEquals(native_sizeof_S1_0(), S1_0.sizeOf());
    }
    @Test public void testSizeOf_S1_1() {
        assertEquals(native_sizeof_S1_1(), S1_1.sizeOf());
    }
    @Test public void testSizeOf_S1_2() {
        assertEquals(native_sizeof_S1_2(), S1_2.sizeOf());
    }
    @Test public void testSizeOf_S1_3() {
        assertEquals(native_sizeof_S1_3(), S1_3.sizeOf());
    }
    @Test public void testSizeOf_S1_4() {
        assertEquals(native_sizeof_S1_4(), S1_4.sizeOf());
    }
    @Test public void testSizeOf_S1_5() {
        assertEquals(native_sizeof_S1_5(), S1_5.sizeOf());
    }
    @Test public void testSizeOf_S1_6() {
        assertEquals(native_sizeof_S1_6(), S1_6.sizeOf());
    }
    @Test public void testSizeOf_S2_0() {
        assertEquals(native_sizeof_S2_0(), S2_0.sizeOf());
    }
    @Test public void testSizeOf_S2_1() {
        assertEquals(native_sizeof_S2_1(), S2_1.sizeOf());
    }
    @Test public void testSizeOf_S2_2() {
        assertEquals(native_sizeof_S2_2(), S2_2.sizeOf());
    }
    @Test public void testSizeOf_S2_3() {
        assertEquals(native_sizeof_S2_3(), S2_3.sizeOf());
    }
    @Test public void testSizeOf_S2_4() {
        assertEquals(native_sizeof_S2_4(), S2_4.sizeOf());
    }
    @Test public void testSizeOf_S2_5() {
        assertEquals(native_sizeof_S2_5(), S2_5.sizeOf());
    }
    @Test public void testSizeOf_S2_6() {
        assertEquals(native_sizeof_S2_6(), S2_6.sizeOf());
    }
    @Test public void testSizeOf_S3_0() {
        assertEquals(native_sizeof_S3_0(), S3_0.sizeOf());
    }
    @Test public void testSizeOf_S3_1() {
        assertEquals(native_sizeof_S3_1(), S3_1.sizeOf());
    }
    @Test public void testSizeOf_S3_2() {
        assertEquals(native_sizeof_S3_2(), S3_2.sizeOf());
    }
    @Test public void testSizeOf_S3_3() {
        assertEquals(native_sizeof_S3_3(), S3_3.sizeOf());
    }
    @Test public void testSizeOf_S3_4() {
        assertEquals(native_sizeof_S3_4(), S3_4.sizeOf());
    }
    @Test public void testSizeOf_S3_5() {
        assertEquals(native_sizeof_S3_5(), S3_5.sizeOf());
    }
    @Test public void testSizeOf_S3_6() {
        assertEquals(native_sizeof_S3_6(), S3_6.sizeOf());
    }
    @Test public void testSizeOf_S4_0() {
        assertEquals(native_sizeof_S4_0(), S4_0.sizeOf());
    }
    @Test public void testSizeOf_S4_1() {
        assertEquals(native_sizeof_S4_1(), S4_1.sizeOf());
    }
    @Test public void testSizeOf_S4_2() {
        assertEquals(native_sizeof_S4_2(), S4_2.sizeOf());
    }
    @Test public void testSizeOf_S4_3() {
        assertEquals(native_sizeof_S4_3(), S4_3.sizeOf());
    }
    @Test public void testSizeOf_S4_4() {
        assertEquals(native_sizeof_S4_4(), S4_4.sizeOf());
    }
    @Test public void testSizeOf_S4_5() {
        assertEquals(native_sizeof_S4_5(), S4_5.sizeOf());
    }
    @Test public void testSizeOf_S4_6() {
        assertEquals(native_sizeof_S4_6(), S4_6.sizeOf());
    }
    @Test public void testSizeOf_S5_0() {
        assertEquals(native_sizeof_S5_0(), S5_0.sizeOf());
    }
    @Test public void testSizeOf_S5_1() {
        assertEquals(native_sizeof_S5_1(), S5_1.sizeOf());
    }
    @Test public void testSizeOf_S5_2() {
        assertEquals(native_sizeof_S5_2(), S5_2.sizeOf());
    }
    @Test public void testSizeOf_S5_3() {
        assertEquals(native_sizeof_S5_3(), S5_3.sizeOf());
    }
    @Test public void testSizeOf_S5_4() {
        assertEquals(native_sizeof_S5_4(), S5_4.sizeOf());
    }
    @Test public void testSizeOf_S5_5() {
        assertEquals(native_sizeof_S5_5(), S5_5.sizeOf());
    }
    @Test public void testSizeOf_S5_6() {
        assertEquals(native_sizeof_S5_6(), S5_6.sizeOf());
    }
    @Test public void testSizeOf_S6_0() {
        assertEquals(native_sizeof_S6_0(), S6_0.sizeOf());
    }
    @Test public void testSizeOf_S6_1() {
        assertEquals(native_sizeof_S6_1(), S6_1.sizeOf());
    }
    @Test public void testSizeOf_S6_2() {
        assertEquals(native_sizeof_S6_2(), S6_2.sizeOf());
    }
    @Test public void testSizeOf_S6_3() {
        assertEquals(native_sizeof_S6_3(), S6_3.sizeOf());
    }
    @Test public void testSizeOf_S6_4() {
        assertEquals(native_sizeof_S6_4(), S6_4.sizeOf());
    }
    @Test public void testSizeOf_S6_5() {
        assertEquals(native_sizeof_S6_5(), S6_5.sizeOf());
    }
    @Test public void testSizeOf_S6_6() {
        assertEquals(native_sizeof_S6_6(), S6_6.sizeOf());
    }
    @Test public void testSizeOf_S7_0() {
        assertEquals(native_sizeof_S7_0(), S7_0.sizeOf());
    }
    @Test public void testSizeOf_S7_1() {
        assertEquals(native_sizeof_S7_1(), S7_1.sizeOf());
    }
    @Test public void testSizeOf_S7_2() {
        assertEquals(native_sizeof_S7_2(), S7_2.sizeOf());
    }
    @Test public void testSizeOf_S7_3() {
        assertEquals(native_sizeof_S7_3(), S7_3.sizeOf());
    }
    @Test public void testSizeOf_S7_4() {
        assertEquals(native_sizeof_S7_4(), S7_4.sizeOf());
    }
    @Test public void testSizeOf_S7_5() {
        assertEquals(native_sizeof_S7_5(), S7_5.sizeOf());
    }
    @Test public void testSizeOf_S7_6() {
        assertEquals(native_sizeof_S7_6(), S7_6.sizeOf());
    }
    @Test public void testSizeOf_S8_0() {
        assertEquals(native_sizeof_S8_0(), S8_0.sizeOf());
    }
    @Test public void testSizeOf_S8_1() {
        assertEquals(native_sizeof_S8_1(), S8_1.sizeOf());
    }
    @Test public void testSizeOf_S8_2() {
        assertEquals(native_sizeof_S8_2(), S8_2.sizeOf());
    }
    @Test public void testSizeOf_S8_3() {
        assertEquals(native_sizeof_S8_3(), S8_3.sizeOf());
    }
    @Test public void testSizeOf_S8_4() {
        assertEquals(native_sizeof_S8_4(), S8_4.sizeOf());
    }
    @Test public void testSizeOf_S8_5() {
        assertEquals(native_sizeof_S8_5(), S8_5.sizeOf());
    }
    @Test public void testSizeOf_S8_6() {
        assertEquals(native_sizeof_S8_6(), S8_6.sizeOf());
    }
    @Test public void testSizeOf_S9_0() {
        assertEquals(native_sizeof_S9_0(), S9_0.sizeOf());
    }
    @Test public void testSizeOf_S9_1() {
        assertEquals(native_sizeof_S9_1(), S9_1.sizeOf());
    }
    @Test public void testSizeOf_S9_2() {
        assertEquals(native_sizeof_S9_2(), S9_2.sizeOf());
    }
    @Test public void testSizeOf_S9_3() {
        assertEquals(native_sizeof_S9_3(), S9_3.sizeOf());
    }
    @Test public void testSizeOf_S9_4() {
        assertEquals(native_sizeof_S9_4(), S9_4.sizeOf());
    }
    @Test public void testSizeOf_S9_5() {
        assertEquals(native_sizeof_S9_5(), S9_5.sizeOf());
    }
    @Test public void testSizeOf_S9_6() {
        assertEquals(native_sizeof_S9_6(), S9_6.sizeOf());
    }
    @Test public void testSizeOf_S10_0() {
        assertEquals(native_sizeof_S10_0(), S10_0.sizeOf());
    }
    @Test public void testSizeOf_S10_1() {
        assertEquals(native_sizeof_S10_1(), S10_1.sizeOf());
    }
    @Test public void testSizeOf_S10_2() {
        assertEquals(native_sizeof_S10_2(), S10_2.sizeOf());
    }
    @Test public void testSizeOf_S10_3() {
        assertEquals(native_sizeof_S10_3(), S10_3.sizeOf());
    }
    @Test public void testSizeOf_S10_4() {
        assertEquals(native_sizeof_S10_4(), S10_4.sizeOf());
    }
    @Test public void testSizeOf_S10_5() {
        assertEquals(native_sizeof_S10_5(), S10_5.sizeOf());
    }
    @Test public void testSizeOf_S10_6() {
        assertEquals(native_sizeof_S10_6(), S10_6.sizeOf());
    }
    @Test public void testPassS1_0ByVal() {
        S1_0 s = new S1_0();
        s.m0_0((byte) 34);
        assertEquals((byte) 34, native_get_S1_0_m0_0(s));
    }
    @Test public void testPassS1_1ByVal() {
        S1_1 s = new S1_1();
        s.m0_0((short) 0x0009);
        assertEquals((short) 0x0009, native_get_S1_1_m0_0(s));
    }
    @Test public void testPassS1_2ByVal() {
        S1_2 s = new S1_2();
        s.m0_0(0x0000002d);
        assertEquals(0x0000002d, native_get_S1_2_m0_0(s));
    }
    @Test public void testPassS1_3ByVal() {
        S1_3 s = new S1_3();
        s.m0_0(0x000000000000322dL);
        assertEquals(0x000000000000322dL, native_get_S1_3_m0_0(s));
    }
    @Test public void testPassS1_4ByVal() {
        S1_4 s = new S1_4();
        s.m0_0(0.1234f);
        assertEquals(0.1234f, native_get_S1_4_m0_0(s));
    }
    @Test public void testPassS1_5ByVal() {
        S1_5 s = new S1_5();
        s.m0_0(0.1234);
        assertEquals(0.1234, native_get_S1_5_m0_0(s));
    }
    @Test public void testPassS1_6ByVal() {
        S1_6 s = new S1_6();
        s.m0_0(0.1234);
        s.m0_1((byte) 83);
        assertEquals(0.1234, native_get_S1_6_m0_0(s));
        assertEquals((byte) 83, native_get_S1_6_m0_1(s));
    }
    @Test public void testPassS2_0ByVal() {
        S2_0 s = new S2_0();
        s.m0_0((byte) 34);
        s.m1_0((byte) 59);
        assertEquals((byte) 34, native_get_S2_0_m0_0(s));
        assertEquals((byte) 59, native_get_S2_0_m1_0(s));
    }
    @Test public void testPassS2_1ByVal() {
        S2_1 s = new S2_1();
        s.m0_0((short) 0x0009);
        s.m1_0((short) 0x0042);
        assertEquals((short) 0x0009, native_get_S2_1_m0_0(s));
        assertEquals((short) 0x0042, native_get_S2_1_m1_0(s));
    }
    @Test public void testPassS2_2ByVal() {
        S2_2 s = new S2_2();
        s.m0_0(0x0000002d);
        s.m1_0(0x0000ab34);
        assertEquals(0x0000002d, native_get_S2_2_m0_0(s));
        assertEquals(0x0000ab34, native_get_S2_2_m1_0(s));
    }
    @Test public void testPassS2_3ByVal() {
        S2_3 s = new S2_3();
        s.m0_0(0x000000000000322dL);
        s.m1_0(0x0000000028abef73L);
        assertEquals(0x000000000000322dL, native_get_S2_3_m0_0(s));
        assertEquals(0x0000000028abef73L, native_get_S2_3_m1_0(s));
    }
    @Test public void testPassS2_4ByVal() {
        S2_4 s = new S2_4();
        s.m0_0(0.1234f);
        s.m1_0(123.4567f);
        assertEquals(0.1234f, native_get_S2_4_m0_0(s));
        assertEquals(123.4567f, native_get_S2_4_m1_0(s));
    }
    @Test public void testPassS2_5ByVal() {
        S2_5 s = new S2_5();
        s.m0_0(0.1234);
        s.m1_0(123.4567);
        assertEquals(0.1234, native_get_S2_5_m0_0(s));
        assertEquals(123.4567, native_get_S2_5_m1_0(s));
    }
    @Test public void testPassS2_6ByVal() {
        S2_6 s = new S2_6();
        s.m0_0(0.1234);
        s.m0_1((byte) 83);
        s.m1_0(123.4567);
        s.m1_1((byte) 103);
        assertEquals(0.1234, native_get_S2_6_m0_0(s));
        assertEquals((byte) 83, native_get_S2_6_m0_1(s));
        assertEquals(123.4567, native_get_S2_6_m1_0(s));
        assertEquals((byte) 103, native_get_S2_6_m1_1(s));
    }
    @Test public void testPassS3_0ByVal() {
        S3_0 s = new S3_0();
        s.m0_0((byte) 34);
        s.m1_0((byte) 59);
        s.m2_0((byte) 101);
        assertEquals((byte) 34, native_get_S3_0_m0_0(s));
        assertEquals((byte) 59, native_get_S3_0_m1_0(s));
        assertEquals((byte) 101, native_get_S3_0_m2_0(s));
    }
    @Test public void testPassS3_1ByVal() {
        S3_1 s = new S3_1();
        s.m0_0((short) 0x0009);
        s.m1_0((short) 0x0042);
        s.m2_0((short) 0x08ab);
        assertEquals((short) 0x0009, native_get_S3_1_m0_0(s));
        assertEquals((short) 0x0042, native_get_S3_1_m1_0(s));
        assertEquals((short) 0x08ab, native_get_S3_1_m2_0(s));
    }
    @Test public void testPassS3_2ByVal() {
        S3_2 s = new S3_2();
        s.m0_0(0x0000002d);
        s.m1_0(0x0000ab34);
        s.m2_0(0x0019bec6);
        assertEquals(0x0000002d, native_get_S3_2_m0_0(s));
        assertEquals(0x0000ab34, native_get_S3_2_m1_0(s));
        assertEquals(0x0019bec6, native_get_S3_2_m2_0(s));
    }
    @Test public void testPassS3_3ByVal() {
        S3_3 s = new S3_3();
        s.m0_0(0x000000000000322dL);
        s.m1_0(0x0000000028abef73L);
        s.m2_0(0x0000a128abf4c901L);
        assertEquals(0x000000000000322dL, native_get_S3_3_m0_0(s));
        assertEquals(0x0000000028abef73L, native_get_S3_3_m1_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S3_3_m2_0(s));
    }
    @Test public void testPassS3_4ByVal() {
        S3_4 s = new S3_4();
        s.m0_0(0.1234f);
        s.m1_0(123.4567f);
        s.m2_0(123456.789f);
        assertEquals(0.1234f, native_get_S3_4_m0_0(s));
        assertEquals(123.4567f, native_get_S3_4_m1_0(s));
        assertEquals(123456.789f, native_get_S3_4_m2_0(s));
    }
    @Test public void testPassS3_5ByVal() {
        S3_5 s = new S3_5();
        s.m0_0(0.1234);
        s.m1_0(123.4567);
        s.m2_0(123456.789);
        assertEquals(0.1234, native_get_S3_5_m0_0(s));
        assertEquals(123.4567, native_get_S3_5_m1_0(s));
        assertEquals(123456.789, native_get_S3_5_m2_0(s));
    }
    @Test public void testPassS3_6ByVal() {
        S3_6 s = new S3_6();
        s.m0_0(0.1234);
        s.m0_1((byte) 83);
        s.m1_0(123.4567);
        s.m1_1((byte) 103);
        s.m2_0(123456.789);
        s.m2_1((byte) 189);
        assertEquals(0.1234, native_get_S3_6_m0_0(s));
        assertEquals((byte) 83, native_get_S3_6_m0_1(s));
        assertEquals(123.4567, native_get_S3_6_m1_0(s));
        assertEquals((byte) 103, native_get_S3_6_m1_1(s));
        assertEquals(123456.789, native_get_S3_6_m2_0(s));
        assertEquals((byte) 189, native_get_S3_6_m2_1(s));
    }
    @Test public void testPassS4_0ByVal() {
        S4_0 s = new S4_0();
        s.m0_0((byte) 34);
        s.m1_0((byte) 59);
        s.m2_0((byte) 101);
        s.m3_0((byte) 158);
        assertEquals((byte) 34, native_get_S4_0_m0_0(s));
        assertEquals((byte) 59, native_get_S4_0_m1_0(s));
        assertEquals((byte) 101, native_get_S4_0_m2_0(s));
        assertEquals((byte) 158, native_get_S4_0_m3_0(s));
    }
    @Test public void testPassS4_1ByVal() {
        S4_1 s = new S4_1();
        s.m0_0((short) 0x0009);
        s.m1_0((short) 0x0042);
        s.m2_0((short) 0x08ab);
        s.m3_0((short) 0xa4f9);
        assertEquals((short) 0x0009, native_get_S4_1_m0_0(s));
        assertEquals((short) 0x0042, native_get_S4_1_m1_0(s));
        assertEquals((short) 0x08ab, native_get_S4_1_m2_0(s));
        assertEquals((short) 0xa4f9, native_get_S4_1_m3_0(s));
    }
    @Test public void testPassS4_2ByVal() {
        S4_2 s = new S4_2();
        s.m0_0(0x0000002d);
        s.m1_0(0x0000ab34);
        s.m2_0(0x0019bec6);
        s.m3_0(0xe5ab2678);
        assertEquals(0x0000002d, native_get_S4_2_m0_0(s));
        assertEquals(0x0000ab34, native_get_S4_2_m1_0(s));
        assertEquals(0x0019bec6, native_get_S4_2_m2_0(s));
        assertEquals(0xe5ab2678, native_get_S4_2_m3_0(s));
    }
    @Test public void testPassS4_3ByVal() {
        S4_3 s = new S4_3();
        s.m0_0(0x000000000000322dL);
        s.m1_0(0x0000000028abef73L);
        s.m2_0(0x0000a128abf4c901L);
        s.m3_0(0x61b8afc3450a1b56L);
        assertEquals(0x000000000000322dL, native_get_S4_3_m0_0(s));
        assertEquals(0x0000000028abef73L, native_get_S4_3_m1_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S4_3_m2_0(s));
        assertEquals(0x61b8afc3450a1b56L, native_get_S4_3_m3_0(s));
    }
    @Test public void testPassS4_4ByVal() {
        S4_4 s = new S4_4();
        s.m0_0(0.1234f);
        s.m1_0(123.4567f);
        s.m2_0(123456.789f);
        s.m3_0(12345678.90123f);
        assertEquals(0.1234f, native_get_S4_4_m0_0(s));
        assertEquals(123.4567f, native_get_S4_4_m1_0(s));
        assertEquals(123456.789f, native_get_S4_4_m2_0(s));
        assertEquals(12345678.90123f, native_get_S4_4_m3_0(s));
    }
    @Test public void testPassS4_5ByVal() {
        S4_5 s = new S4_5();
        s.m0_0(0.1234);
        s.m1_0(123.4567);
        s.m2_0(123456.789);
        s.m3_0(12345678.90123);
        assertEquals(0.1234, native_get_S4_5_m0_0(s));
        assertEquals(123.4567, native_get_S4_5_m1_0(s));
        assertEquals(123456.789, native_get_S4_5_m2_0(s));
        assertEquals(12345678.90123, native_get_S4_5_m3_0(s));
    }
    @Test public void testPassS4_6ByVal() {
        S4_6 s = new S4_6();
        s.m0_0(0.1234);
        s.m0_1((byte) 83);
        s.m1_0(123.4567);
        s.m1_1((byte) 103);
        s.m2_0(123456.789);
        s.m2_1((byte) 189);
        s.m3_0(12345678.90123);
        s.m3_1((byte) 247);
        assertEquals(0.1234, native_get_S4_6_m0_0(s));
        assertEquals((byte) 83, native_get_S4_6_m0_1(s));
        assertEquals(123.4567, native_get_S4_6_m1_0(s));
        assertEquals((byte) 103, native_get_S4_6_m1_1(s));
        assertEquals(123456.789, native_get_S4_6_m2_0(s));
        assertEquals((byte) 189, native_get_S4_6_m2_1(s));
        assertEquals(12345678.90123, native_get_S4_6_m3_0(s));
        assertEquals((byte) 247, native_get_S4_6_m3_1(s));
    }
    @Test public void testPassS5_0ByVal() {
        S5_0 s = new S5_0();
        s.m0_0((byte) 34);
        s.m1_0((byte) 59);
        s.m2_0((byte) 101);
        s.m3_0((byte) 158);
        s.m4_0((byte) 34);
        assertEquals((byte) 34, native_get_S5_0_m0_0(s));
        assertEquals((byte) 59, native_get_S5_0_m1_0(s));
        assertEquals((byte) 101, native_get_S5_0_m2_0(s));
        assertEquals((byte) 158, native_get_S5_0_m3_0(s));
        assertEquals((byte) 34, native_get_S5_0_m4_0(s));
    }
    @Test public void testPassS5_1ByVal() {
        S5_1 s = new S5_1();
        s.m0_0((short) 0x0009);
        s.m1_0((short) 0x0042);
        s.m2_0((short) 0x08ab);
        s.m3_0((short) 0xa4f9);
        s.m4_0((short) 0x0009);
        assertEquals((short) 0x0009, native_get_S5_1_m0_0(s));
        assertEquals((short) 0x0042, native_get_S5_1_m1_0(s));
        assertEquals((short) 0x08ab, native_get_S5_1_m2_0(s));
        assertEquals((short) 0xa4f9, native_get_S5_1_m3_0(s));
        assertEquals((short) 0x0009, native_get_S5_1_m4_0(s));
    }
    @Test public void testPassS5_2ByVal() {
        S5_2 s = new S5_2();
        s.m0_0(0x0000002d);
        s.m1_0(0x0000ab34);
        s.m2_0(0x0019bec6);
        s.m3_0(0xe5ab2678);
        s.m4_0(0x0000002d);
        assertEquals(0x0000002d, native_get_S5_2_m0_0(s));
        assertEquals(0x0000ab34, native_get_S5_2_m1_0(s));
        assertEquals(0x0019bec6, native_get_S5_2_m2_0(s));
        assertEquals(0xe5ab2678, native_get_S5_2_m3_0(s));
        assertEquals(0x0000002d, native_get_S5_2_m4_0(s));
    }
    @Test public void testPassS5_3ByVal() {
        S5_3 s = new S5_3();
        s.m0_0(0x000000000000322dL);
        s.m1_0(0x0000000028abef73L);
        s.m2_0(0x0000a128abf4c901L);
        s.m3_0(0x61b8afc3450a1b56L);
        s.m4_0(0x000000000000322dL);
        assertEquals(0x000000000000322dL, native_get_S5_3_m0_0(s));
        assertEquals(0x0000000028abef73L, native_get_S5_3_m1_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S5_3_m2_0(s));
        assertEquals(0x61b8afc3450a1b56L, native_get_S5_3_m3_0(s));
        assertEquals(0x000000000000322dL, native_get_S5_3_m4_0(s));
    }
    @Test public void testPassS5_4ByVal() {
        S5_4 s = new S5_4();
        s.m0_0(0.1234f);
        s.m1_0(123.4567f);
        s.m2_0(123456.789f);
        s.m3_0(12345678.90123f);
        s.m4_0(0.1234f);
        assertEquals(0.1234f, native_get_S5_4_m0_0(s));
        assertEquals(123.4567f, native_get_S5_4_m1_0(s));
        assertEquals(123456.789f, native_get_S5_4_m2_0(s));
        assertEquals(12345678.90123f, native_get_S5_4_m3_0(s));
        assertEquals(0.1234f, native_get_S5_4_m4_0(s));
    }
    @Test public void testPassS5_5ByVal() {
        S5_5 s = new S5_5();
        s.m0_0(0.1234);
        s.m1_0(123.4567);
        s.m2_0(123456.789);
        s.m3_0(12345678.90123);
        s.m4_0(0.1234);
        assertEquals(0.1234, native_get_S5_5_m0_0(s));
        assertEquals(123.4567, native_get_S5_5_m1_0(s));
        assertEquals(123456.789, native_get_S5_5_m2_0(s));
        assertEquals(12345678.90123, native_get_S5_5_m3_0(s));
        assertEquals(0.1234, native_get_S5_5_m4_0(s));
    }
    @Test public void testPassS5_6ByVal() {
        S5_6 s = new S5_6();
        s.m0_0(0.1234);
        s.m0_1((byte) 83);
        s.m1_0(123.4567);
        s.m1_1((byte) 103);
        s.m2_0(123456.789);
        s.m2_1((byte) 189);
        s.m3_0(12345678.90123);
        s.m3_1((byte) 247);
        s.m4_0(0.1234);
        s.m4_1((byte) 83);
        assertEquals(0.1234, native_get_S5_6_m0_0(s));
        assertEquals((byte) 83, native_get_S5_6_m0_1(s));
        assertEquals(123.4567, native_get_S5_6_m1_0(s));
        assertEquals((byte) 103, native_get_S5_6_m1_1(s));
        assertEquals(123456.789, native_get_S5_6_m2_0(s));
        assertEquals((byte) 189, native_get_S5_6_m2_1(s));
        assertEquals(12345678.90123, native_get_S5_6_m3_0(s));
        assertEquals((byte) 247, native_get_S5_6_m3_1(s));
        assertEquals(0.1234, native_get_S5_6_m4_0(s));
        assertEquals((byte) 83, native_get_S5_6_m4_1(s));
    }
    @Test public void testPassS6_0ByVal() {
        S6_0 s = new S6_0();
        s.m0_0((byte) 34);
        s.m1_0((byte) 59);
        s.m2_0((byte) 101);
        s.m3_0((byte) 158);
        s.m4_0((byte) 34);
        s.m5_0((byte) 59);
        assertEquals((byte) 34, native_get_S6_0_m0_0(s));
        assertEquals((byte) 59, native_get_S6_0_m1_0(s));
        assertEquals((byte) 101, native_get_S6_0_m2_0(s));
        assertEquals((byte) 158, native_get_S6_0_m3_0(s));
        assertEquals((byte) 34, native_get_S6_0_m4_0(s));
        assertEquals((byte) 59, native_get_S6_0_m5_0(s));
    }
    @Test public void testPassS6_1ByVal() {
        S6_1 s = new S6_1();
        s.m0_0((short) 0x0009);
        s.m1_0((short) 0x0042);
        s.m2_0((short) 0x08ab);
        s.m3_0((short) 0xa4f9);
        s.m4_0((short) 0x0009);
        s.m5_0((short) 0x0042);
        assertEquals((short) 0x0009, native_get_S6_1_m0_0(s));
        assertEquals((short) 0x0042, native_get_S6_1_m1_0(s));
        assertEquals((short) 0x08ab, native_get_S6_1_m2_0(s));
        assertEquals((short) 0xa4f9, native_get_S6_1_m3_0(s));
        assertEquals((short) 0x0009, native_get_S6_1_m4_0(s));
        assertEquals((short) 0x0042, native_get_S6_1_m5_0(s));
    }
    @Test public void testPassS6_2ByVal() {
        S6_2 s = new S6_2();
        s.m0_0(0x0000002d);
        s.m1_0(0x0000ab34);
        s.m2_0(0x0019bec6);
        s.m3_0(0xe5ab2678);
        s.m4_0(0x0000002d);
        s.m5_0(0x0000ab34);
        assertEquals(0x0000002d, native_get_S6_2_m0_0(s));
        assertEquals(0x0000ab34, native_get_S6_2_m1_0(s));
        assertEquals(0x0019bec6, native_get_S6_2_m2_0(s));
        assertEquals(0xe5ab2678, native_get_S6_2_m3_0(s));
        assertEquals(0x0000002d, native_get_S6_2_m4_0(s));
        assertEquals(0x0000ab34, native_get_S6_2_m5_0(s));
    }
    @Test public void testPassS6_3ByVal() {
        S6_3 s = new S6_3();
        s.m0_0(0x000000000000322dL);
        s.m1_0(0x0000000028abef73L);
        s.m2_0(0x0000a128abf4c901L);
        s.m3_0(0x61b8afc3450a1b56L);
        s.m4_0(0x000000000000322dL);
        s.m5_0(0x0000000028abef73L);
        assertEquals(0x000000000000322dL, native_get_S6_3_m0_0(s));
        assertEquals(0x0000000028abef73L, native_get_S6_3_m1_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S6_3_m2_0(s));
        assertEquals(0x61b8afc3450a1b56L, native_get_S6_3_m3_0(s));
        assertEquals(0x000000000000322dL, native_get_S6_3_m4_0(s));
        assertEquals(0x0000000028abef73L, native_get_S6_3_m5_0(s));
    }
    @Test public void testPassS6_4ByVal() {
        S6_4 s = new S6_4();
        s.m0_0(0.1234f);
        s.m1_0(123.4567f);
        s.m2_0(123456.789f);
        s.m3_0(12345678.90123f);
        s.m4_0(0.1234f);
        s.m5_0(123.4567f);
        assertEquals(0.1234f, native_get_S6_4_m0_0(s));
        assertEquals(123.4567f, native_get_S6_4_m1_0(s));
        assertEquals(123456.789f, native_get_S6_4_m2_0(s));
        assertEquals(12345678.90123f, native_get_S6_4_m3_0(s));
        assertEquals(0.1234f, native_get_S6_4_m4_0(s));
        assertEquals(123.4567f, native_get_S6_4_m5_0(s));
    }
    @Test public void testPassS6_5ByVal() {
        S6_5 s = new S6_5();
        s.m0_0(0.1234);
        s.m1_0(123.4567);
        s.m2_0(123456.789);
        s.m3_0(12345678.90123);
        s.m4_0(0.1234);
        s.m5_0(123.4567);
        assertEquals(0.1234, native_get_S6_5_m0_0(s));
        assertEquals(123.4567, native_get_S6_5_m1_0(s));
        assertEquals(123456.789, native_get_S6_5_m2_0(s));
        assertEquals(12345678.90123, native_get_S6_5_m3_0(s));
        assertEquals(0.1234, native_get_S6_5_m4_0(s));
        assertEquals(123.4567, native_get_S6_5_m5_0(s));
    }
    @Test public void testPassS6_6ByVal() {
        S6_6 s = new S6_6();
        s.m0_0(0.1234);
        s.m0_1((byte) 83);
        s.m1_0(123.4567);
        s.m1_1((byte) 103);
        s.m2_0(123456.789);
        s.m2_1((byte) 189);
        s.m3_0(12345678.90123);
        s.m3_1((byte) 247);
        s.m4_0(0.1234);
        s.m4_1((byte) 83);
        s.m5_0(123.4567);
        s.m5_1((byte) 103);
        assertEquals(0.1234, native_get_S6_6_m0_0(s));
        assertEquals((byte) 83, native_get_S6_6_m0_1(s));
        assertEquals(123.4567, native_get_S6_6_m1_0(s));
        assertEquals((byte) 103, native_get_S6_6_m1_1(s));
        assertEquals(123456.789, native_get_S6_6_m2_0(s));
        assertEquals((byte) 189, native_get_S6_6_m2_1(s));
        assertEquals(12345678.90123, native_get_S6_6_m3_0(s));
        assertEquals((byte) 247, native_get_S6_6_m3_1(s));
        assertEquals(0.1234, native_get_S6_6_m4_0(s));
        assertEquals((byte) 83, native_get_S6_6_m4_1(s));
        assertEquals(123.4567, native_get_S6_6_m5_0(s));
        assertEquals((byte) 103, native_get_S6_6_m5_1(s));
    }
    @Test public void testPassS7_0ByVal() {
        S7_0 s = new S7_0();
        s.m0_0((byte) 34);
        s.m1_0((byte) 59);
        s.m2_0((byte) 101);
        s.m3_0((byte) 158);
        s.m4_0((byte) 34);
        s.m5_0((byte) 59);
        s.m6_0((byte) 101);
        assertEquals((byte) 34, native_get_S7_0_m0_0(s));
        assertEquals((byte) 59, native_get_S7_0_m1_0(s));
        assertEquals((byte) 101, native_get_S7_0_m2_0(s));
        assertEquals((byte) 158, native_get_S7_0_m3_0(s));
        assertEquals((byte) 34, native_get_S7_0_m4_0(s));
        assertEquals((byte) 59, native_get_S7_0_m5_0(s));
        assertEquals((byte) 101, native_get_S7_0_m6_0(s));
    }
    @Test public void testPassS7_1ByVal() {
        S7_1 s = new S7_1();
        s.m0_0((short) 0x0009);
        s.m1_0((short) 0x0042);
        s.m2_0((short) 0x08ab);
        s.m3_0((short) 0xa4f9);
        s.m4_0((short) 0x0009);
        s.m5_0((short) 0x0042);
        s.m6_0((short) 0x08ab);
        assertEquals((short) 0x0009, native_get_S7_1_m0_0(s));
        assertEquals((short) 0x0042, native_get_S7_1_m1_0(s));
        assertEquals((short) 0x08ab, native_get_S7_1_m2_0(s));
        assertEquals((short) 0xa4f9, native_get_S7_1_m3_0(s));
        assertEquals((short) 0x0009, native_get_S7_1_m4_0(s));
        assertEquals((short) 0x0042, native_get_S7_1_m5_0(s));
        assertEquals((short) 0x08ab, native_get_S7_1_m6_0(s));
    }
    @Test public void testPassS7_2ByVal() {
        S7_2 s = new S7_2();
        s.m0_0(0x0000002d);
        s.m1_0(0x0000ab34);
        s.m2_0(0x0019bec6);
        s.m3_0(0xe5ab2678);
        s.m4_0(0x0000002d);
        s.m5_0(0x0000ab34);
        s.m6_0(0x0019bec6);
        assertEquals(0x0000002d, native_get_S7_2_m0_0(s));
        assertEquals(0x0000ab34, native_get_S7_2_m1_0(s));
        assertEquals(0x0019bec6, native_get_S7_2_m2_0(s));
        assertEquals(0xe5ab2678, native_get_S7_2_m3_0(s));
        assertEquals(0x0000002d, native_get_S7_2_m4_0(s));
        assertEquals(0x0000ab34, native_get_S7_2_m5_0(s));
        assertEquals(0x0019bec6, native_get_S7_2_m6_0(s));
    }
    @Test public void testPassS7_3ByVal() {
        S7_3 s = new S7_3();
        s.m0_0(0x000000000000322dL);
        s.m1_0(0x0000000028abef73L);
        s.m2_0(0x0000a128abf4c901L);
        s.m3_0(0x61b8afc3450a1b56L);
        s.m4_0(0x000000000000322dL);
        s.m5_0(0x0000000028abef73L);
        s.m6_0(0x0000a128abf4c901L);
        assertEquals(0x000000000000322dL, native_get_S7_3_m0_0(s));
        assertEquals(0x0000000028abef73L, native_get_S7_3_m1_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S7_3_m2_0(s));
        assertEquals(0x61b8afc3450a1b56L, native_get_S7_3_m3_0(s));
        assertEquals(0x000000000000322dL, native_get_S7_3_m4_0(s));
        assertEquals(0x0000000028abef73L, native_get_S7_3_m5_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S7_3_m6_0(s));
    }
    @Test public void testPassS7_4ByVal() {
        S7_4 s = new S7_4();
        s.m0_0(0.1234f);
        s.m1_0(123.4567f);
        s.m2_0(123456.789f);
        s.m3_0(12345678.90123f);
        s.m4_0(0.1234f);
        s.m5_0(123.4567f);
        s.m6_0(123456.789f);
        assertEquals(0.1234f, native_get_S7_4_m0_0(s));
        assertEquals(123.4567f, native_get_S7_4_m1_0(s));
        assertEquals(123456.789f, native_get_S7_4_m2_0(s));
        assertEquals(12345678.90123f, native_get_S7_4_m3_0(s));
        assertEquals(0.1234f, native_get_S7_4_m4_0(s));
        assertEquals(123.4567f, native_get_S7_4_m5_0(s));
        assertEquals(123456.789f, native_get_S7_4_m6_0(s));
    }
    @Test public void testPassS7_5ByVal() {
        S7_5 s = new S7_5();
        s.m0_0(0.1234);
        s.m1_0(123.4567);
        s.m2_0(123456.789);
        s.m3_0(12345678.90123);
        s.m4_0(0.1234);
        s.m5_0(123.4567);
        s.m6_0(123456.789);
        assertEquals(0.1234, native_get_S7_5_m0_0(s));
        assertEquals(123.4567, native_get_S7_5_m1_0(s));
        assertEquals(123456.789, native_get_S7_5_m2_0(s));
        assertEquals(12345678.90123, native_get_S7_5_m3_0(s));
        assertEquals(0.1234, native_get_S7_5_m4_0(s));
        assertEquals(123.4567, native_get_S7_5_m5_0(s));
        assertEquals(123456.789, native_get_S7_5_m6_0(s));
    }
    @Test public void testPassS7_6ByVal() {
        S7_6 s = new S7_6();
        s.m0_0(0.1234);
        s.m0_1((byte) 83);
        s.m1_0(123.4567);
        s.m1_1((byte) 103);
        s.m2_0(123456.789);
        s.m2_1((byte) 189);
        s.m3_0(12345678.90123);
        s.m3_1((byte) 247);
        s.m4_0(0.1234);
        s.m4_1((byte) 83);
        s.m5_0(123.4567);
        s.m5_1((byte) 103);
        s.m6_0(123456.789);
        s.m6_1((byte) 189);
        assertEquals(0.1234, native_get_S7_6_m0_0(s));
        assertEquals((byte) 83, native_get_S7_6_m0_1(s));
        assertEquals(123.4567, native_get_S7_6_m1_0(s));
        assertEquals((byte) 103, native_get_S7_6_m1_1(s));
        assertEquals(123456.789, native_get_S7_6_m2_0(s));
        assertEquals((byte) 189, native_get_S7_6_m2_1(s));
        assertEquals(12345678.90123, native_get_S7_6_m3_0(s));
        assertEquals((byte) 247, native_get_S7_6_m3_1(s));
        assertEquals(0.1234, native_get_S7_6_m4_0(s));
        assertEquals((byte) 83, native_get_S7_6_m4_1(s));
        assertEquals(123.4567, native_get_S7_6_m5_0(s));
        assertEquals((byte) 103, native_get_S7_6_m5_1(s));
        assertEquals(123456.789, native_get_S7_6_m6_0(s));
        assertEquals((byte) 189, native_get_S7_6_m6_1(s));
    }
    @Test public void testPassS8_0ByVal() {
        S8_0 s = new S8_0();
        s.m0_0((byte) 34);
        s.m1_0((byte) 59);
        s.m2_0((byte) 101);
        s.m3_0((byte) 158);
        s.m4_0((byte) 34);
        s.m5_0((byte) 59);
        s.m6_0((byte) 101);
        s.m7_0((byte) 158);
        assertEquals((byte) 34, native_get_S8_0_m0_0(s));
        assertEquals((byte) 59, native_get_S8_0_m1_0(s));
        assertEquals((byte) 101, native_get_S8_0_m2_0(s));
        assertEquals((byte) 158, native_get_S8_0_m3_0(s));
        assertEquals((byte) 34, native_get_S8_0_m4_0(s));
        assertEquals((byte) 59, native_get_S8_0_m5_0(s));
        assertEquals((byte) 101, native_get_S8_0_m6_0(s));
        assertEquals((byte) 158, native_get_S8_0_m7_0(s));
    }
    @Test public void testPassS8_1ByVal() {
        S8_1 s = new S8_1();
        s.m0_0((short) 0x0009);
        s.m1_0((short) 0x0042);
        s.m2_0((short) 0x08ab);
        s.m3_0((short) 0xa4f9);
        s.m4_0((short) 0x0009);
        s.m5_0((short) 0x0042);
        s.m6_0((short) 0x08ab);
        s.m7_0((short) 0xa4f9);
        assertEquals((short) 0x0009, native_get_S8_1_m0_0(s));
        assertEquals((short) 0x0042, native_get_S8_1_m1_0(s));
        assertEquals((short) 0x08ab, native_get_S8_1_m2_0(s));
        assertEquals((short) 0xa4f9, native_get_S8_1_m3_0(s));
        assertEquals((short) 0x0009, native_get_S8_1_m4_0(s));
        assertEquals((short) 0x0042, native_get_S8_1_m5_0(s));
        assertEquals((short) 0x08ab, native_get_S8_1_m6_0(s));
        assertEquals((short) 0xa4f9, native_get_S8_1_m7_0(s));
    }
    @Test public void testPassS8_2ByVal() {
        S8_2 s = new S8_2();
        s.m0_0(0x0000002d);
        s.m1_0(0x0000ab34);
        s.m2_0(0x0019bec6);
        s.m3_0(0xe5ab2678);
        s.m4_0(0x0000002d);
        s.m5_0(0x0000ab34);
        s.m6_0(0x0019bec6);
        s.m7_0(0xe5ab2678);
        assertEquals(0x0000002d, native_get_S8_2_m0_0(s));
        assertEquals(0x0000ab34, native_get_S8_2_m1_0(s));
        assertEquals(0x0019bec6, native_get_S8_2_m2_0(s));
        assertEquals(0xe5ab2678, native_get_S8_2_m3_0(s));
        assertEquals(0x0000002d, native_get_S8_2_m4_0(s));
        assertEquals(0x0000ab34, native_get_S8_2_m5_0(s));
        assertEquals(0x0019bec6, native_get_S8_2_m6_0(s));
        assertEquals(0xe5ab2678, native_get_S8_2_m7_0(s));
    }
    @Test public void testPassS8_3ByVal() {
        S8_3 s = new S8_3();
        s.m0_0(0x000000000000322dL);
        s.m1_0(0x0000000028abef73L);
        s.m2_0(0x0000a128abf4c901L);
        s.m3_0(0x61b8afc3450a1b56L);
        s.m4_0(0x000000000000322dL);
        s.m5_0(0x0000000028abef73L);
        s.m6_0(0x0000a128abf4c901L);
        s.m7_0(0x61b8afc3450a1b56L);
        assertEquals(0x000000000000322dL, native_get_S8_3_m0_0(s));
        assertEquals(0x0000000028abef73L, native_get_S8_3_m1_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S8_3_m2_0(s));
        assertEquals(0x61b8afc3450a1b56L, native_get_S8_3_m3_0(s));
        assertEquals(0x000000000000322dL, native_get_S8_3_m4_0(s));
        assertEquals(0x0000000028abef73L, native_get_S8_3_m5_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S8_3_m6_0(s));
        assertEquals(0x61b8afc3450a1b56L, native_get_S8_3_m7_0(s));
    }
    @Test public void testPassS8_4ByVal() {
        S8_4 s = new S8_4();
        s.m0_0(0.1234f);
        s.m1_0(123.4567f);
        s.m2_0(123456.789f);
        s.m3_0(12345678.90123f);
        s.m4_0(0.1234f);
        s.m5_0(123.4567f);
        s.m6_0(123456.789f);
        s.m7_0(12345678.90123f);
        assertEquals(0.1234f, native_get_S8_4_m0_0(s));
        assertEquals(123.4567f, native_get_S8_4_m1_0(s));
        assertEquals(123456.789f, native_get_S8_4_m2_0(s));
        assertEquals(12345678.90123f, native_get_S8_4_m3_0(s));
        assertEquals(0.1234f, native_get_S8_4_m4_0(s));
        assertEquals(123.4567f, native_get_S8_4_m5_0(s));
        assertEquals(123456.789f, native_get_S8_4_m6_0(s));
        assertEquals(12345678.90123f, native_get_S8_4_m7_0(s));
    }
    @Test public void testPassS8_5ByVal() {
        S8_5 s = new S8_5();
        s.m0_0(0.1234);
        s.m1_0(123.4567);
        s.m2_0(123456.789);
        s.m3_0(12345678.90123);
        s.m4_0(0.1234);
        s.m5_0(123.4567);
        s.m6_0(123456.789);
        s.m7_0(12345678.90123);
        assertEquals(0.1234, native_get_S8_5_m0_0(s));
        assertEquals(123.4567, native_get_S8_5_m1_0(s));
        assertEquals(123456.789, native_get_S8_5_m2_0(s));
        assertEquals(12345678.90123, native_get_S8_5_m3_0(s));
        assertEquals(0.1234, native_get_S8_5_m4_0(s));
        assertEquals(123.4567, native_get_S8_5_m5_0(s));
        assertEquals(123456.789, native_get_S8_5_m6_0(s));
        assertEquals(12345678.90123, native_get_S8_5_m7_0(s));
    }
    @Test public void testPassS8_6ByVal() {
        S8_6 s = new S8_6();
        s.m0_0(0.1234);
        s.m0_1((byte) 83);
        s.m1_0(123.4567);
        s.m1_1((byte) 103);
        s.m2_0(123456.789);
        s.m2_1((byte) 189);
        s.m3_0(12345678.90123);
        s.m3_1((byte) 247);
        s.m4_0(0.1234);
        s.m4_1((byte) 83);
        s.m5_0(123.4567);
        s.m5_1((byte) 103);
        s.m6_0(123456.789);
        s.m6_1((byte) 189);
        s.m7_0(12345678.90123);
        s.m7_1((byte) 247);
        assertEquals(0.1234, native_get_S8_6_m0_0(s));
        assertEquals((byte) 83, native_get_S8_6_m0_1(s));
        assertEquals(123.4567, native_get_S8_6_m1_0(s));
        assertEquals((byte) 103, native_get_S8_6_m1_1(s));
        assertEquals(123456.789, native_get_S8_6_m2_0(s));
        assertEquals((byte) 189, native_get_S8_6_m2_1(s));
        assertEquals(12345678.90123, native_get_S8_6_m3_0(s));
        assertEquals((byte) 247, native_get_S8_6_m3_1(s));
        assertEquals(0.1234, native_get_S8_6_m4_0(s));
        assertEquals((byte) 83, native_get_S8_6_m4_1(s));
        assertEquals(123.4567, native_get_S8_6_m5_0(s));
        assertEquals((byte) 103, native_get_S8_6_m5_1(s));
        assertEquals(123456.789, native_get_S8_6_m6_0(s));
        assertEquals((byte) 189, native_get_S8_6_m6_1(s));
        assertEquals(12345678.90123, native_get_S8_6_m7_0(s));
        assertEquals((byte) 247, native_get_S8_6_m7_1(s));
    }
    @Test public void testPassS9_0ByVal() {
        S9_0 s = new S9_0();
        s.m0_0((byte) 34);
        s.m1_0((byte) 59);
        s.m2_0((byte) 101);
        s.m3_0((byte) 158);
        s.m4_0((byte) 34);
        s.m5_0((byte) 59);
        s.m6_0((byte) 101);
        s.m7_0((byte) 158);
        s.m8_0((byte) 34);
        assertEquals((byte) 34, native_get_S9_0_m0_0(s));
        assertEquals((byte) 59, native_get_S9_0_m1_0(s));
        assertEquals((byte) 101, native_get_S9_0_m2_0(s));
        assertEquals((byte) 158, native_get_S9_0_m3_0(s));
        assertEquals((byte) 34, native_get_S9_0_m4_0(s));
        assertEquals((byte) 59, native_get_S9_0_m5_0(s));
        assertEquals((byte) 101, native_get_S9_0_m6_0(s));
        assertEquals((byte) 158, native_get_S9_0_m7_0(s));
        assertEquals((byte) 34, native_get_S9_0_m8_0(s));
    }
    @Test public void testPassS9_1ByVal() {
        S9_1 s = new S9_1();
        s.m0_0((short) 0x0009);
        s.m1_0((short) 0x0042);
        s.m2_0((short) 0x08ab);
        s.m3_0((short) 0xa4f9);
        s.m4_0((short) 0x0009);
        s.m5_0((short) 0x0042);
        s.m6_0((short) 0x08ab);
        s.m7_0((short) 0xa4f9);
        s.m8_0((short) 0x0009);
        assertEquals((short) 0x0009, native_get_S9_1_m0_0(s));
        assertEquals((short) 0x0042, native_get_S9_1_m1_0(s));
        assertEquals((short) 0x08ab, native_get_S9_1_m2_0(s));
        assertEquals((short) 0xa4f9, native_get_S9_1_m3_0(s));
        assertEquals((short) 0x0009, native_get_S9_1_m4_0(s));
        assertEquals((short) 0x0042, native_get_S9_1_m5_0(s));
        assertEquals((short) 0x08ab, native_get_S9_1_m6_0(s));
        assertEquals((short) 0xa4f9, native_get_S9_1_m7_0(s));
        assertEquals((short) 0x0009, native_get_S9_1_m8_0(s));
    }
    @Test public void testPassS9_2ByVal() {
        S9_2 s = new S9_2();
        s.m0_0(0x0000002d);
        s.m1_0(0x0000ab34);
        s.m2_0(0x0019bec6);
        s.m3_0(0xe5ab2678);
        s.m4_0(0x0000002d);
        s.m5_0(0x0000ab34);
        s.m6_0(0x0019bec6);
        s.m7_0(0xe5ab2678);
        s.m8_0(0x0000002d);
        assertEquals(0x0000002d, native_get_S9_2_m0_0(s));
        assertEquals(0x0000ab34, native_get_S9_2_m1_0(s));
        assertEquals(0x0019bec6, native_get_S9_2_m2_0(s));
        assertEquals(0xe5ab2678, native_get_S9_2_m3_0(s));
        assertEquals(0x0000002d, native_get_S9_2_m4_0(s));
        assertEquals(0x0000ab34, native_get_S9_2_m5_0(s));
        assertEquals(0x0019bec6, native_get_S9_2_m6_0(s));
        assertEquals(0xe5ab2678, native_get_S9_2_m7_0(s));
        assertEquals(0x0000002d, native_get_S9_2_m8_0(s));
    }
    @Test public void testPassS9_3ByVal() {
        S9_3 s = new S9_3();
        s.m0_0(0x000000000000322dL);
        s.m1_0(0x0000000028abef73L);
        s.m2_0(0x0000a128abf4c901L);
        s.m3_0(0x61b8afc3450a1b56L);
        s.m4_0(0x000000000000322dL);
        s.m5_0(0x0000000028abef73L);
        s.m6_0(0x0000a128abf4c901L);
        s.m7_0(0x61b8afc3450a1b56L);
        s.m8_0(0x000000000000322dL);
        assertEquals(0x000000000000322dL, native_get_S9_3_m0_0(s));
        assertEquals(0x0000000028abef73L, native_get_S9_3_m1_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S9_3_m2_0(s));
        assertEquals(0x61b8afc3450a1b56L, native_get_S9_3_m3_0(s));
        assertEquals(0x000000000000322dL, native_get_S9_3_m4_0(s));
        assertEquals(0x0000000028abef73L, native_get_S9_3_m5_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S9_3_m6_0(s));
        assertEquals(0x61b8afc3450a1b56L, native_get_S9_3_m7_0(s));
        assertEquals(0x000000000000322dL, native_get_S9_3_m8_0(s));
    }
    @Test public void testPassS9_4ByVal() {
        S9_4 s = new S9_4();
        s.m0_0(0.1234f);
        s.m1_0(123.4567f);
        s.m2_0(123456.789f);
        s.m3_0(12345678.90123f);
        s.m4_0(0.1234f);
        s.m5_0(123.4567f);
        s.m6_0(123456.789f);
        s.m7_0(12345678.90123f);
        s.m8_0(0.1234f);
        assertEquals(0.1234f, native_get_S9_4_m0_0(s));
        assertEquals(123.4567f, native_get_S9_4_m1_0(s));
        assertEquals(123456.789f, native_get_S9_4_m2_0(s));
        assertEquals(12345678.90123f, native_get_S9_4_m3_0(s));
        assertEquals(0.1234f, native_get_S9_4_m4_0(s));
        assertEquals(123.4567f, native_get_S9_4_m5_0(s));
        assertEquals(123456.789f, native_get_S9_4_m6_0(s));
        assertEquals(12345678.90123f, native_get_S9_4_m7_0(s));
        assertEquals(0.1234f, native_get_S9_4_m8_0(s));
    }
    @Test public void testPassS9_5ByVal() {
        S9_5 s = new S9_5();
        s.m0_0(0.1234);
        s.m1_0(123.4567);
        s.m2_0(123456.789);
        s.m3_0(12345678.90123);
        s.m4_0(0.1234);
        s.m5_0(123.4567);
        s.m6_0(123456.789);
        s.m7_0(12345678.90123);
        s.m8_0(0.1234);
        assertEquals(0.1234, native_get_S9_5_m0_0(s));
        assertEquals(123.4567, native_get_S9_5_m1_0(s));
        assertEquals(123456.789, native_get_S9_5_m2_0(s));
        assertEquals(12345678.90123, native_get_S9_5_m3_0(s));
        assertEquals(0.1234, native_get_S9_5_m4_0(s));
        assertEquals(123.4567, native_get_S9_5_m5_0(s));
        assertEquals(123456.789, native_get_S9_5_m6_0(s));
        assertEquals(12345678.90123, native_get_S9_5_m7_0(s));
        assertEquals(0.1234, native_get_S9_5_m8_0(s));
    }
    @Test public void testPassS9_6ByVal() {
        S9_6 s = new S9_6();
        s.m0_0(0.1234);
        s.m0_1((byte) 83);
        s.m1_0(123.4567);
        s.m1_1((byte) 103);
        s.m2_0(123456.789);
        s.m2_1((byte) 189);
        s.m3_0(12345678.90123);
        s.m3_1((byte) 247);
        s.m4_0(0.1234);
        s.m4_1((byte) 83);
        s.m5_0(123.4567);
        s.m5_1((byte) 103);
        s.m6_0(123456.789);
        s.m6_1((byte) 189);
        s.m7_0(12345678.90123);
        s.m7_1((byte) 247);
        s.m8_0(0.1234);
        s.m8_1((byte) 83);
        assertEquals(0.1234, native_get_S9_6_m0_0(s));
        assertEquals((byte) 83, native_get_S9_6_m0_1(s));
        assertEquals(123.4567, native_get_S9_6_m1_0(s));
        assertEquals((byte) 103, native_get_S9_6_m1_1(s));
        assertEquals(123456.789, native_get_S9_6_m2_0(s));
        assertEquals((byte) 189, native_get_S9_6_m2_1(s));
        assertEquals(12345678.90123, native_get_S9_6_m3_0(s));
        assertEquals((byte) 247, native_get_S9_6_m3_1(s));
        assertEquals(0.1234, native_get_S9_6_m4_0(s));
        assertEquals((byte) 83, native_get_S9_6_m4_1(s));
        assertEquals(123.4567, native_get_S9_6_m5_0(s));
        assertEquals((byte) 103, native_get_S9_6_m5_1(s));
        assertEquals(123456.789, native_get_S9_6_m6_0(s));
        assertEquals((byte) 189, native_get_S9_6_m6_1(s));
        assertEquals(12345678.90123, native_get_S9_6_m7_0(s));
        assertEquals((byte) 247, native_get_S9_6_m7_1(s));
        assertEquals(0.1234, native_get_S9_6_m8_0(s));
        assertEquals((byte) 83, native_get_S9_6_m8_1(s));
    }
    @Test public void testPassS10_0ByVal() {
        S10_0 s = new S10_0();
        s.m0_0((byte) 34);
        s.m1_0((byte) 59);
        s.m2_0((byte) 101);
        s.m3_0((byte) 158);
        s.m4_0((byte) 34);
        s.m5_0((byte) 59);
        s.m6_0((byte) 101);
        s.m7_0((byte) 158);
        s.m8_0((byte) 34);
        s.m9_0((byte) 59);
        assertEquals((byte) 34, native_get_S10_0_m0_0(s));
        assertEquals((byte) 59, native_get_S10_0_m1_0(s));
        assertEquals((byte) 101, native_get_S10_0_m2_0(s));
        assertEquals((byte) 158, native_get_S10_0_m3_0(s));
        assertEquals((byte) 34, native_get_S10_0_m4_0(s));
        assertEquals((byte) 59, native_get_S10_0_m5_0(s));
        assertEquals((byte) 101, native_get_S10_0_m6_0(s));
        assertEquals((byte) 158, native_get_S10_0_m7_0(s));
        assertEquals((byte) 34, native_get_S10_0_m8_0(s));
        assertEquals((byte) 59, native_get_S10_0_m9_0(s));
    }
    @Test public void testPassS10_1ByVal() {
        S10_1 s = new S10_1();
        s.m0_0((short) 0x0009);
        s.m1_0((short) 0x0042);
        s.m2_0((short) 0x08ab);
        s.m3_0((short) 0xa4f9);
        s.m4_0((short) 0x0009);
        s.m5_0((short) 0x0042);
        s.m6_0((short) 0x08ab);
        s.m7_0((short) 0xa4f9);
        s.m8_0((short) 0x0009);
        s.m9_0((short) 0x0042);
        assertEquals((short) 0x0009, native_get_S10_1_m0_0(s));
        assertEquals((short) 0x0042, native_get_S10_1_m1_0(s));
        assertEquals((short) 0x08ab, native_get_S10_1_m2_0(s));
        assertEquals((short) 0xa4f9, native_get_S10_1_m3_0(s));
        assertEquals((short) 0x0009, native_get_S10_1_m4_0(s));
        assertEquals((short) 0x0042, native_get_S10_1_m5_0(s));
        assertEquals((short) 0x08ab, native_get_S10_1_m6_0(s));
        assertEquals((short) 0xa4f9, native_get_S10_1_m7_0(s));
        assertEquals((short) 0x0009, native_get_S10_1_m8_0(s));
        assertEquals((short) 0x0042, native_get_S10_1_m9_0(s));
    }
    @Test public void testPassS10_2ByVal() {
        S10_2 s = new S10_2();
        s.m0_0(0x0000002d);
        s.m1_0(0x0000ab34);
        s.m2_0(0x0019bec6);
        s.m3_0(0xe5ab2678);
        s.m4_0(0x0000002d);
        s.m5_0(0x0000ab34);
        s.m6_0(0x0019bec6);
        s.m7_0(0xe5ab2678);
        s.m8_0(0x0000002d);
        s.m9_0(0x0000ab34);
        assertEquals(0x0000002d, native_get_S10_2_m0_0(s));
        assertEquals(0x0000ab34, native_get_S10_2_m1_0(s));
        assertEquals(0x0019bec6, native_get_S10_2_m2_0(s));
        assertEquals(0xe5ab2678, native_get_S10_2_m3_0(s));
        assertEquals(0x0000002d, native_get_S10_2_m4_0(s));
        assertEquals(0x0000ab34, native_get_S10_2_m5_0(s));
        assertEquals(0x0019bec6, native_get_S10_2_m6_0(s));
        assertEquals(0xe5ab2678, native_get_S10_2_m7_0(s));
        assertEquals(0x0000002d, native_get_S10_2_m8_0(s));
        assertEquals(0x0000ab34, native_get_S10_2_m9_0(s));
    }
    @Test public void testPassS10_3ByVal() {
        S10_3 s = new S10_3();
        s.m0_0(0x000000000000322dL);
        s.m1_0(0x0000000028abef73L);
        s.m2_0(0x0000a128abf4c901L);
        s.m3_0(0x61b8afc3450a1b56L);
        s.m4_0(0x000000000000322dL);
        s.m5_0(0x0000000028abef73L);
        s.m6_0(0x0000a128abf4c901L);
        s.m7_0(0x61b8afc3450a1b56L);
        s.m8_0(0x000000000000322dL);
        s.m9_0(0x0000000028abef73L);
        assertEquals(0x000000000000322dL, native_get_S10_3_m0_0(s));
        assertEquals(0x0000000028abef73L, native_get_S10_3_m1_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S10_3_m2_0(s));
        assertEquals(0x61b8afc3450a1b56L, native_get_S10_3_m3_0(s));
        assertEquals(0x000000000000322dL, native_get_S10_3_m4_0(s));
        assertEquals(0x0000000028abef73L, native_get_S10_3_m5_0(s));
        assertEquals(0x0000a128abf4c901L, native_get_S10_3_m6_0(s));
        assertEquals(0x61b8afc3450a1b56L, native_get_S10_3_m7_0(s));
        assertEquals(0x000000000000322dL, native_get_S10_3_m8_0(s));
        assertEquals(0x0000000028abef73L, native_get_S10_3_m9_0(s));
    }
    @Test public void testPassS10_4ByVal() {
        S10_4 s = new S10_4();
        s.m0_0(0.1234f);
        s.m1_0(123.4567f);
        s.m2_0(123456.789f);
        s.m3_0(12345678.90123f);
        s.m4_0(0.1234f);
        s.m5_0(123.4567f);
        s.m6_0(123456.789f);
        s.m7_0(12345678.90123f);
        s.m8_0(0.1234f);
        s.m9_0(123.4567f);
        assertEquals(0.1234f, native_get_S10_4_m0_0(s));
        assertEquals(123.4567f, native_get_S10_4_m1_0(s));
        assertEquals(123456.789f, native_get_S10_4_m2_0(s));
        assertEquals(12345678.90123f, native_get_S10_4_m3_0(s));
        assertEquals(0.1234f, native_get_S10_4_m4_0(s));
        assertEquals(123.4567f, native_get_S10_4_m5_0(s));
        assertEquals(123456.789f, native_get_S10_4_m6_0(s));
        assertEquals(12345678.90123f, native_get_S10_4_m7_0(s));
        assertEquals(0.1234f, native_get_S10_4_m8_0(s));
        assertEquals(123.4567f, native_get_S10_4_m9_0(s));
    }
    @Test public void testPassS10_5ByVal() {
        S10_5 s = new S10_5();
        s.m0_0(0.1234);
        s.m1_0(123.4567);
        s.m2_0(123456.789);
        s.m3_0(12345678.90123);
        s.m4_0(0.1234);
        s.m5_0(123.4567);
        s.m6_0(123456.789);
        s.m7_0(12345678.90123);
        s.m8_0(0.1234);
        s.m9_0(123.4567);
        assertEquals(0.1234, native_get_S10_5_m0_0(s));
        assertEquals(123.4567, native_get_S10_5_m1_0(s));
        assertEquals(123456.789, native_get_S10_5_m2_0(s));
        assertEquals(12345678.90123, native_get_S10_5_m3_0(s));
        assertEquals(0.1234, native_get_S10_5_m4_0(s));
        assertEquals(123.4567, native_get_S10_5_m5_0(s));
        assertEquals(123456.789, native_get_S10_5_m6_0(s));
        assertEquals(12345678.90123, native_get_S10_5_m7_0(s));
        assertEquals(0.1234, native_get_S10_5_m8_0(s));
        assertEquals(123.4567, native_get_S10_5_m9_0(s));
    }
    @Test public void testPassS10_6ByVal() {
        S10_6 s = new S10_6();
        s.m0_0(0.1234);
        s.m0_1((byte) 83);
        s.m1_0(123.4567);
        s.m1_1((byte) 103);
        s.m2_0(123456.789);
        s.m2_1((byte) 189);
        s.m3_0(12345678.90123);
        s.m3_1((byte) 247);
        s.m4_0(0.1234);
        s.m4_1((byte) 83);
        s.m5_0(123.4567);
        s.m5_1((byte) 103);
        s.m6_0(123456.789);
        s.m6_1((byte) 189);
        s.m7_0(12345678.90123);
        s.m7_1((byte) 247);
        s.m8_0(0.1234);
        s.m8_1((byte) 83);
        s.m9_0(123.4567);
        s.m9_1((byte) 103);
        assertEquals(0.1234, native_get_S10_6_m0_0(s));
        assertEquals((byte) 83, native_get_S10_6_m0_1(s));
        assertEquals(123.4567, native_get_S10_6_m1_0(s));
        assertEquals((byte) 103, native_get_S10_6_m1_1(s));
        assertEquals(123456.789, native_get_S10_6_m2_0(s));
        assertEquals((byte) 189, native_get_S10_6_m2_1(s));
        assertEquals(12345678.90123, native_get_S10_6_m3_0(s));
        assertEquals((byte) 247, native_get_S10_6_m3_1(s));
        assertEquals(0.1234, native_get_S10_6_m4_0(s));
        assertEquals((byte) 83, native_get_S10_6_m4_1(s));
        assertEquals(123.4567, native_get_S10_6_m5_0(s));
        assertEquals((byte) 103, native_get_S10_6_m5_1(s));
        assertEquals(123456.789, native_get_S10_6_m6_0(s));
        assertEquals((byte) 189, native_get_S10_6_m6_1(s));
        assertEquals(12345678.90123, native_get_S10_6_m7_0(s));
        assertEquals((byte) 247, native_get_S10_6_m7_1(s));
        assertEquals(0.1234, native_get_S10_6_m8_0(s));
        assertEquals((byte) 83, native_get_S10_6_m8_1(s));
        assertEquals(123.4567, native_get_S10_6_m9_0(s));
        assertEquals((byte) 103, native_get_S10_6_m9_1(s));
    }
    @Test public void testReturnS1_0ByVal() {
        S1_0 s = native_new_S1_0((byte) 34);
        assertEquals((byte) 34, s.m0_0());
    }
    @Test public void testReturnS1_1ByVal() {
        S1_1 s = native_new_S1_1((short) 0x0009);
        assertEquals((short) 0x0009, s.m0_0());
    }
    @Test public void testReturnS1_2ByVal() {
        S1_2 s = native_new_S1_2(0x0000002d);
        assertEquals(0x0000002d, s.m0_0());
    }
    @Test public void testReturnS1_3ByVal() {
        S1_3 s = native_new_S1_3(0x000000000000322dL);
        assertEquals(0x000000000000322dL, s.m0_0());
    }
    @Test public void testReturnS1_4ByVal() {
        S1_4 s = native_new_S1_4(0.1234f);
        assertEquals(0.1234f, s.m0_0());
    }
    @Test public void testReturnS1_5ByVal() {
        S1_5 s = native_new_S1_5(0.1234);
        assertEquals(0.1234, s.m0_0());
    }
    @Test public void testReturnS1_6ByVal() {
        S1_6 s = native_new_S1_6(0.1234, (byte) 83);
        assertEquals(0.1234, s.m0_0());
        assertEquals((byte) 83, s.m0_1());
    }
    @Test public void testReturnS2_0ByVal() {
        S2_0 s = native_new_S2_0((byte) 34, (byte) 59);
        assertEquals((byte) 34, s.m0_0());
        assertEquals((byte) 59, s.m1_0());
    }
    @Test public void testReturnS2_1ByVal() {
        S2_1 s = native_new_S2_1((short) 0x0009, (short) 0x0042);
        assertEquals((short) 0x0009, s.m0_0());
        assertEquals((short) 0x0042, s.m1_0());
    }
    @Test public void testReturnS2_2ByVal() {
        S2_2 s = native_new_S2_2(0x0000002d, 0x0000ab34);
        assertEquals(0x0000002d, s.m0_0());
        assertEquals(0x0000ab34, s.m1_0());
    }
    @Test public void testReturnS2_3ByVal() {
        S2_3 s = native_new_S2_3(0x000000000000322dL, 0x0000000028abef73L);
        assertEquals(0x000000000000322dL, s.m0_0());
        assertEquals(0x0000000028abef73L, s.m1_0());
    }
    @Test public void testReturnS2_4ByVal() {
        S2_4 s = native_new_S2_4(0.1234f, 123.4567f);
        assertEquals(0.1234f, s.m0_0());
        assertEquals(123.4567f, s.m1_0());
    }
    @Test public void testReturnS2_5ByVal() {
        S2_5 s = native_new_S2_5(0.1234, 123.4567);
        assertEquals(0.1234, s.m0_0());
        assertEquals(123.4567, s.m1_0());
    }
    @Test public void testReturnS2_6ByVal() {
        S2_6 s = native_new_S2_6(0.1234, (byte) 83, 123.4567, (byte) 103);
        assertEquals(0.1234, s.m0_0());
        assertEquals((byte) 83, s.m0_1());
        assertEquals(123.4567, s.m1_0());
        assertEquals((byte) 103, s.m1_1());
    }
    @Test public void testReturnS3_0ByVal() {
        S3_0 s = native_new_S3_0((byte) 34, (byte) 59, (byte) 101);
        assertEquals((byte) 34, s.m0_0());
        assertEquals((byte) 59, s.m1_0());
        assertEquals((byte) 101, s.m2_0());
    }
    @Test public void testReturnS3_1ByVal() {
        S3_1 s = native_new_S3_1((short) 0x0009, (short) 0x0042, (short) 0x08ab);
        assertEquals((short) 0x0009, s.m0_0());
        assertEquals((short) 0x0042, s.m1_0());
        assertEquals((short) 0x08ab, s.m2_0());
    }
    @Test public void testReturnS3_2ByVal() {
        S3_2 s = native_new_S3_2(0x0000002d, 0x0000ab34, 0x0019bec6);
        assertEquals(0x0000002d, s.m0_0());
        assertEquals(0x0000ab34, s.m1_0());
        assertEquals(0x0019bec6, s.m2_0());
    }
    @Test public void testReturnS3_3ByVal() {
        S3_3 s = native_new_S3_3(0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L);
        assertEquals(0x000000000000322dL, s.m0_0());
        assertEquals(0x0000000028abef73L, s.m1_0());
        assertEquals(0x0000a128abf4c901L, s.m2_0());
    }
    @Test public void testReturnS3_4ByVal() {
        S3_4 s = native_new_S3_4(0.1234f, 123.4567f, 123456.789f);
        assertEquals(0.1234f, s.m0_0());
        assertEquals(123.4567f, s.m1_0());
        assertEquals(123456.789f, s.m2_0());
    }
    @Test public void testReturnS3_5ByVal() {
        S3_5 s = native_new_S3_5(0.1234, 123.4567, 123456.789);
        assertEquals(0.1234, s.m0_0());
        assertEquals(123.4567, s.m1_0());
        assertEquals(123456.789, s.m2_0());
    }
    @Test public void testReturnS3_6ByVal() {
        S3_6 s = native_new_S3_6(0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189);
        assertEquals(0.1234, s.m0_0());
        assertEquals((byte) 83, s.m0_1());
        assertEquals(123.4567, s.m1_0());
        assertEquals((byte) 103, s.m1_1());
        assertEquals(123456.789, s.m2_0());
        assertEquals((byte) 189, s.m2_1());
    }
    @Test public void testReturnS4_0ByVal() {
        S4_0 s = native_new_S4_0((byte) 34, (byte) 59, (byte) 101, (byte) 158);
        assertEquals((byte) 34, s.m0_0());
        assertEquals((byte) 59, s.m1_0());
        assertEquals((byte) 101, s.m2_0());
        assertEquals((byte) 158, s.m3_0());
    }
    @Test public void testReturnS4_1ByVal() {
        S4_1 s = native_new_S4_1((short) 0x0009, (short) 0x0042, (short) 0x08ab, (short) 0xa4f9);
        assertEquals((short) 0x0009, s.m0_0());
        assertEquals((short) 0x0042, s.m1_0());
        assertEquals((short) 0x08ab, s.m2_0());
        assertEquals((short) 0xa4f9, s.m3_0());
    }
    @Test public void testReturnS4_2ByVal() {
        S4_2 s = native_new_S4_2(0x0000002d, 0x0000ab34, 0x0019bec6, 0xe5ab2678);
        assertEquals(0x0000002d, s.m0_0());
        assertEquals(0x0000ab34, s.m1_0());
        assertEquals(0x0019bec6, s.m2_0());
        assertEquals(0xe5ab2678, s.m3_0());
    }
    @Test public void testReturnS4_3ByVal() {
        S4_3 s = native_new_S4_3(0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L, 0x61b8afc3450a1b56L);
        assertEquals(0x000000000000322dL, s.m0_0());
        assertEquals(0x0000000028abef73L, s.m1_0());
        assertEquals(0x0000a128abf4c901L, s.m2_0());
        assertEquals(0x61b8afc3450a1b56L, s.m3_0());
    }
    @Test public void testReturnS4_4ByVal() {
        S4_4 s = native_new_S4_4(0.1234f, 123.4567f, 123456.789f, 12345678.90123f);
        assertEquals(0.1234f, s.m0_0());
        assertEquals(123.4567f, s.m1_0());
        assertEquals(123456.789f, s.m2_0());
        assertEquals(12345678.90123f, s.m3_0());
    }
    @Test public void testReturnS4_5ByVal() {
        S4_5 s = native_new_S4_5(0.1234, 123.4567, 123456.789, 12345678.90123);
        assertEquals(0.1234, s.m0_0());
        assertEquals(123.4567, s.m1_0());
        assertEquals(123456.789, s.m2_0());
        assertEquals(12345678.90123, s.m3_0());
    }
    @Test public void testReturnS4_6ByVal() {
        S4_6 s = native_new_S4_6(0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189, 12345678.90123, (byte) 247);
        assertEquals(0.1234, s.m0_0());
        assertEquals((byte) 83, s.m0_1());
        assertEquals(123.4567, s.m1_0());
        assertEquals((byte) 103, s.m1_1());
        assertEquals(123456.789, s.m2_0());
        assertEquals((byte) 189, s.m2_1());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals((byte) 247, s.m3_1());
    }
    @Test public void testReturnS5_0ByVal() {
        S5_0 s = native_new_S5_0((byte) 34, (byte) 59, (byte) 101, (byte) 158, (byte) 34);
        assertEquals((byte) 34, s.m0_0());
        assertEquals((byte) 59, s.m1_0());
        assertEquals((byte) 101, s.m2_0());
        assertEquals((byte) 158, s.m3_0());
        assertEquals((byte) 34, s.m4_0());
    }
    @Test public void testReturnS5_1ByVal() {
        S5_1 s = native_new_S5_1((short) 0x0009, (short) 0x0042, (short) 0x08ab, (short) 0xa4f9, (short) 0x0009);
        assertEquals((short) 0x0009, s.m0_0());
        assertEquals((short) 0x0042, s.m1_0());
        assertEquals((short) 0x08ab, s.m2_0());
        assertEquals((short) 0xa4f9, s.m3_0());
        assertEquals((short) 0x0009, s.m4_0());
    }
    @Test public void testReturnS5_2ByVal() {
        S5_2 s = native_new_S5_2(0x0000002d, 0x0000ab34, 0x0019bec6, 0xe5ab2678, 0x0000002d);
        assertEquals(0x0000002d, s.m0_0());
        assertEquals(0x0000ab34, s.m1_0());
        assertEquals(0x0019bec6, s.m2_0());
        assertEquals(0xe5ab2678, s.m3_0());
        assertEquals(0x0000002d, s.m4_0());
    }
    @Test public void testReturnS5_3ByVal() {
        S5_3 s = native_new_S5_3(0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L, 0x61b8afc3450a1b56L, 0x000000000000322dL);
        assertEquals(0x000000000000322dL, s.m0_0());
        assertEquals(0x0000000028abef73L, s.m1_0());
        assertEquals(0x0000a128abf4c901L, s.m2_0());
        assertEquals(0x61b8afc3450a1b56L, s.m3_0());
        assertEquals(0x000000000000322dL, s.m4_0());
    }
    @Test public void testReturnS5_4ByVal() {
        S5_4 s = native_new_S5_4(0.1234f, 123.4567f, 123456.789f, 12345678.90123f, 0.1234f);
        assertEquals(0.1234f, s.m0_0());
        assertEquals(123.4567f, s.m1_0());
        assertEquals(123456.789f, s.m2_0());
        assertEquals(12345678.90123f, s.m3_0());
        assertEquals(0.1234f, s.m4_0());
    }
    @Test public void testReturnS5_5ByVal() {
        S5_5 s = native_new_S5_5(0.1234, 123.4567, 123456.789, 12345678.90123, 0.1234);
        assertEquals(0.1234, s.m0_0());
        assertEquals(123.4567, s.m1_0());
        assertEquals(123456.789, s.m2_0());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals(0.1234, s.m4_0());
    }
    @Test public void testReturnS5_6ByVal() {
        S5_6 s = native_new_S5_6(0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189, 12345678.90123, (byte) 247, 0.1234, (byte) 83);
        assertEquals(0.1234, s.m0_0());
        assertEquals((byte) 83, s.m0_1());
        assertEquals(123.4567, s.m1_0());
        assertEquals((byte) 103, s.m1_1());
        assertEquals(123456.789, s.m2_0());
        assertEquals((byte) 189, s.m2_1());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals((byte) 247, s.m3_1());
        assertEquals(0.1234, s.m4_0());
        assertEquals((byte) 83, s.m4_1());
    }
    @Test public void testReturnS6_0ByVal() {
        S6_0 s = native_new_S6_0((byte) 34, (byte) 59, (byte) 101, (byte) 158, (byte) 34, (byte) 59);
        assertEquals((byte) 34, s.m0_0());
        assertEquals((byte) 59, s.m1_0());
        assertEquals((byte) 101, s.m2_0());
        assertEquals((byte) 158, s.m3_0());
        assertEquals((byte) 34, s.m4_0());
        assertEquals((byte) 59, s.m5_0());
    }
    @Test public void testReturnS6_1ByVal() {
        S6_1 s = native_new_S6_1((short) 0x0009, (short) 0x0042, (short) 0x08ab, (short) 0xa4f9, (short) 0x0009, (short) 0x0042);
        assertEquals((short) 0x0009, s.m0_0());
        assertEquals((short) 0x0042, s.m1_0());
        assertEquals((short) 0x08ab, s.m2_0());
        assertEquals((short) 0xa4f9, s.m3_0());
        assertEquals((short) 0x0009, s.m4_0());
        assertEquals((short) 0x0042, s.m5_0());
    }
    @Test public void testReturnS6_2ByVal() {
        S6_2 s = native_new_S6_2(0x0000002d, 0x0000ab34, 0x0019bec6, 0xe5ab2678, 0x0000002d, 0x0000ab34);
        assertEquals(0x0000002d, s.m0_0());
        assertEquals(0x0000ab34, s.m1_0());
        assertEquals(0x0019bec6, s.m2_0());
        assertEquals(0xe5ab2678, s.m3_0());
        assertEquals(0x0000002d, s.m4_0());
        assertEquals(0x0000ab34, s.m5_0());
    }
    @Test public void testReturnS6_3ByVal() {
        S6_3 s = native_new_S6_3(0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L, 0x61b8afc3450a1b56L, 0x000000000000322dL, 0x0000000028abef73L);
        assertEquals(0x000000000000322dL, s.m0_0());
        assertEquals(0x0000000028abef73L, s.m1_0());
        assertEquals(0x0000a128abf4c901L, s.m2_0());
        assertEquals(0x61b8afc3450a1b56L, s.m3_0());
        assertEquals(0x000000000000322dL, s.m4_0());
        assertEquals(0x0000000028abef73L, s.m5_0());
    }
    @Test public void testReturnS6_4ByVal() {
        S6_4 s = native_new_S6_4(0.1234f, 123.4567f, 123456.789f, 12345678.90123f, 0.1234f, 123.4567f);
        assertEquals(0.1234f, s.m0_0());
        assertEquals(123.4567f, s.m1_0());
        assertEquals(123456.789f, s.m2_0());
        assertEquals(12345678.90123f, s.m3_0());
        assertEquals(0.1234f, s.m4_0());
        assertEquals(123.4567f, s.m5_0());
    }
    @Test public void testReturnS6_5ByVal() {
        S6_5 s = native_new_S6_5(0.1234, 123.4567, 123456.789, 12345678.90123, 0.1234, 123.4567);
        assertEquals(0.1234, s.m0_0());
        assertEquals(123.4567, s.m1_0());
        assertEquals(123456.789, s.m2_0());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals(0.1234, s.m4_0());
        assertEquals(123.4567, s.m5_0());
    }
    @Test public void testReturnS6_6ByVal() {
        S6_6 s = native_new_S6_6(0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189, 12345678.90123, (byte) 247, 0.1234, (byte) 83, 123.4567, (byte) 103);
        assertEquals(0.1234, s.m0_0());
        assertEquals((byte) 83, s.m0_1());
        assertEquals(123.4567, s.m1_0());
        assertEquals((byte) 103, s.m1_1());
        assertEquals(123456.789, s.m2_0());
        assertEquals((byte) 189, s.m2_1());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals((byte) 247, s.m3_1());
        assertEquals(0.1234, s.m4_0());
        assertEquals((byte) 83, s.m4_1());
        assertEquals(123.4567, s.m5_0());
        assertEquals((byte) 103, s.m5_1());
    }
    @Test public void testReturnS7_0ByVal() {
        S7_0 s = native_new_S7_0((byte) 34, (byte) 59, (byte) 101, (byte) 158, (byte) 34, (byte) 59, (byte) 101);
        assertEquals((byte) 34, s.m0_0());
        assertEquals((byte) 59, s.m1_0());
        assertEquals((byte) 101, s.m2_0());
        assertEquals((byte) 158, s.m3_0());
        assertEquals((byte) 34, s.m4_0());
        assertEquals((byte) 59, s.m5_0());
        assertEquals((byte) 101, s.m6_0());
    }
    @Test public void testReturnS7_1ByVal() {
        S7_1 s = native_new_S7_1((short) 0x0009, (short) 0x0042, (short) 0x08ab, (short) 0xa4f9, (short) 0x0009, (short) 0x0042, (short) 0x08ab);
        assertEquals((short) 0x0009, s.m0_0());
        assertEquals((short) 0x0042, s.m1_0());
        assertEquals((short) 0x08ab, s.m2_0());
        assertEquals((short) 0xa4f9, s.m3_0());
        assertEquals((short) 0x0009, s.m4_0());
        assertEquals((short) 0x0042, s.m5_0());
        assertEquals((short) 0x08ab, s.m6_0());
    }
    @Test public void testReturnS7_2ByVal() {
        S7_2 s = native_new_S7_2(0x0000002d, 0x0000ab34, 0x0019bec6, 0xe5ab2678, 0x0000002d, 0x0000ab34, 0x0019bec6);
        assertEquals(0x0000002d, s.m0_0());
        assertEquals(0x0000ab34, s.m1_0());
        assertEquals(0x0019bec6, s.m2_0());
        assertEquals(0xe5ab2678, s.m3_0());
        assertEquals(0x0000002d, s.m4_0());
        assertEquals(0x0000ab34, s.m5_0());
        assertEquals(0x0019bec6, s.m6_0());
    }
    @Test public void testReturnS7_3ByVal() {
        S7_3 s = native_new_S7_3(0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L, 0x61b8afc3450a1b56L, 0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L);
        assertEquals(0x000000000000322dL, s.m0_0());
        assertEquals(0x0000000028abef73L, s.m1_0());
        assertEquals(0x0000a128abf4c901L, s.m2_0());
        assertEquals(0x61b8afc3450a1b56L, s.m3_0());
        assertEquals(0x000000000000322dL, s.m4_0());
        assertEquals(0x0000000028abef73L, s.m5_0());
        assertEquals(0x0000a128abf4c901L, s.m6_0());
    }
    @Test public void testReturnS7_4ByVal() {
        S7_4 s = native_new_S7_4(0.1234f, 123.4567f, 123456.789f, 12345678.90123f, 0.1234f, 123.4567f, 123456.789f);
        assertEquals(0.1234f, s.m0_0());
        assertEquals(123.4567f, s.m1_0());
        assertEquals(123456.789f, s.m2_0());
        assertEquals(12345678.90123f, s.m3_0());
        assertEquals(0.1234f, s.m4_0());
        assertEquals(123.4567f, s.m5_0());
        assertEquals(123456.789f, s.m6_0());
    }
    @Test public void testReturnS7_5ByVal() {
        S7_5 s = native_new_S7_5(0.1234, 123.4567, 123456.789, 12345678.90123, 0.1234, 123.4567, 123456.789);
        assertEquals(0.1234, s.m0_0());
        assertEquals(123.4567, s.m1_0());
        assertEquals(123456.789, s.m2_0());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals(0.1234, s.m4_0());
        assertEquals(123.4567, s.m5_0());
        assertEquals(123456.789, s.m6_0());
    }
    @Test public void testReturnS7_6ByVal() {
        S7_6 s = native_new_S7_6(0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189, 12345678.90123, (byte) 247, 0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189);
        assertEquals(0.1234, s.m0_0());
        assertEquals((byte) 83, s.m0_1());
        assertEquals(123.4567, s.m1_0());
        assertEquals((byte) 103, s.m1_1());
        assertEquals(123456.789, s.m2_0());
        assertEquals((byte) 189, s.m2_1());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals((byte) 247, s.m3_1());
        assertEquals(0.1234, s.m4_0());
        assertEquals((byte) 83, s.m4_1());
        assertEquals(123.4567, s.m5_0());
        assertEquals((byte) 103, s.m5_1());
        assertEquals(123456.789, s.m6_0());
        assertEquals((byte) 189, s.m6_1());
    }
    @Test public void testReturnS8_0ByVal() {
        S8_0 s = native_new_S8_0((byte) 34, (byte) 59, (byte) 101, (byte) 158, (byte) 34, (byte) 59, (byte) 101, (byte) 158);
        assertEquals((byte) 34, s.m0_0());
        assertEquals((byte) 59, s.m1_0());
        assertEquals((byte) 101, s.m2_0());
        assertEquals((byte) 158, s.m3_0());
        assertEquals((byte) 34, s.m4_0());
        assertEquals((byte) 59, s.m5_0());
        assertEquals((byte) 101, s.m6_0());
        assertEquals((byte) 158, s.m7_0());
    }
    @Test public void testReturnS8_1ByVal() {
        S8_1 s = native_new_S8_1((short) 0x0009, (short) 0x0042, (short) 0x08ab, (short) 0xa4f9, (short) 0x0009, (short) 0x0042, (short) 0x08ab, (short) 0xa4f9);
        assertEquals((short) 0x0009, s.m0_0());
        assertEquals((short) 0x0042, s.m1_0());
        assertEquals((short) 0x08ab, s.m2_0());
        assertEquals((short) 0xa4f9, s.m3_0());
        assertEquals((short) 0x0009, s.m4_0());
        assertEquals((short) 0x0042, s.m5_0());
        assertEquals((short) 0x08ab, s.m6_0());
        assertEquals((short) 0xa4f9, s.m7_0());
    }
    @Test public void testReturnS8_2ByVal() {
        S8_2 s = native_new_S8_2(0x0000002d, 0x0000ab34, 0x0019bec6, 0xe5ab2678, 0x0000002d, 0x0000ab34, 0x0019bec6, 0xe5ab2678);
        assertEquals(0x0000002d, s.m0_0());
        assertEquals(0x0000ab34, s.m1_0());
        assertEquals(0x0019bec6, s.m2_0());
        assertEquals(0xe5ab2678, s.m3_0());
        assertEquals(0x0000002d, s.m4_0());
        assertEquals(0x0000ab34, s.m5_0());
        assertEquals(0x0019bec6, s.m6_0());
        assertEquals(0xe5ab2678, s.m7_0());
    }
    @Test public void testReturnS8_3ByVal() {
        S8_3 s = native_new_S8_3(0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L, 0x61b8afc3450a1b56L, 0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L, 0x61b8afc3450a1b56L);
        assertEquals(0x000000000000322dL, s.m0_0());
        assertEquals(0x0000000028abef73L, s.m1_0());
        assertEquals(0x0000a128abf4c901L, s.m2_0());
        assertEquals(0x61b8afc3450a1b56L, s.m3_0());
        assertEquals(0x000000000000322dL, s.m4_0());
        assertEquals(0x0000000028abef73L, s.m5_0());
        assertEquals(0x0000a128abf4c901L, s.m6_0());
        assertEquals(0x61b8afc3450a1b56L, s.m7_0());
    }
    @Test public void testReturnS8_4ByVal() {
        S8_4 s = native_new_S8_4(0.1234f, 123.4567f, 123456.789f, 12345678.90123f, 0.1234f, 123.4567f, 123456.789f, 12345678.90123f);
        assertEquals(0.1234f, s.m0_0());
        assertEquals(123.4567f, s.m1_0());
        assertEquals(123456.789f, s.m2_0());
        assertEquals(12345678.90123f, s.m3_0());
        assertEquals(0.1234f, s.m4_0());
        assertEquals(123.4567f, s.m5_0());
        assertEquals(123456.789f, s.m6_0());
        assertEquals(12345678.90123f, s.m7_0());
    }
    @Test public void testReturnS8_5ByVal() {
        S8_5 s = native_new_S8_5(0.1234, 123.4567, 123456.789, 12345678.90123, 0.1234, 123.4567, 123456.789, 12345678.90123);
        assertEquals(0.1234, s.m0_0());
        assertEquals(123.4567, s.m1_0());
        assertEquals(123456.789, s.m2_0());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals(0.1234, s.m4_0());
        assertEquals(123.4567, s.m5_0());
        assertEquals(123456.789, s.m6_0());
        assertEquals(12345678.90123, s.m7_0());
    }
    @Test public void testReturnS8_6ByVal() {
        S8_6 s = native_new_S8_6(0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189, 12345678.90123, (byte) 247, 0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189, 12345678.90123, (byte) 247);
        assertEquals(0.1234, s.m0_0());
        assertEquals((byte) 83, s.m0_1());
        assertEquals(123.4567, s.m1_0());
        assertEquals((byte) 103, s.m1_1());
        assertEquals(123456.789, s.m2_0());
        assertEquals((byte) 189, s.m2_1());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals((byte) 247, s.m3_1());
        assertEquals(0.1234, s.m4_0());
        assertEquals((byte) 83, s.m4_1());
        assertEquals(123.4567, s.m5_0());
        assertEquals((byte) 103, s.m5_1());
        assertEquals(123456.789, s.m6_0());
        assertEquals((byte) 189, s.m6_1());
        assertEquals(12345678.90123, s.m7_0());
        assertEquals((byte) 247, s.m7_1());
    }
    @Test public void testReturnS9_0ByVal() {
        S9_0 s = native_new_S9_0((byte) 34, (byte) 59, (byte) 101, (byte) 158, (byte) 34, (byte) 59, (byte) 101, (byte) 158, (byte) 34);
        assertEquals((byte) 34, s.m0_0());
        assertEquals((byte) 59, s.m1_0());
        assertEquals((byte) 101, s.m2_0());
        assertEquals((byte) 158, s.m3_0());
        assertEquals((byte) 34, s.m4_0());
        assertEquals((byte) 59, s.m5_0());
        assertEquals((byte) 101, s.m6_0());
        assertEquals((byte) 158, s.m7_0());
        assertEquals((byte) 34, s.m8_0());
    }
    @Test public void testReturnS9_1ByVal() {
        S9_1 s = native_new_S9_1((short) 0x0009, (short) 0x0042, (short) 0x08ab, (short) 0xa4f9, (short) 0x0009, (short) 0x0042, (short) 0x08ab, (short) 0xa4f9, (short) 0x0009);
        assertEquals((short) 0x0009, s.m0_0());
        assertEquals((short) 0x0042, s.m1_0());
        assertEquals((short) 0x08ab, s.m2_0());
        assertEquals((short) 0xa4f9, s.m3_0());
        assertEquals((short) 0x0009, s.m4_0());
        assertEquals((short) 0x0042, s.m5_0());
        assertEquals((short) 0x08ab, s.m6_0());
        assertEquals((short) 0xa4f9, s.m7_0());
        assertEquals((short) 0x0009, s.m8_0());
    }
    @Test public void testReturnS9_2ByVal() {
        S9_2 s = native_new_S9_2(0x0000002d, 0x0000ab34, 0x0019bec6, 0xe5ab2678, 0x0000002d, 0x0000ab34, 0x0019bec6, 0xe5ab2678, 0x0000002d);
        assertEquals(0x0000002d, s.m0_0());
        assertEquals(0x0000ab34, s.m1_0());
        assertEquals(0x0019bec6, s.m2_0());
        assertEquals(0xe5ab2678, s.m3_0());
        assertEquals(0x0000002d, s.m4_0());
        assertEquals(0x0000ab34, s.m5_0());
        assertEquals(0x0019bec6, s.m6_0());
        assertEquals(0xe5ab2678, s.m7_0());
        assertEquals(0x0000002d, s.m8_0());
    }
    @Test public void testReturnS9_3ByVal() {
        S9_3 s = native_new_S9_3(0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L, 0x61b8afc3450a1b56L, 0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L, 0x61b8afc3450a1b56L, 0x000000000000322dL);
        assertEquals(0x000000000000322dL, s.m0_0());
        assertEquals(0x0000000028abef73L, s.m1_0());
        assertEquals(0x0000a128abf4c901L, s.m2_0());
        assertEquals(0x61b8afc3450a1b56L, s.m3_0());
        assertEquals(0x000000000000322dL, s.m4_0());
        assertEquals(0x0000000028abef73L, s.m5_0());
        assertEquals(0x0000a128abf4c901L, s.m6_0());
        assertEquals(0x61b8afc3450a1b56L, s.m7_0());
        assertEquals(0x000000000000322dL, s.m8_0());
    }
    @Test public void testReturnS9_4ByVal() {
        S9_4 s = native_new_S9_4(0.1234f, 123.4567f, 123456.789f, 12345678.90123f, 0.1234f, 123.4567f, 123456.789f, 12345678.90123f, 0.1234f);
        assertEquals(0.1234f, s.m0_0());
        assertEquals(123.4567f, s.m1_0());
        assertEquals(123456.789f, s.m2_0());
        assertEquals(12345678.90123f, s.m3_0());
        assertEquals(0.1234f, s.m4_0());
        assertEquals(123.4567f, s.m5_0());
        assertEquals(123456.789f, s.m6_0());
        assertEquals(12345678.90123f, s.m7_0());
        assertEquals(0.1234f, s.m8_0());
    }
    @Test public void testReturnS9_5ByVal() {
        S9_5 s = native_new_S9_5(0.1234, 123.4567, 123456.789, 12345678.90123, 0.1234, 123.4567, 123456.789, 12345678.90123, 0.1234);
        assertEquals(0.1234, s.m0_0());
        assertEquals(123.4567, s.m1_0());
        assertEquals(123456.789, s.m2_0());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals(0.1234, s.m4_0());
        assertEquals(123.4567, s.m5_0());
        assertEquals(123456.789, s.m6_0());
        assertEquals(12345678.90123, s.m7_0());
        assertEquals(0.1234, s.m8_0());
    }
    @Test public void testReturnS9_6ByVal() {
        S9_6 s = native_new_S9_6(0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189, 12345678.90123, (byte) 247, 0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189, 12345678.90123, (byte) 247, 0.1234, (byte) 83);
        assertEquals(0.1234, s.m0_0());
        assertEquals((byte) 83, s.m0_1());
        assertEquals(123.4567, s.m1_0());
        assertEquals((byte) 103, s.m1_1());
        assertEquals(123456.789, s.m2_0());
        assertEquals((byte) 189, s.m2_1());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals((byte) 247, s.m3_1());
        assertEquals(0.1234, s.m4_0());
        assertEquals((byte) 83, s.m4_1());
        assertEquals(123.4567, s.m5_0());
        assertEquals((byte) 103, s.m5_1());
        assertEquals(123456.789, s.m6_0());
        assertEquals((byte) 189, s.m6_1());
        assertEquals(12345678.90123, s.m7_0());
        assertEquals((byte) 247, s.m7_1());
        assertEquals(0.1234, s.m8_0());
        assertEquals((byte) 83, s.m8_1());
    }
    @Test public void testReturnS10_0ByVal() {
        S10_0 s = native_new_S10_0((byte) 34, (byte) 59, (byte) 101, (byte) 158, (byte) 34, (byte) 59, (byte) 101, (byte) 158, (byte) 34, (byte) 59);
        assertEquals((byte) 34, s.m0_0());
        assertEquals((byte) 59, s.m1_0());
        assertEquals((byte) 101, s.m2_0());
        assertEquals((byte) 158, s.m3_0());
        assertEquals((byte) 34, s.m4_0());
        assertEquals((byte) 59, s.m5_0());
        assertEquals((byte) 101, s.m6_0());
        assertEquals((byte) 158, s.m7_0());
        assertEquals((byte) 34, s.m8_0());
        assertEquals((byte) 59, s.m9_0());
    }
    @Test public void testReturnS10_1ByVal() {
        S10_1 s = native_new_S10_1((short) 0x0009, (short) 0x0042, (short) 0x08ab, (short) 0xa4f9, (short) 0x0009, (short) 0x0042, (short) 0x08ab, (short) 0xa4f9, (short) 0x0009, (short) 0x0042);
        assertEquals((short) 0x0009, s.m0_0());
        assertEquals((short) 0x0042, s.m1_0());
        assertEquals((short) 0x08ab, s.m2_0());
        assertEquals((short) 0xa4f9, s.m3_0());
        assertEquals((short) 0x0009, s.m4_0());
        assertEquals((short) 0x0042, s.m5_0());
        assertEquals((short) 0x08ab, s.m6_0());
        assertEquals((short) 0xa4f9, s.m7_0());
        assertEquals((short) 0x0009, s.m8_0());
        assertEquals((short) 0x0042, s.m9_0());
    }
    @Test public void testReturnS10_2ByVal() {
        S10_2 s = native_new_S10_2(0x0000002d, 0x0000ab34, 0x0019bec6, 0xe5ab2678, 0x0000002d, 0x0000ab34, 0x0019bec6, 0xe5ab2678, 0x0000002d, 0x0000ab34);
        assertEquals(0x0000002d, s.m0_0());
        assertEquals(0x0000ab34, s.m1_0());
        assertEquals(0x0019bec6, s.m2_0());
        assertEquals(0xe5ab2678, s.m3_0());
        assertEquals(0x0000002d, s.m4_0());
        assertEquals(0x0000ab34, s.m5_0());
        assertEquals(0x0019bec6, s.m6_0());
        assertEquals(0xe5ab2678, s.m7_0());
        assertEquals(0x0000002d, s.m8_0());
        assertEquals(0x0000ab34, s.m9_0());
    }
    @Test public void testReturnS10_3ByVal() {
        S10_3 s = native_new_S10_3(0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L, 0x61b8afc3450a1b56L, 0x000000000000322dL, 0x0000000028abef73L, 0x0000a128abf4c901L, 0x61b8afc3450a1b56L, 0x000000000000322dL, 0x0000000028abef73L);
        assertEquals(0x000000000000322dL, s.m0_0());
        assertEquals(0x0000000028abef73L, s.m1_0());
        assertEquals(0x0000a128abf4c901L, s.m2_0());
        assertEquals(0x61b8afc3450a1b56L, s.m3_0());
        assertEquals(0x000000000000322dL, s.m4_0());
        assertEquals(0x0000000028abef73L, s.m5_0());
        assertEquals(0x0000a128abf4c901L, s.m6_0());
        assertEquals(0x61b8afc3450a1b56L, s.m7_0());
        assertEquals(0x000000000000322dL, s.m8_0());
        assertEquals(0x0000000028abef73L, s.m9_0());
    }
    @Test public void testReturnS10_4ByVal() {
        S10_4 s = native_new_S10_4(0.1234f, 123.4567f, 123456.789f, 12345678.90123f, 0.1234f, 123.4567f, 123456.789f, 12345678.90123f, 0.1234f, 123.4567f);
        assertEquals(0.1234f, s.m0_0());
        assertEquals(123.4567f, s.m1_0());
        assertEquals(123456.789f, s.m2_0());
        assertEquals(12345678.90123f, s.m3_0());
        assertEquals(0.1234f, s.m4_0());
        assertEquals(123.4567f, s.m5_0());
        assertEquals(123456.789f, s.m6_0());
        assertEquals(12345678.90123f, s.m7_0());
        assertEquals(0.1234f, s.m8_0());
        assertEquals(123.4567f, s.m9_0());
    }
    @Test public void testReturnS10_5ByVal() {
        S10_5 s = native_new_S10_5(0.1234, 123.4567, 123456.789, 12345678.90123, 0.1234, 123.4567, 123456.789, 12345678.90123, 0.1234, 123.4567);
        assertEquals(0.1234, s.m0_0());
        assertEquals(123.4567, s.m1_0());
        assertEquals(123456.789, s.m2_0());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals(0.1234, s.m4_0());
        assertEquals(123.4567, s.m5_0());
        assertEquals(123456.789, s.m6_0());
        assertEquals(12345678.90123, s.m7_0());
        assertEquals(0.1234, s.m8_0());
        assertEquals(123.4567, s.m9_0());
    }
    @Test public void testReturnS10_6ByVal() {
        S10_6 s = native_new_S10_6(0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189, 12345678.90123, (byte) 247, 0.1234, (byte) 83, 123.4567, (byte) 103, 123456.789, (byte) 189, 12345678.90123, (byte) 247, 0.1234, (byte) 83, 123.4567, (byte) 103);
        assertEquals(0.1234, s.m0_0());
        assertEquals((byte) 83, s.m0_1());
        assertEquals(123.4567, s.m1_0());
        assertEquals((byte) 103, s.m1_1());
        assertEquals(123456.789, s.m2_0());
        assertEquals((byte) 189, s.m2_1());
        assertEquals(12345678.90123, s.m3_0());
        assertEquals((byte) 247, s.m3_1());
        assertEquals(0.1234, s.m4_0());
        assertEquals((byte) 83, s.m4_1());
        assertEquals(123.4567, s.m5_0());
        assertEquals((byte) 103, s.m5_1());
        assertEquals(123456.789, s.m6_0());
        assertEquals((byte) 189, s.m6_1());
        assertEquals(12345678.90123, s.m7_0());
        assertEquals((byte) 247, s.m7_1());
        assertEquals(0.1234, s.m8_0());
        assertEquals((byte) 83, s.m8_1());
        assertEquals(123.4567, s.m9_0());
        assertEquals((byte) 103, s.m9_1());
    }
}
